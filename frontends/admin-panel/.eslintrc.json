{
  "env": {
    "browser": true,
    "jest": true
  },
  "extends": ["react-app", "airbnb", "plugin:prettier/recommended", "plugin:@typescript-eslint/recommended", "prettier/@typescript-eslint"],
  // unlike .eslintignore, these values will cascade
  "ignorePatterns": ["node_modules/", "build/", "public/"],
  "overrides": [
    {
      "files": ["**.ts", "**.tsx"],
      "rules": {
        // with static typing this rule is not so useful
        "consistent-return": "off",
        // these bare ESLint rules are superseded by TS equivalents
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",

        // TypeScript is largely redundant with PropTypes
        "react/prop-types": "off"
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint", "simple-import-sort"],
  "rules": {
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx", ".js"] }],
    // don't require extensions for typescript modules
    "import/extensions": [
      "error",
      "always",
      { "js": "never", "ts": "never", "tsx": "never" }
    ],
    "import/no-extraneous-dependencies": ["error", { "packageDir": "./" }],
    "no-new": 1,
    // make sure we are using the Babel macro for styled-components
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "styled-components",
            "message": "Please import from styled-components/macro."
          }
        ],
        "patterns": ["!styled-components/macro"]
      }
    ],
    "react/jsx-props-no-spreading": 0,
    "func-names": 0,
    "react/jsx-wrap-multilines": [
      "error",
      { "declaration": false, "assignment": false }
    ],
    // these rules conflict with prettier; let prettier win
    "react/jsx-one-expression-per-line": 0,
    "react/jsx-curly-newline": 0
  },
  "settings": {
    "import/resolver": {
      // use <root>/tsconfig.json
      "typescript": {
        // always try to resolve types under `<root>@types` directory
        // even it doesn't contain any source code, like `@types/unist`
        "alwaysTryTypes": true
      }
    }
  }
}
