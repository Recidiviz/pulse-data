# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2021 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================

from collections import abc
from typing import Any, Callable, Iterable, Iterator

class Trie(abc.MutableMapping):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __iter__(self) -> Iterator[object]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key_or_slice: object) -> object: ...
    def __setitem__(self, key_or_slice: object, value: object) -> None: ...
    def __delitem__(self, key_or_slice: object) -> None: ...

class StringTrie(Trie):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class PrefixSet(abc.MutableSet):
    def __init__(
        self,
        iterable: Iterable[str] = (),
        factory: Callable[[Any], Trie] = Trie,
        **kwargs: Any
    ) -> None: ...
    def copy(self) -> "PrefixSet": ...
    def __contains__(self, key: object) -> bool: ...
    def __iter__(self) -> Iterator[object]: ...
    def iter(self, prefix: object) -> Iterator[object]: ...
    def __len__(self) -> int: ...
    def add(self, value: object) -> None: ...
    def discard(self, value: object) -> None: ...
    def remove(self, value: object) -> None: ...
    def pop(self) -> object: ...
