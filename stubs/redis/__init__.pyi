# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2021 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
from typing import Optional, Dict, List, Iterator

class Redis:
    def __init__(
        self, host: Optional[str] = "localhost", port: Optional[int] = 6379
    ): ...
    def expire(self, key: str, expiry: int) -> None: ...
    def get(self, key: str) -> Optional[bytes]: ...
    def setex(self, key: str, expiry: int, value: str) -> None: ...
    def llen(self, key: str) -> int: ...
    def lindex(self, key: str, index: int) -> Optional[bytes]: ...
    def ltrim(self, key: str, start: int, end: int) -> None: ...
    def lpush(self, key: str, *values: str) -> int: ...
    def rpush(self, key: str, *values: str) -> int: ...
    def delete(self, key: str) -> int: ...
    def exists(self, key: str) -> bool: ...
    def incr(self, key: str) -> int: ...
    def rename(self, key: str, newkey: str) -> None: ...
    def scan_iter(
        self, match: Optional[str] = None, count: Optional[int] = None
    ) -> Iterator[bytes]: ...
    def set(self, key: str, value: str) -> None: ...
    def ttl(self, key: str) -> int: ...
    def zadd(self, key: str, mapping: Dict[str, int]) -> int: ...
    def zcard(self, key: str) -> int: ...
    def zrange(self, key: str, start: int, end: int) -> List: ...
    def zremrangebyrank(self, key: str, start: int, end: int) -> int: ...
    def pipeline(self) -> "Redis": ...
    def execute(self) -> List: ...
