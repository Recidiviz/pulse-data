FROM ubuntu:noble

ENV DEBIAN_FRONTEND noninteractive

# NOTE: It is is extremely important that we do not delete this
# variable. One of our dependencies, dateparser, seems to require
# that TZ is defined (to be truly anything) in order to parse dates
# properly. If it is not defined, our date parsing will silently
# return None in a large set of circumstances which is of course,
# unideal.
ENV TZ America/New_York

RUN apt update -y && apt upgrade -y && \
    apt install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt install -y \
    locales \
    git \
    libxml2-dev libxslt1-dev \
    default-jre \
    libpq-dev \
    build-essential \
    python3.11-dev \
    curl && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

RUN locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LC_CTYPE en_US.UTF-8
ENV LANG en_US.UTF-8

# Postgres pulls in tzdata which must have these set to stay noninteractive.
RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

# Make stdout/stderr unbuffered. This prevents delay between output and cloud
# logging collection.
ENV PYTHONUNBUFFERED 1


# If DEV_MODE="True", then install dependencies required for running tests
ARG DEV_MODE="False"

# Install postgres to be used by tests that need to write to a database from multiple threads.
RUN if [ "$DEV_MODE" = "True" ]; \
    then  \
    apt-get update && \
    apt-get install lsb-release wget -y && \
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" | tee /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && \
    apt-get install postgresql-13 -y && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean; \
    fi
# Add all the postgres tools installed above to the path, so that we can use pg_ctl, etc. in tests.
# Uses variable substitution to set PATH_PREFIX to '/usr/lib/postgresql/13/bin/' in DEV_MODE and otherwise leave it

# blank. Docker doesn't support setting environment variables within conditions, so we can't do this above.
ENV PATH_PREFIX=${DEV_MODE:+/usr/lib/postgresql/13/bin/:}
# Then prepend our path with whatever is in PATH_PREFIX.
ENV PATH="$PATH_PREFIX$PATH"

# In order to use this Dockerfile with Cloud Run, PIPENV_VENV_IN_PROJECT must be set.
# If not, Cloud Run will try to "helpfully" create a new virtualenv for us which will not match our
# expected set of dependencies.
# The main effect of this variable is to create the pipenv environment in the `.venv` folder in the
# root of the project.
ENV PIPENV_VENV_IN_PROJECT="1"

RUN adduser recidiviz && mkdir /app && chown recidiviz /app/
USER recidiviz
RUN curl -s https://bootstrap.pypa.io/get-pip.py 2>&1 | python3.11
ENV PATH=/home/recidiviz/.local/bin:$PATH
RUN pip install pipenv --user

# Add only the Pipfiles first to ensure we cache `pipenv sync` when application code is updated but not the Pipfiles
COPY --chown=recidiviz Pipfile /app/
COPY --chown=recidiviz Pipfile.lock /app/

WORKDIR /app

RUN pipenv \
    # Include user-level site-packages (namely pipenv) in our new virtual environment
    --site-packages \
    --python 3.11 && \
    pipenv install \
    # This will fail a build if the Pipfile.lock _meta hash is out of date from the Pipfile contents.
    --deploy \
    --verbose \
    $(if [ "$DEV_MODE" = "True" ]; then echo "--dev"; fi)

# Add the current commit SHA as an env variable
ARG CURRENT_GIT_SHA=""
ENV CURRENT_GIT_SHA=${CURRENT_GIT_SHA}

EXPOSE 8080
