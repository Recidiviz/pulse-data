# Don't define a language since we run all tests in docker
language: generic

services:
  - docker

env:
  global:
    - secure: "UDCpFraLrjyCmWjBqEPitkBUoBmTlKsLNHd7yA261P82vRmOkxCG2dN5x4VDLbpjdG2nU1K/aHrWlbU0khaBRsKWmk/1oSIlqG/Yuf6vGfh4enIq1nHQCDbH3sLRC6HTaf5lqrjQPca7Tww9VjllsDye2OWY049/PP1QZo77FjplWi3dnXOAa0UkQG2BSiRR0R08LZcafGypHcpVKlyE3uMH1tJlKaHRcyH1MD5y8RZK6cmVs1NY4/AZN7hZlcrdLV9KnIIqHorSjww48L+EL3O2pJbZzqPt64d3dgccPIMIwv21/isjmCQ5tQZhYulQzXU3chCuAkjOZLa+I24Jn6hlYkK5JkmEuqWjeAqpTPTFcV70YBuHhTcbNNKDiwXeV7zvzi7ONBTZ1Jie2SyWucUGYPA9B4sU1dnF0yGDtkSUxYYeB1NCQ+Ps3W812g4TU5GW6iou/jb+R61TGOaFS5MCssl45xSA+p/aX2h59YcAsvS/yaU5UhaIyt752ZRMkhgZ9czpz8Mx0hy0kfsl8ujx1g6ZZhbR5vDIjeeweerFxTES54PGfD5+Kw83JDL/U83fMCHMY9vBlFmhhf8kGDD8shWAh2oFpXZt7exliH4y68VGiZNvnW6trQiKlprkDX5XbvlI9FV2r8etXDpXmWpAFO3f2jSYKfpU/N4eQmw="
    - secure: "oSNPJ5LgVty4Ur+6W7o3Sqan1CtU/11T8/vJAzEOu6NdVUUx6cdyOmLXjVOtXVn6+PHqiaXx4SQwk0m6xrb2B4mFVZvSTz03YFRjtHhSI3NJ72bKoqCElxLQx605p6H+XAPcSdTv9oLQvQ38ybcIjHOnJuNnTxcjKJStjdPSj1uDfo/jk5ik/rK3Fqr3WC3JwwbGEkI42fQkysGc1M/2aEIhgdlQNtdQVSCyKWRhhmFN/ZBjmGnFsLB0HNkg+dvR66CFk37agtTTlGBPpW0vpCiU3ACVjiRveAioDWtWdqfZWbsEcKTv/hcjqJ4ePDV+tqGe0BZyTJ8Bw3WEUysPpg+lkkznQ49OdhHgsYvozuKf3tmiRogKhcQb5wefq9abeE5V6HSFEUzp2J0WvbHoYm20zoee6cYvScZClRvb3CDuedmAAiEJ8N2Fw3iw8jIWVcyW1lbKRoDFOHnVPRVmBYgotATygFmugN64JT00y66O7/+LmWY2Xhwbkk1iO5xRwxqC6pVKTP/OiNvaeAXwc0zbBtqmu/IIj91dx0jIPck5ArHcBBU3MnDc+lrwvEtJlNa/+aGrue/6SY7jN8i/huwX1NZ4rhypGYr2nR8Ja8gVOU5nRMmc1o+9/8pkdJvKY1AvirvL4olbe66RhhGqO6M3kUtW/HrJ4s8DH1G0NDE="
    - secure: "AfVS0ZOg1Q56aJ5mO1/a3hHUKFDkR9eHp/9ckLf8nap/o8uaPcNMk6udS0qiUFzmz+fhT4UWmsPjuSxeN5KMUFh0xeGMQf/4D2oqQURvzJ/wHKxF3WbkHtTCvUhZEkzyK9o+UtuyD/Z7mpaJ0a4a3MFvFMEEpE3me8MruMIXkHoP2Ufl2dgTysE452u6wXCWVUboBwdcLzAK4foqgFqdXWD3US8jXmFVanG4d0Us+8SQ9ChQHd/kgtICZRUdB0FB1qhat0mFZ4aNljhO9TUsz/qMAX/Y2/ftKGGB9Aybl41EPNU78+lrl6u0UAnLbAY7/UhwWWSoXAaRlVm71hRRbEHKfZb38CoBhfCb8xc4UgNTjeownjtm3AnKOsxKJY0VwQ8iSRDNcLPLEEKcrDFi1o3KKAZE93EuoPNC1/2qKkZtjclQWK8YaRr03e11GF1B65luqryiBAdTqN21mQM2YBz9E/mAjtHp176poAb2A5NU+gRaPAv0HUVW/7QiKer7YKjJ8fcSz6YpwFb3kv0mtdLT0MiT7w6FVbnj0Ym6n43jT6w3Ij9Hay3WatSMCVXwU+e1Vq3SfXSFdbslui0e5NTH3X9dFEohAzGT1FtfSD9oCt7m6x/LFzOVUGzKq850X8DZvTzHT5BH65i0Pif0KHfXLUuZ3vXGThCQuFavqGM="

# Currently just installs terraform.
before_install:
  - curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.14.3/terraform_0.14.3_linux_amd64.zip
  - unzip /tmp/terraform.zip -d /tmp
  - mkdir -p ~/bin
  - mv /tmp/terraform ~/bin
  - export PATH="~/bin:$PATH"

install:
  # First try to read the most recent docker image from cache
  - mkdir -p ~/docker-images
  - if [ -f ~/docker-images/recidiviz-image.tgz ]; then echo "$DOCKER_PASSWORD" | docker login -u="$DOCKER_USERNAME" --password-stdin && docker load -i ~/docker-images/recidiviz-image.tgz; fi

  # Build the new docker image, sharing layers from the cached docker image
  # Specifying `DEV_MODE=True` installs dev dependencies (eg. pytest)
  - echo "$DOCKER_PASSWORD" | docker login -u="$DOCKER_USERNAME" --password-stdin && docker build -t recidiviz-image . --cache-from recidiviz-image:latest --build-arg DEV_MODE=True

before_script:
  # Run our docker application so we can `exec` our tests against it. Network set to 'host' to allow us to connect to
  # the Travis postgres server from inside the docker container.
  - echo "$DOCKER_PASSWORD" | docker login -u="$DOCKER_USERNAME" --password-stdin && docker run --env CI='true' --env TRAVIS='true' --name recidiviz -d -t recidiviz-image

script:
  # Order test commands with fastest first to ensure we fail fast
  # Note: Pass `-it` to docker to display the test result to the travis output (ie. web ui)
  - if [ $TRAVIS_PULL_REQUEST != "false" ]; then
    docker exec -it recidiviz pipenv run python -m recidiviz.tools.validate_source_modifications --commit-range $TRAVIS_COMMIT_RANGE;
    fi
  - docker exec -it recidiviz pipenv run python -m recidiviz.tools.is_pipenv_locked
  - docker exec -it recidiviz pipenv run mypy recidiviz
  - travis_wait 20 docker exec -it recidiviz pipenv run ./recidiviz/tools/travis/run_pylint.sh

  # Lint Terraform
  - TF_INPUT=false terraform -chdir=recidiviz/tools/deploy/terraform init -backend=false
  - TF_INPUT=false terraform -chdir=recidiviz/tools/deploy/terraform validate

  - docker exec -it recidiviz pipenv run pytest recidiviz -n auto --test-set parallel
  - docker exec -it recidiviz pipenv run pytest recidiviz --test-set not-parallel --with-emulator

  # Cache the newly built docker image for the next Travis run
  - echo "$DOCKER_PASSWORD" | docker login -u="$DOCKER_USERNAME" --password-stdin && docker save recidiviz-image | gzip -c > ~/docker-images/recidiviz-image.tgz

after_success:
  - coveralls

# Reduce the workload on travis by only whitelisting 'push' builds on master (ie. Run a build for every merge into
# master but not pushes to other branches). Note: If running all pushes on master (ie. PR merges) overloads Travis, we
# could switch to periodically running builds on master via a Travis cron.
branches:
  only:
    - master
    - /^releases\/v[0-9]+\.[0-9]+-rc$/

cache:
  directories:
    - ~/docker-images

notifications:
  slack:
    rooms:
      - secure: "RRx5Klgwfr2ggUxugs2nBOt2atYoKDrv+RfVY2OeINsZqPeZoxpfKntpIctfdUfPIZofyNUfPFfIFjZdNWBwXHKTu1/3KkCslBDUoPW9En1np5RTrVUmZJJy7no+J19PuDUDQYcDRCcEw41PbjcE7NPfK12bTI7jCGKw3ZTX1tLWlXDz70BOIsJxW3gLrgopFo0mNGWKbIVBU4VeUxhOpxB3RzegtCNrTIcfiEpnuNcyNvzhTpzlQdinW4rXQjv5p7oxCEkMGTfywtVrUVLfrSMCCVde1rv2RUBJPmShmFbJjfWuozMMlVK82vXMjj+z3HrIYPAYMmbVM9zqn/SDjdwzfzbmldol8yKcW4DTmlH4phfw9qWGa/UdpcHPT5vUoNzg3QVvVTYwV8sG8O6XeO341BSelSdfmbFq6YJvgfgHgDXbjbP8ME2DqUP/0RE21FEXReaV8Ln3FvneMFK1MnKV3czKOOwh6m48M7zFcdQr1OFto2+aIdF8IS7nke3btzUW1HL7ppn+wlLdOGsYuTPsMUQ/ykVSMTvB9Iolj083mtGm/QOu316JKgZMbH82e9p6FbXil44i1UGc8H2j9RVri4U0m2sEps4MnHbuBRhejzh6fO4k7pbAKTn35sH7TEgfacCIzBOI8t3crPB1AaK8fmMGEiZo07WalWT/MS0="
      - secure: "HvKmG9uhMisA/WZOcqm/0fjgSbn/8IPCbLhqi2CvYhkiL413CBzU8ncnViMDSbOeOBqmhIUASRJjxwjvCEWnGyXVzAvq8XhxHbQMpQFgxftHyh/YsnmfH8aHZAUJSBYlNt/DuW5mTXH4lH7r+LtJz3L6bqQXMu9R4jpsOPS0HVKUzimNHeNjsO0E2HkVCw1M/nzOtFqSZtol8/dZxfwzdxu/yTw8zQGYO9g14/p6hm/V2ZcDq3YVswuPt1EgJQ41TohVXBVo/HPpo2sD6UODoonc5/0EvxOBmG1AH//5wcIUqYmIQSHxfK8WRvBnVWPk6o4KeOYAccBT1H3W5HXQL6iQuNhQzTKAjsuxN1dW+Rqpf+/G5IX/3TrztEaREpuSGl2xF2uq8g/zFpFGVxRxRFhSiFFAXBDfEKVC+Q7yuYEdSOAPMTF+6egI6MD8n5lV3vbeFTARBSvBF7NwT1m/V9+dsaGgY9m3LMIV3vsWJQ02ELvTFwRu8Wkohp5Q0iF56eiZ/Aq2ZumUeCFvQnedV+RI29VBxrz7v/ux+VgVRBBGbNCu4KkcOaZN1xDdNDMWF3TPu4WUg90AjfAD7P69vOJ9DK5vFZfHVafn1r31ydIhee4pxwsQwt4vqP0biGOTaJeGbn+vLo49iq1U21GY/J3cOPkl1eoyWrGS4DN4PxI="
