[tool:pytest]
; `-rf` only prints out failures at the end
; `--dist loadscope` tells`pytest-xdist` to be distribute tests across worker process based on
; 	the granularity of the test, such as module, class, or function.
; `--loadscope-reorder` reorders tests to run the scopes with the most tests first
; This saves us from executing expensive setup and teardown code in multiple workers.
; `--durations-25` prints the slowest tests for each run
addopts = -rf --dist loadscope --loadscope-reorder --durations=25

; Prevent top-level test discovery from discovering tests in certain directories
norecursedirs =
    ; Airflow tests are run separately
    recidiviz/airflow
    ; node_modules can be quite large and won't contain any tests
    node_modules
    ; no need to look in hidden directories 
    .*
    ; or at pycache
    __pycache__
    ; fixture directories can also be large and don't contain tests
    recidiviz/tests/admin_panel/fixtures
    recidiviz/tests/admin_panel/routes/fixtures
    recidiviz/tests/auth/fixtures
    recidiviz/tests/case_triage/pathways/fixtures
    recidiviz/tests/cloud_storage/fixtures
    recidiviz/tests/ingest/direct/direct_ingest_fixtures
    recidiviz/tests/ingest/direct/fixtures_templates
    recidiviz/tests/ingest/direct/ingest_mappings/fixtures
    recidiviz/tests/ingest/direct/raw_data/raw_data_diff_fixtures
    recidiviz/tests/justice_counts/bulk_upload/bulk_upload_fixtures
    recidiviz/tests/metrics/export/fixtures
    recidiviz/tests/tools/datasets/fixtures
    recidiviz/tests/tools/docs/fixtures
    recidiviz/tests/tools/fixtures
    recidiviz/tests/tools/ingest/development/create_ingest_config_skeleton_test_fixtures
    recidiviz/tests/tools/justice_counts/fixtures
    recidiviz/tests/tools/looker/raw_data/fixtures
    recidiviz/tests/tools/looker/state/fixtures
    recidiviz/tests/validation/fixtures
    recidiviz/tests/validation/views/metadata/fixtures
    recidiviz/tests/workflows/etl/fixtures

filterwarnings =
    ; By default, error on warnings, except in the one package where we actually
    ; explicitly emit a warning and test that we do so.
    error:::^(?!recidiviz\.calculator.modeling.population_projection.utils.spark_preprocessing_utils).+

    ; Filter out warnings of any kind from 3rd-party packages
    ignore:::^(?!recidiviz).+

    ; TODO(#18145): Remove this when we have fixed all these warnings and upgraded to
    ;  SQLAlchemy to 2.0.
    ignore::sqlalchemy.exc.RemovedIn20Warning:recidiviz.*

    ; Spark
    ignore::FutureWarning:recidiviz.calculator.modeling.population_projection.*
    ignore::FutureWarning:recidiviz.tests.calculator.modeling.population_projection.*
    ignore::pandas.errors.PerformanceWarning:recidiviz.calculator.modeling.population_projection.full_compartment.*
    ignore::pandas.errors.PerformanceWarning:recidiviz.calculator.modeling.population_projection.shell_compartment.*

    ; Doppler
    ignore::DeprecationWarning:recidiviz.tests.ingest.direct.views.raw_table_query_builder_test.*
    ignore::FutureWarning:recidiviz.tests.validation.checks.sameness_check_test.*

    ; Justice Counts
    ; TODO(#20142): Revisit whether we need all of these exclusions once Phase 0 code has been removed from the codebase
    ignore::FutureWarning:recidiviz.tools.datasets.refresh_county_fips.*
    ignore::FutureWarning:recidiviz.tests.calculator.query.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tools.justice_counts.load_fixtures.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tests.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tests.persistence.database.schema.justice_counts.*


[isort]
profile=black
known_first_party=recidiviz
; Skip running isort on auto-exported scripts within the recidiviz/research/notebooks
; and recidiviz/research/migrated_notebooks directories. Upon commit, we auto-export
; notebook files to .py files and include those in the commit. These auto-exported files
; can fail isort checks, so we skip running isort on .py files in the directories
; containing these scripts.
skip_glob = recidiviz/research/*notebooks/**/nbautoexport-scripts/*.py

[mypy]
; Skip running mypy on the recidiviz/research/migrated_notebooks directory, which
; contains migrated files from a previous repo that may not pass mypy checks until
; modified. Also skip running mypy on .py files in any nbautoexport-scripts subdirectory
; within the notebook directories in recidiviz/research. Upon commit, we auto-export
; notebook files to .py files and include those in the commit. These auto-exported files
; will generally fail mypy checks, so we skip running mypy on .py files in the
; directories containing these scripts.
; Also skip running mypy for recidiviz/airflow; this is run as a separate mypy process
exclude = ^recidiviz/research/migrated_notebooks/.*|^recidiviz/research/.*notebooks/.*/nbautoexport-scripts/.*\.py|^recidiviz/airflow/.*$

plugins = recidiviz/tools/lint/mypy_plugin.py
; Show mypy errors when imports that can't be statically resolved (e.g. because an external library does not ship mypy
; stub files). In general, we should aim to only use libraries with mypy types defined.
;
; If we must use a library that does not have types defined we should (in this order):
; 1) Search for a third-party package with mypy stubs for this library and include that package in the dev-packages
;     section of the Pipfile
; 2) Find a different library to use that does have mypy types defined
; 3) Define your own stub files for portions of the library we use
;     (https://mypy.readthedocs.io/en/stable/stubs.html#stub-files)
; 4) Exempt the library below (discouraged)
;
; Where to find our custom stubs
mypy_path=stubs

; A list of libraries that have been grandfathered to allow types that cannot resolve can be found below.
ignore_missing_imports = False

; Requires that all functions have complete mypy type definitions
disallow_untyped_defs = True

; Configure mypy error messages to show codes in brackets at the end of the message. These can be used to specify which
; error to ignore when using `type: ignore` annotations.
show_error_codes = True

; Treat every namespace (e.g. directory) as a package for the purposes of typechecking, since Python versions >= 3.3
; support packages without __init__.py files. For more info, see:
; https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages and
; https://mypy.readthedocs.io/en/stable/config_file.html#confval-namespace_packages.
namespace_packages = True

; TODO(#4334): Find mypy stub files files for all critical libraries and remove exemptions below.
; ~~~~ START ignore_missing_imports EXEMPTIONS ~~~~~
[mypy-gevent.*]
ignore_missing_imports = True

[mypy-googleapiclient.discovery.*]
ignore_missing_imports = True

[mypy-google.cloud.pubsub_v1]
; TODO(googleapis/python-pubsub#536): Mypy stubs are not included for google.cloud.pubsub
ignore_missing_imports = True

[mypy-google.cloud.storage.*]
; TODO(googleapis/python-storage#393): Mypy stubs are not enabled for google.cloud.storage
ignore_missing_imports = True

[mypy-google.oauth2.*]
ignore_missing_imports = True

[mypy-lxml.*]
ignore_missing_imports = True

[mypy-pandas.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for pandas and numpy.
ignore_missing_imports = True

[mypy-parameterized.*]
; This is test only, and someday hopefully we can ditch unittest and won't need this.
ignore_missing_imports = True

[mypy-scipy.*]
ignore_missing_imports = True

[mypy-sqlalchemy.*]
; Exemption potentially can be removed once we include the sqlalchemy-stubs package for v1.4:
; https://docs.sqlalchemy.org/en/14/orm/extensions/mypy.html
ignore_missing_imports = True

[mypy-sshtunnel.*]
ignore_missing_imports = True

[mypy-pymssql.*]
ignore_missing_imports = True

[mypy-vertexai.preview.prompts]
ignore_missing_imports = True

[mypy-vertexai.batch_prediction]
ignore_missing_imports = True

; ~~~~ END ignore_missing_imports EXEMPTIONS ~~~~~

; Defined for use by autopep8 to autoformat.
; `max_line_length` is duplicated in pylintrc, these should be kept in sync.
[pycodestyle]
max_line_length = 120
aggressive = 1
