[mypy]
; Show mypy errors when imports that can't be statically resolved (e.g. because an external library does not ship mypy
; stub files). In general, we should aim to only use libraries with mypy types defined.
;
; If we must use a library that does not have types defined we should (in this order):
; 1) Search for a third-party package with mypy stubs for this library and include that package in the dev-packages
;     section of the Pipfile
; 2) Find a different library to use that does have mypy types defined
; 3) Define your own stub files for portions of the library we use
;     (https://mypy.readthedocs.io/en/stable/stubs.html#stub-files)
; 4) Exempt the library below (discouraged)
;
; Where to find our custom stubs
mypy_path=stubs

; A list of libraries that have been grandfathered to allow types that cannot resolve can be found below.
ignore_missing_imports = False

; Requires that all functions have complete mypy type definitions
disallow_untyped_defs = True

; Configure mypy error messages to show codes in brackets at the end of the message. These can be used to specify which
; error to ignore when using `type: ignore` annotations.
show_error_codes = True

; Treat every namespace (e.g. directory) as a package for the purposes of typechecking, since Python versions >= 3.3
; support packages without __init__.py files. For more info, see:
; https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages and
; https://mypy.readthedocs.io/en/stable/config_file.html#confval-namespace_packages.
namespace_packages = True

; Ignore generated files
[mypy-*.ingest_info_pb2]
ignore_errors = True

; TODO(#4334): Find mypy stub files files for all critical libraries and remove exemptions below.
; ~~~~ START ignore_missing_imports EXEMPTIONS ~~~~~
[mypy-airflow.*]
ignore_missing_imports = True

[mypy-apache_beam.*]
ignore_missing_imports = True

[mypy-callee.*]
ignore_missing_imports = True

[mypy-deepdiff.*]
ignore_missing_imports = True

[mypy-gcsfs.*]
ignore_missing_imports = True

[mypy-gevent.*]
ignore_missing_imports = True

[mypy-google.api_core.*]
ignore_missing_imports = True

[mypy-googleapiclient.*]
ignore_missing_imports = True

[mypy-google.auth.*]
ignore_missing_imports = True

[mypy-google.cloud.*]
; TODO(#4287): Mypy stubs are included in 2.X.X versions of the google-cloud-* libraries - remove this exemption when we
; upgrade libraries.
ignore_missing_imports = True

[mypy-google.oauth2.*]
ignore_missing_imports = True

[mypy-html5lib.*]
ignore_missing_imports = True

[mypy-iteration_utilities.*]
ignore_missing_imports = True

[mypy-lxml.*]
ignore_missing_imports = True

[mypy-matplotlib.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for matplotlib.
ignore_missing_imports = True

[mypy-numpy.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for pandas and numpy.
ignore_missing_imports = True

[mypy-oauth2client.client.*]
ignore_missing_imports = True

[mypy-opencensus.*]
ignore_missing_imports = True

[mypy-pandas.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for pandas and numpy.
ignore_missing_imports = True

[mypy-pandas_gbq.*]
ignore_missing_imports = True

[mypy-progress.bar.*]
ignore_missing_imports = True

[mypy-psycopg2.*]
ignore_missing_imports = True

[mypy-pydot.*]
ignore_missing_imports = True

[mypy-PyPDF2.*]
ignore_missing_imports = True

[mypy-pytest.*]
ignore_missing_imports = True

[mypy-scipy.*]
ignore_missing_imports = True

[mypy-seaborn.*]
ignore_missing_imports = True

[mypy-sendgrid.*]
ignore_missing_imports = True

[mypy-sklearn.*]
ignore_missing_imports = True

[mypy-sqlalchemy.*]
; Exemption potentially can be removed once we include the sqlalchemy-stubs package from Dropbox:
; https://github.com/dropbox/sqlalchemy-stubs
ignore_missing_imports = True

[mypy-statsmodels.*]
ignore_missing_imports = True

[mypy-tabula.*]
ignore_missing_imports = True

[mypy-us.*]
ignore_missing_imports = True

[mypy-uszipcode.*]
ignore_missing_imports = True

[mypy-urllib3.*]
ignore_missing_imports = True

[mypy-xlrd.*]
ignore_missing_imports = True

[mypy-zope.*]
ignore_missing_imports = True

; ~~~~ END ignore_missing_imports EXEMPTIONS ~~~~~

; TODO(#4304): Remove all directories with disallow_untyped_defs exemptions below.
; ~~~~ START disallow_untyped_defs EXEMPTIONS ~~~~~
[mypy-recidiviz/tests/*]
disallow_untyped_defs = False

[mypy-recidiviz/cloud_functions/*]
disallow_untyped_defs = False

; TODO(#4514): Add typed defs to the population_projection module
[mypy-recidiviz/calculator/modeling/population_projection/*]
disallow_untyped_defs = False

[mypy-recidiviz/calculator/pipeline/incarceration/*]
disallow_untyped_defs = False

[mypy-recidiviz/calculator/pipeline/supervision/*]
disallow_untyped_defs = False

[mypy-recidiviz/calculator/pipeline/program/*]
disallow_untyped_defs = False

[mypy-recidiviz/calculator/pipeline/recidivism/*]
disallow_untyped_defs = False

[mypy-recidiviz/calculator/pipeline/utils/*]
disallow_untyped_defs = False

[mypy-recidiviz/common/constants/state/*]
disallow_untyped_defs = False

[mypy-recidiviz/common/constants/county/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/aggregate/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/controllers/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/regions/us_nd/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/regions/us_pa/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/regions/us_ma_middlesex/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/regions/us_nm_bernalillo/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/direct/regions/us_tx_brazos/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/extractor/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/ingest_info_validator/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/models/*]
disallow_untyped_defs = False

[mypy-recidiviz/ingest/scrape/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/history/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema/aggregate/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema/operations/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema/state/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema/county/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema_entity_converter/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema_entity_converter/state/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/database/schema_entity_converter/county/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/entity/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/entity_matching/state/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/entity_matching/county/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/ingest_info_converter/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/ingest_info_converter/state/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/ingest_info_converter/county/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/ingest_info_converter/utils/*]
disallow_untyped_defs = False

[mypy-recidiviz/tools/*]
disallow_untyped_defs = False

[mypy-recidiviz/tools/justice_counts/.*]
disallow_untyped_defs = True

[mypy-recidiviz/tools/pipenv_is_locked.py]
disallow_untyped_defs = True

[mypy-recidiviz/tools/migrations/.*]
disallow_untyped_defs = True

[mypy-recidiviz/tools/postgres/.*]
disallow_untyped_defs = True

[mypy-recidiviz/utils/*]
disallow_untyped_defs = False

; ~~~~ END disallow_untyped_defs EXEMPTIONS ~~~~~

; Defined for use by autopep8 to autoformat.
; `max_line_length` is duplicated in pylintrc, these should be kept in sync.
[pycodestyle]
max_line_length = 120
aggressive = 1
