[tool:pytest]
; Add flags to print out summary info at end of test run
addopts = -rf

; Prevent top-level test discovery from discovering tests in the separate Airflow
; tests package or within any node_modules directory
norecursedirs = recidiviz/airflow node_modules

filterwarnings =
    ; By default, error on warnings, except in the one package where we actually
    ; explicitly emit a warning and test that we do so.
    error:::^(?!recidiviz\.calculator.modeling.population_projection.utils.spark_preprocessing_utils).+

    ; Filter out warnings of any kind from 3rd-party packages
    ignore:::^(?!recidiviz).+

    ; TODO(#18145): Remove this when we have fixed all these warnings and upgraded to
    ;  SQLAlchemy to 2.0.
    ignore::sqlalchemy.exc.RemovedIn20Warning:recidiviz.*

    ; Spark
    ignore::FutureWarning:recidiviz.calculator.modeling.population_projection.*
    ignore::FutureWarning:recidiviz.tests.calculator.modeling.population_projection.*
    ignore::pandas.errors.PerformanceWarning:recidiviz.calculator.modeling.population_projection.full_compartment.*
    ignore::pandas.errors.PerformanceWarning:recidiviz.calculator.modeling.population_projection.shell_compartment.*

    ; Doppler
    ignore::DeprecationWarning:recidiviz.tests.ingest.direct.views.raw_table_query_builder_test.*
    ignore::FutureWarning:recidiviz.tests.validation.checks.sameness_check_test.*

    ; Polaris
    ; TODO(#20143): Delete this exclusion (and marshmallow package??) when Case Triage code is deleted.
    ignore::marshmallow.warnings.RemovedInMarshmallow4Warning:recidiviz.case_triage.api_schemas.*

    ; Justice Counts
    ; TODO(#20142): Revisit whether we need all of these exclusions once Phase 0 code has been removed from the codebase
    ignore::FutureWarning:recidiviz.tools.datasets.refresh_county_resident_populations.*
    ignore::FutureWarning:recidiviz.tools.datasets.refresh_county_fips.*
    ignore::FutureWarning:recidiviz.tests.calculator.query.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tools.justice_counts.load_fixtures.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tests.justice_counts.*
    ignore::sqlalchemy.exc.SAWarning:recidiviz.tests.persistence.database.schema.justice_counts.*


[isort]
profile=black
known_first_party=recidiviz

[mypy]
plugins = recidiviz/tools/lint/mypy_plugin.py
; Show mypy errors when imports that can't be statically resolved (e.g. because an external library does not ship mypy
; stub files). In general, we should aim to only use libraries with mypy types defined.
;
; If we must use a library that does not have types defined we should (in this order):
; 1) Search for a third-party package with mypy stubs for this library and include that package in the dev-packages
;     section of the Pipfile
; 2) Find a different library to use that does have mypy types defined
; 3) Define your own stub files for portions of the library we use
;     (https://mypy.readthedocs.io/en/stable/stubs.html#stub-files)
; 4) Exempt the library below (discouraged)
;
; Where to find our custom stubs
mypy_path=stubs

; A list of libraries that have been grandfathered to allow types that cannot resolve can be found below.
ignore_missing_imports = False

; Requires that all functions have complete mypy type definitions
disallow_untyped_defs = True

; Configure mypy error messages to show codes in brackets at the end of the message. These can be used to specify which
; error to ignore when using `type: ignore` annotations.
show_error_codes = True

; Treat every namespace (e.g. directory) as a package for the purposes of typechecking, since Python versions >= 3.3
; support packages without __init__.py files. For more info, see:
; https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages and
; https://mypy.readthedocs.io/en/stable/config_file.html#confval-namespace_packages.
namespace_packages = True

; TODO(#4334): Find mypy stub files files for all critical libraries and remove exemptions below.
; ~~~~ START ignore_missing_imports EXEMPTIONS ~~~~~
[mypy-airflow.*]
ignore_missing_imports = True

[mypy-apache_beam.*]
ignore_missing_imports = True

[mypy-gevent.*]
ignore_missing_imports = True

[mypy-googleapiclient.discovery.*]
ignore_missing_imports = True

[mypy-google.cloud.*]
; TODO(#4287): Mypy stubs are included in 2.X.X versions of the google-cloud-* libraries - remove this exemption when we
; upgrade libraries.
ignore_missing_imports = True

[mypy-google.oauth2.*]
ignore_missing_imports = True

[mypy-lxml.*]
ignore_missing_imports = True

[mypy-matplotlib.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for matplotlib.
ignore_missing_imports = True

[mypy-pandas.*]
; Exemption potentially can be removed once we include the data-science-types package
; (https://github.com/predictive-analytics-lab/data-science-types), which provides mypy stubs for pandas and numpy.
ignore_missing_imports = True

[mypy-parameterized.*]
; This is test only, and someday hopefully we can ditch unittest and won't need this.
ignore_missing_imports = True

[mypy-pydot.*]
ignore_missing_imports = True

[mypy-ruamel.*]
; Exemption potentially can be removed once we upgrade to a mypy version that contains
; this (not yet released) PR: https://github.com/python/mypy/pull/10937. Issue for next
; release: https://github.com/python/mypy/issues/11158. We can check again when that
; release issue is closed.
ignore_missing_imports = True

[mypy-scipy.*]
ignore_missing_imports = True

[mypy-sqlalchemy.*]
; Exemption potentially can be removed once we include the sqlalchemy-stubs package for v1.4:
; https://docs.sqlalchemy.org/en/14/orm/extensions/mypy.html
ignore_missing_imports = True

; ~~~~ END ignore_missing_imports EXEMPTIONS ~~~~~

; TODO(#4304): Remove all directories with disallow_untyped_defs exemptions below.
; ~~~~ START disallow_untyped_defs EXEMPTIONS ~~~~~

[mypy-recidiviz/tests/pipelines/utils/*]
disallow_untyped_defs = False
disable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/calculator_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/commitment_from_supervision_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/entity_pre_processing_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/execution_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/pipeline_args_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/violation_response_utils_test.*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/pipelines/utils/state_utils/*]
disallow_untyped_defs = True
enable_error_code = annotation-unchecked

[mypy-recidiviz/tests/persistence/*]
disallow_untyped_defs = False

[mypy-recidiviz/tests/persistence/database/bq_refresh/*]
disallow_untyped_defs = True

[mypy-recidiviz/pipelines/utils/beam_utils/*]
disallow_untyped_defs = False

[mypy-recidiviz/persistence/entity/*]
disallow_untyped_defs = False

; ~~~ END disallow_untyped_defs EXEMPTIONS ~~~~

; Defined for use by autopep8 to autoformat.
; `max_line_length` is duplicated in pylintrc, these should be kept in sync.
[pycodestyle]
max_line_length = 120
aggressive = 1
