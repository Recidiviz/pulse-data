# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2025 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""
Script to validate that generated_version_hash files are identical between Recidiviz/pulse-data
and Recidiviz/looker repositories for the currently checked out pulse-data branch.

Usage:
    python -m recidiviz.tools.deploy.verify_looker_generated_versions_match --github-token <GITHUB_TOKEN>
"""

import argparse
import json
import logging
import sys
from pathlib import Path

from recidiviz.common.constants.encoding import UTF_8
from recidiviz.tools.looker.constants import (
    GENERATED_VERSION_FILE_NAME,
    GENERATED_VERSION_FILE_PATH,
)
from recidiviz.tools.utils.script_helpers import run_command
from recidiviz.utils.github import LOOKER_REPO_NAME


def read_looker_generated_version_hash(branch_name: str, github_token: str) -> str:
    """Read the generated_version_hash file contents from the remote Looker repository branch."""
    auth_header = f"'Authorization: token {github_token}'"

    # Check if the branch exists in the Looker repository
    branch_url = (
        f"https://api.github.com/repos/{LOOKER_REPO_NAME}/branches/{branch_name}"
    )
    result = run_command(
        command=f"curl -s {branch_url} -H {auth_header}", assert_success=True
    )
    if json.loads(result).get("status") == "404":
        raise ValueError(
            f"Branch [{branch_name}] does not exist in the Looker repository."
        )

    url = f"https://raw.githubusercontent.com/{LOOKER_REPO_NAME}/{branch_name}/{GENERATED_VERSION_FILE_NAME}"
    result = run_command(command=f"curl -s {url} -H {auth_header}", assert_success=True)

    return result.strip()


def read_recidiviz_data_generated_version_hash() -> str:
    """Read the generated_version_hash file from the local pulse-data repository."""
    generated_version_file_path = Path(GENERATED_VERSION_FILE_PATH)
    if not generated_version_file_path.exists():
        raise ValueError(
            f"Generated version file not found at {generated_version_file_path}."
        )

    with open(generated_version_file_path, "r", encoding=UTF_8) as f:
        return f.read().strip()


def _parse_args() -> argparse.Namespace:
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Validate Looker generated version hashes match between looker and pulse-data repos."
    )
    parser.add_argument(
        "--github-token",
        type=str,
        help="GitHub token for authentication",
        required=True,
    )
    return parser.parse_args()


def validate_looker_generated_versions_match() -> None:
    """Validate Looker generated version hashes match between looker and pulse-data repos
    for the currently checked out pulse-data branch."""
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
    )

    args = _parse_args()

    # Get the current branch name from the local pulse-data repository
    branch_name = run_command(
        "git rev-parse --abbrev-ref HEAD", assert_success=True
    ).strip()

    recidiviz_data_content = read_recidiviz_data_generated_version_hash()
    if not recidiviz_data_content:
        logging.error(
            "Failed to read generated version hash from local pulse-data repository."
        )
        sys.exit(1)

    looker_generated_version_hash = read_looker_generated_version_hash(
        branch_name, args.github_token
    )
    if not looker_generated_version_hash:
        logging.error(
            "Failed to fetch generated version hash from remote Looker repository."
        )
        sys.exit(1)

    if recidiviz_data_content != looker_generated_version_hash:
        logging.error(
            "Hash mismatch for branch [%s]:\n\npulse-data:\n%s\n\nlooker:\n%s",
            branch_name,
            recidiviz_data_content,
            looker_generated_version_hash,
        )
        logging.error(
            "Please ensure that any outstanding PRs in Recidiviz/pulse-data and Recidiviz/looker modifying autogenerated LookML files are merged. "
            "If there are no outstanding PRs with autogenerated LookML (rare):\n\n"
            "1) Check out the branch [%s] in your local looker repo and local pulse-data repo and pull to refresh\n"
            "2) Run `python -m recidiviz.tools.looker.copy_all_lookml --looker-repo-root [DIR]` to copy the latest generated LookML files to the Looker repo\n"
            "3) Open a PR with these changes and merge it.",
            branch_name,
        )
        sys.exit(1)

    logging.info("Hashes match for branch [%s]", branch_name)


if __name__ == "__main__":
    validate_looker_generated_versions_match()
