# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2025 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""
A script for copying autogenerated LookML files from the pulse-data repo to the Looker repo.
This will delete or overwrite all existing lookml files in any subdirectory that contains generated files.

Run the following to copy files to the specified directory DIR:
python -m recidiviz.tools.looker.copy_all_lookml --looker-repo-root [DIR]

ex:
python -m recidiviz.tools.looker.copy_all_lookml --looker-repo-root /Users/emilyturner/Recidiviz/looker
"""

import argparse
import logging
import os
import shutil
from pathlib import Path

import recidiviz
from recidiviz.tools.looker.constants import GENERATED_DIR_ROOT, LOOKER_REPO_NAME
from recidiviz.tools.looker.script_helpers import remove_lookml_files_from

EXCLUDED_PATHS = [
    "dashboards/normalized_state",
    "dashboards/state",
]


def _parse_arguments() -> argparse.Namespace:
    """Parses the required arguments."""
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--looker-repo-root",
        help="Specifies local path to the Looker repo, where all files will be saved to",
        type=str,
        required=True,
    )

    return parser.parse_args()


def copy_with_overwrite(source_root: str, target_root: str) -> int:
    """
    Copy all lookml files from source_root to target_root.
    For any source directory that contains files, delete all existing lookml files
    in the target directory before copying. Returns the number of files copied.
    """
    copied_files_count = 0
    for root, _dirs, files in os.walk(source_root):
        source_dir = Path(root)

        rel_path = source_dir.relative_to(source_root)
        # TODO(#36190) I had to make manual changes in these files because I implemented the autogeneration
        # for the multiple looker project world we are trying to move to.
        # so for now don't sync these files and remove this once multiple looker projects are set up
        if any(
            str(rel_path).startswith(excluded_path) for excluded_path in EXCLUDED_PATHS
        ):
            continue

        target_dir = target_root / rel_path

        if files:
            target_dir.mkdir(parents=True, exist_ok=True)

            remove_lookml_files_from(directory=str(target_dir))

            # Copy all files from source to target
            for file in files:
                if not file.endswith(".lkml") and not file.endswith(".lookml"):
                    raise ValueError(
                        f"Unexpected file type [{file}] found in source directory [{source_dir}]. "
                        "Only .lkml and .lookml files should be present."
                    )
                source_file = source_dir / file
                target_file = target_dir / file
                shutil.copy2(source_file, target_file)

                copied_files_count += 1

    return copied_files_count


def main(looker_repo_root: str) -> None:
    """
    Main function to execute the copying of LookML files.
    """
    source_path = os.path.join(os.path.dirname(recidiviz.__file__), GENERATED_DIR_ROOT)

    logging.info("Starting file copy from %s -> %s", source_path, looker_repo_root)

    copied_files_count = copy_with_overwrite(
        source_root=source_path, target_root=looker_repo_root
    )
    if copied_files_count == 0:
        raise ValueError(
            f"No LookML files found to copy from [{source_path}] to [{looker_repo_root}]. "
            "Ensure that the source directory contains generated LookML files."
        )

    logging.info("Copied %s files.", copied_files_count)


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )
    args = _parse_arguments()
    if os.path.basename(args.looker_repo_root).lower() != LOOKER_REPO_NAME:
        raise ValueError(
            f"Expected --looker-repo-root to be at the root of [{LOOKER_REPO_NAME}] repo, but instead got [{args.looker_repo_root}]"
        )

    main(looker_repo_root=args.looker_repo_root)
