# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2025 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""
Script to validate that the hash of the lookml generated directories are identical between
Recidiviz/pulse-data and Recidiviz/looker repositories for the currently checked out pulse-data branch.

Usage:
    python -m recidiviz.tools.looker.verify_lookml_autogenerated_file_contents --github-token <GITHUB_TOKEN>
"""

import argparse
import logging
import sys

from recidiviz.tools.looker.constants import GENERATED_SUBDIR_NAME
from recidiviz.tools.looker.looker_git_manager import LookerGitManager
from recidiviz.tools.looker.script_helpers import (
    hash_directory,
    hash_recidiviz_data_generated_lookml_directory,
)
from recidiviz.tools.utils.script_helpers import run_command


def hash_looker_repo_generated_dir(branch_name: str, github_token: str) -> str:
    """Hash the generated LookML directory in the remote Looker repository."""
    looker_git_manager = LookerGitManager(
        looker_branch_name=branch_name, github_token=github_token
    )
    looker_git_manager.clone_and_checkout_branch()
    return hash_directory(
        path=looker_git_manager.looker_repo_root / GENERATED_SUBDIR_NAME
    )


def _parse_args() -> argparse.Namespace:
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Validate LookML autogenerated file contents match between looker and pulse-data repos."
    )
    parser.add_argument(
        "--github-token",
        type=str,
        help="GitHub token for authentication",
        required=True,
    )
    return parser.parse_args()


def verify_lookml_autogenerated_file_contents() -> None:
    """Validate hash of generated LookML directory matches between Recidiviz/pulse-data and Recidiviz/looker
    for the currently checked out pulse-data branch."""
    logging.basicConfig(
        level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
    )

    args = _parse_args()

    # Get the current branch name from the local pulse-data repository
    branch_name = run_command(
        "git rev-parse --abbrev-ref HEAD", assert_success=True
    ).strip()

    recidiviz_data_generated_lookml_hash = (
        hash_recidiviz_data_generated_lookml_directory()
    )
    looker_generated_lookml_hash = hash_looker_repo_generated_dir(
        branch_name, args.github_token
    )

    if recidiviz_data_generated_lookml_hash != looker_generated_lookml_hash:
        logging.error(
            "Hash mismatch for branch [%s]:\n\npulse-data:\n%s\n\nlooker:\n%s",
            branch_name,
            recidiviz_data_generated_lookml_hash,
            looker_generated_lookml_hash,
        )
        logging.error(
            "Please ensure that any outstanding PRs in Recidiviz/pulse-data and Recidiviz/looker modifying autogenerated LookML files are merged. "
            "If there are no outstanding PRs with autogenerated LookML (rare):\n\n"
            "1) Check out the branch [%s] in your local looker repo and local pulse-data repo and pull to refresh\n"
            "2) Run `python -m recidiviz.tools.looker.copy_all_lookml --looker-repo-root [DIR]` to copy the latest generated LookML files to the Looker repo\n"
            "3) Open a PR with these changes and merge it.",
            branch_name,
        )
        sys.exit(1)

    logging.info("Hashes match for branch [%s]", branch_name)


if __name__ == "__main__":
    verify_lookml_autogenerated_file_contents()
