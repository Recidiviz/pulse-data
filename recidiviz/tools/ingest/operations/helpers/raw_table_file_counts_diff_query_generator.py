# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2021 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""Generates a query to check that for each update_datetime, there exists the same
number of rows and the same number of distinct file_ids, and returns any update_datetimes
in which there is a mismatch"""

from typing import Any, Dict, List, Optional

import attr

from recidiviz.tools.ingest.operations.helpers.raw_table_diff_query_generator import (
    RawTableDiffQueryGenerator,
    RawTableDiffQueryResult,
    RawTableDiffQueryResultRow,
)
from recidiviz.utils.string import StrictStringFormatter

QUERY_TEMPLATE = """
WITH src AS (
    SELECT
      {datetime_column} AS update_datetime,
      COUNT(DISTINCT file_id) AS src_file_id_count,
      COUNT(*) AS src_row_count
    FROM
      `{src_project_id}.{src_raw_data_dataset_id}.{raw_data_table_id}`
    {optional_datetime_filter}
    GROUP BY
      update_datetime
),
cmp AS (
    SELECT
      {datetime_column} AS update_datetime,
      COUNT(DISTINCT file_id) AS cmp_file_id_count,
      COUNT(*) AS cmp_row_count
    FROM
      `{cmp_project_id}.{cmp_raw_data_dataset_id}.{raw_data_table_id}`
    {optional_datetime_filter}
    GROUP BY
      update_datetime
)

SELECT
  COALESCE(src.update_datetime, cmp.update_datetime) AS update_datetime,
  src.src_file_id_count,
  cmp.cmp_file_id_count,
  src.src_row_count,
  cmp.cmp_row_count
FROM
  src
FULL OUTER JOIN
  cmp
ON
  src.update_datetime = cmp.update_datetime
WHERE
  src.src_file_id_count != cmp.cmp_file_id_count OR
  src.src_file_id_count IS NULL OR
  cmp.cmp_file_id_count IS NULL OR
  src.src_row_count != cmp.cmp_row_count OR
  src.src_row_count IS NULL OR
  cmp.cmp_row_count IS NULL
ORDER BY
  update_datetime
"""


@attr.define
class RawTableDistinctFileCountsQueryResultRow(RawTableDiffQueryResultRow):
    """Row returned by the query generated by RawTableFileCountsDiffQueryGenerator

    update_datetime: The datetime of the update
    src_file_id_count: The number of distinct file_ids in the source table for the update_datetime
    cmp_file_id_count: The number of distinct file_ids in the comparison table for the update_datetime
    src_row_count: The number of rows in the source table for the update_datetime
    cmp_row_count: The number of rows in the comparison table for the update_datetime
    """

    src_file_id_count: int
    cmp_file_id_count: int
    src_row_count: int
    cmp_row_count: int

    def __str__(self) -> str:
        return (
            f"update_datetime: {self.update_datetime.isoformat()}"
            f"\n\tsrc_file_id_count: [{self.src_file_id_count}] cmp_file_id_count: [{self.cmp_file_id_count}]"
            f"\n\tsrc_row_count: [{self.src_row_count}] cmp_row_count: [{self.cmp_row_count}]"
        )


@attr.define
class RawTableDistinctFileCountsQueryResult(RawTableDiffQueryResult):
    """Results returned by the query generated by RawTableFileCountsDiffQueryGenerator"""

    def build_result_rows_str(self, limit: Optional[int] = None) -> str:
        limit = limit or max(
            len(self.rows_missing_from_cmp),
            len(self.rows_missing_from_src),
            len(self.rows_with_differences),
        )
        s = ""
        if self.rows_missing_from_cmp:
            s += "\nThe following source table update_datetimes have no entries in the comparison table:\n\t"
            s += "\n\t".join(
                row.update_datetime.isoformat()
                for row in self.rows_missing_from_cmp[:limit]
            )
        if self.rows_missing_from_src:
            s += "\nThe following comparison table update_datetimes have no entries in the source table:\n\t"
            s += "\n\t".join(
                row.update_datetime.isoformat()
                for row in self.rows_missing_from_src[:limit]
            )
        if self.rows_with_differences:
            s += "\nThe following update_datetimes have differing file_id counts or row counts:\n"
            s += "\n".join(str(row) for row in self.rows_with_differences[:limit])
        return s


@attr.define
class RawTableFileCountsDiffQueryGenerator(RawTableDiffQueryGenerator):
    """Generates a query to check that for each update_datetime, there exists the same
    number of rows and the same number of distinct file_ids, and returns any update_datetimes
    in which there is a mismatch"""

    def generate_query(
        self,
        file_tag: str,
    ) -> str:
        return StrictStringFormatter().format(
            QUERY_TEMPLATE,
            src_project_id=self.src_project_id,
            src_raw_data_dataset_id=self.src_dataset_id,
            cmp_project_id=self.cmp_project_id,
            cmp_raw_data_dataset_id=self.cmp_dataset_id,
            raw_data_table_id=file_tag,
            datetime_column=self.truncate_update_datetime_col_name,
            optional_datetime_filter=self.optional_datetime_filter or "",
        )

    @staticmethod
    def parse_query_result(
        query_result: List[Dict[str, Any]]
    ) -> RawTableDiffQueryResult:
        """Parse the raw query result into a RawTableDistinctFileCountsQueryResult"""

        missing_cmp = []
        missing_src = []
        differing_counts = []

        for row in query_result:
            processed_row = RawTableDistinctFileCountsQueryResultRow(
                update_datetime=row["update_datetime"],
                src_file_id_count=row["src_file_id_count"] or 0,
                cmp_file_id_count=row["cmp_file_id_count"] or 0,
                src_row_count=row["src_row_count"] or 0,
                cmp_row_count=row["cmp_row_count"] or 0,
            )

            if (
                processed_row.cmp_file_id_count == 0
                and processed_row.cmp_row_count == 0
            ):
                missing_cmp.append(processed_row)
            elif (
                processed_row.src_file_id_count == 0
                and processed_row.src_row_count == 0
            ):
                missing_src.append(processed_row)
            else:
                differing_counts.append(processed_row)

        return RawTableDistinctFileCountsQueryResult(
            rows_missing_from_cmp=missing_cmp,
            rows_missing_from_src=missing_src,
            rows_with_differences=differing_counts,
        )
