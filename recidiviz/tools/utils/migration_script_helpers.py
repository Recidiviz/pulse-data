# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2021 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""Helper functions for various scripts that create migrations."""
import os
from typing import Set

import alembic.command
import alembic.config

from recidiviz.persistence.database.sqlalchemy_database_key import SQLAlchemyDatabaseKey

_HEADER_SECTION_FINAL_LINE_START = "depends_on"


def path_to_versions_directory(key: SQLAlchemyDatabaseKey) -> str:
    return os.path.join(key.migrations_location, "versions")


def get_migration_header_section(migration_filepath: str) -> str:
    """Returns string of autogenerated header section of alembic migration
    containing version hash information
    """
    header_section_lines = []

    with open(migration_filepath, "r", encoding="utf-8") as migration_file:
        for line in migration_file.readlines():
            header_section_lines.append(line)
            if line.startswith(_HEADER_SECTION_FINAL_LINE_START):
                break

    return "".join(header_section_lines)


def _get_all_filenames_in_versions_directory(key: SQLAlchemyDatabaseKey) -> Set[str]:
    """Returns set of all filenames currently in versions directory"""
    versions_directory = path_to_versions_directory(key)

    return {
        item
        for item in os.listdir(versions_directory)
        if os.path.isfile(os.path.join(versions_directory, item))
    }


def create_new_empty_migration_and_return_filename(
    key: SQLAlchemyDatabaseKey, migration_name: str
) -> str:
    """Calls alembic script to generate new empty migration with
    |migration_name| and returns its filename"""
    initial_filenames = _get_all_filenames_in_versions_directory(key)

    config = alembic.config.Config(key.alembic_file)
    alembic.command.revision(config, message=migration_name)

    new_filenames = _get_all_filenames_in_versions_directory(key)

    # Versions directory should now have 1 new file
    return new_filenames.difference(initial_filenames).pop()
