# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2021 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""Helper functions for various scripts that create migrations."""
import os
from typing import Set

from recidiviz.persistence.database.schema_utils import SchemaType

_ALEMBIC_REVISION_COMMAND_TEMPLATE = (
    "alembic -c {config_path} revision -m {migration_name}"
)

_HEADER_SECTION_FINAL_LINE_START = "depends_on"

PATH_TO_MIGRATIONS_DIRECTORY = "recidiviz/persistence/database/migrations"


def path_to_versions_directory(schema: SchemaType) -> str:
    return os.path.join(PATH_TO_MIGRATIONS_DIRECTORY, schema.value.lower(), "versions")


def _path_to_config_file(schema: SchemaType) -> str:
    return os.path.join(
        PATH_TO_MIGRATIONS_DIRECTORY, f"{schema.value.lower()}_alembic.ini"
    )


def get_migration_header_section(migration_filepath: str) -> str:
    """Returns string of autogenerated header section of alembic migration
    containing version hash information
    """
    header_section_lines = []

    with open(migration_filepath, "r") as migration_file:
        for line in migration_file.readlines():
            header_section_lines.append(line)
            if line.startswith(_HEADER_SECTION_FINAL_LINE_START):
                break

    return "".join(header_section_lines)


def _get_all_filenames_in_versions_directory(schema: SchemaType) -> Set[str]:
    """Returns set of all filenames currently in versions directory"""
    versions_directory = path_to_versions_directory(schema)

    return {
        item
        for item in os.listdir(versions_directory)
        if os.path.isfile(os.path.join(versions_directory, item))
    }


def create_new_empty_migration_and_return_filename(
    schema: SchemaType, migration_name: str
) -> str:
    """Calls alembic script to generate new empty migration with
    |migration_name| and returns its filename"""
    initial_filenames = _get_all_filenames_in_versions_directory(schema)

    command = _ALEMBIC_REVISION_COMMAND_TEMPLATE.format(
        config_path=_path_to_config_file(schema), migration_name=migration_name
    )
    exit_code = os.system(command)
    if exit_code != 0:
        raise RuntimeError(
            "Call to generate alembic revision failed, any "
            "error messages printed in preceding output"
        )

    new_filenames = _get_all_filenames_in_versions_directory(schema)

    # Versions directory should now have 1 new file
    return new_filenames.difference(initial_filenames).pop()
