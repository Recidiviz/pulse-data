# pylint: skip-file
"""add/backfill roles column

Revision ID: fb34705fd055
Revises: ffd266482177
Create Date: 2024-04-07 08:10:20.217956

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from recidiviz.utils.string import StrictStringFormatter

# revision identifiers, used by Alembic.
revision = "fb34705fd055"
down_revision = "ffd266482177"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # add roles column as nullable in roster table until existing values are backfilled
    op.add_column(
        "roster",
        sa.Column("roles", postgresql.ARRAY(sa.String(length=255)), nullable=True),
    )
    op.add_column(
        "user_override",
        sa.Column("roles", postgresql.ARRAY(sa.String(length=255)), nullable=True),
    )
    backfill_roles_query = """UPDATE {table} SET roles=ARRAY[role] 
        WHERE role IS NOT NULL"""
    op.execute(StrictStringFormatter().format(backfill_roles_query, table="roster"))
    op.execute(
        StrictStringFormatter().format(backfill_roles_query, table="user_override")
    )
    # set roles column to not nullable in roster table
    op.alter_column("roster", "roles", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("user_override", "roles")
    op.drop_column("roster", "roles")
    # ### end Alembic commands ###
