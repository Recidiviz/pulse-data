# pylint: skip-file
"""delete legacy case triage databases

Revision ID: ffd266482177
Revises: a061a9b08330
Create Date: 2024-03-20 16:31:04.559367

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ffd266482177"
down_revision = "a061a9b08330"
branch_labels = None
depends_on = None

etl_index_names = [
    "etl_opportunities_opportunity_type",
    "etl_opportunities_person_external_id",
    "etl_opportunities_state_code",
    "etl_opportunities_supervising_officer_external_id",
    "etl_clients_person_external_id",
    "etl_clients_state_code",
    "etl_clients_supervising_officer_external_id",
    "etl_client_events_person_external_id",
    "etl_client_events_state_code",
    "etl_officers_external_id",
    "etl_officers_state_code",
]


def upgrade() -> None:
    for index_name in etl_index_names:
        op.execute(
            f"ALTER INDEX IF EXISTS ix_tmp__{index_name} RENAME TO ix_{index_name};"
        )

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_etl_opportunities_opportunity_type", table_name="etl_opportunities"
    )
    op.drop_index(
        "ix_etl_opportunities_person_external_id", table_name="etl_opportunities"
    )
    op.drop_index("ix_etl_opportunities_state_code", table_name="etl_opportunities")
    op.drop_index(
        "ix_etl_opportunities_supervising_officer_external_id",
        table_name="etl_opportunities",
    )
    op.drop_table("etl_opportunities")
    op.drop_index("ix_etl_clients_person_external_id", table_name="etl_clients")
    op.drop_index("ix_etl_clients_state_code", table_name="etl_clients")
    op.drop_index(
        "ix_etl_clients_supervising_officer_external_id", table_name="etl_clients"
    )
    op.drop_table("etl_clients")
    op.drop_index(
        "ix_dashboard_user_restrictions_restricted_user_email",
        table_name="dashboard_user_restrictions",
    )
    op.drop_index(
        "ix_dashboard_user_restrictions_state_code",
        table_name="dashboard_user_restrictions",
    )
    op.drop_table("dashboard_user_restrictions")
    op.drop_index("ix_client_info_person_external_id", table_name="client_info")
    op.drop_index("ix_client_info_state_code", table_name="client_info")
    op.drop_table("client_info")
    op.drop_index(
        "ix_etl_client_events_person_external_id", table_name="etl_client_events"
    )
    op.drop_index("ix_etl_client_events_state_code", table_name="etl_client_events")
    op.drop_table("etl_client_events")
    op.drop_index(
        "ix_case_update_actions_action_type", table_name="case_update_actions"
    )
    op.drop_index(
        "ix_case_update_actions_officer_external_id", table_name="case_update_actions"
    )
    op.drop_index(
        "ix_case_update_actions_person_external_id", table_name="case_update_actions"
    )
    op.drop_index("ix_case_update_actions_state_code", table_name="case_update_actions")
    op.drop_table("case_update_actions")
    op.drop_index("ix_etl_officers_external_id", table_name="etl_officers")
    op.drop_index("ix_etl_officers_state_code", table_name="etl_officers")
    op.drop_table("etl_officers")
    op.drop_index(
        "ix_opportunity_deferrals_opportunity_type", table_name="opportunity_deferrals"
    )
    op.drop_index(
        "ix_opportunity_deferrals_person_external_id",
        table_name="opportunity_deferrals",
    )
    op.drop_index(
        "ix_opportunity_deferrals_state_code", table_name="opportunity_deferrals"
    )
    op.drop_index(
        "ix_opportunity_deferrals_supervising_officer_external_id",
        table_name="opportunity_deferrals",
    )
    op.drop_table("opportunity_deferrals")
    op.drop_index(
        "ix_officer_metadata_officer_external_id", table_name="officer_metadata"
    )
    op.drop_index("ix_officer_metadata_state_code", table_name="officer_metadata")
    op.drop_table("officer_metadata")
    op.drop_index("ix_officer_notes_officer_external_id", table_name="officer_notes")
    op.drop_index("ix_officer_notes_person_external_id", table_name="officer_notes")
    op.drop_index("ix_officer_notes_state_code", table_name="officer_notes")
    op.drop_table("officer_notes")
    # ### end Alembic commands ###
    # https://github.com/sqlalchemy/alembic/issues/89
    sa.Enum(name="client_into_preferred_contact_method").drop(
        op.get_bind(), checkfirst=False
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "officer_notes",
        sa.Column("note_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("text", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "created_datetime",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_datetime",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "resolved_datetime",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("note_id", name="officer_notes_pkey"),
    )
    op.create_index(
        "ix_officer_notes_state_code", "officer_notes", ["state_code"], unique=False
    )
    op.create_index(
        "ix_officer_notes_person_external_id",
        "officer_notes",
        ["person_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_officer_notes_officer_external_id",
        "officer_notes",
        ["officer_external_id"],
        unique=False,
    )
    op.create_table(
        "officer_metadata",
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "has_seen_onboarding", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint(
            "state_code", "officer_external_id", name="officer_metadata_pkey"
        ),
    )
    op.create_index(
        "ix_officer_metadata_state_code",
        "officer_metadata",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_officer_metadata_officer_external_id",
        "officer_metadata",
        ["officer_external_id"],
        unique=False,
    )
    op.create_table(
        "opportunity_deferrals",
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "supervising_officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "opportunity_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "deferred_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "deferred_until",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "reminder_was_requested", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "opportunity_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "deferral_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "deferral_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("deferral_id", name="opportunity_deferrals_pkey"),
        sa.UniqueConstraint(
            "state_code",
            "person_external_id",
            "supervising_officer_external_id",
            "opportunity_type",
            name="unique_person_officer_opportunity_triple",
        ),
    )
    op.create_index(
        "ix_opportunity_deferrals_supervising_officer_external_id",
        "opportunity_deferrals",
        ["supervising_officer_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_opportunity_deferrals_state_code",
        "opportunity_deferrals",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_opportunity_deferrals_person_external_id",
        "opportunity_deferrals",
        ["person_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_opportunity_deferrals_opportunity_type",
        "opportunity_deferrals",
        ["opportunity_type"],
        unique=False,
    )
    op.create_table(
        "etl_officers",
        sa.Column(
            "external_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "email_address", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "hashed_email_address", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "full_name",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("external_id", "state_code", name="etl_officers_pkey"),
    )
    op.create_index(
        "ix_etl_officers_state_code", "etl_officers", ["state_code"], unique=False
    )
    op.create_index(
        "ix_etl_officers_external_id", "etl_officers", ["external_id"], unique=False
    )
    op.create_table(
        "case_update_actions",
        sa.Column(
            "update_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "action_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "action_ts",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_version",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("comment", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("update_id", name="case_update_actions_pkey"),
        sa.UniqueConstraint(
            "state_code",
            "person_external_id",
            "officer_external_id",
            "action_type",
            name="unique_person_officer_action_triple",
        ),
    )
    op.create_index(
        "ix_case_update_actions_state_code",
        "case_update_actions",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_case_update_actions_person_external_id",
        "case_update_actions",
        ["person_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_case_update_actions_officer_external_id",
        "case_update_actions",
        ["officer_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_case_update_actions_action_type",
        "case_update_actions",
        ["action_type"],
        unique=False,
    )
    op.create_table(
        "etl_client_events",
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "event_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "event_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("event_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column(
            "event_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("event_id", name="etl_client_events_pkey"),
    )
    op.create_index(
        "ix_etl_client_events_state_code",
        "etl_client_events",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_etl_client_events_person_external_id",
        "etl_client_events",
        ["person_external_id"],
        unique=False,
    )
    op.create_table(
        "client_info",
        sa.Column(
            "client_info_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("preferred_name", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "preferred_contact_method",
            postgresql.ENUM(
                "EMAIL", "CALL", "TEXT", name="client_into_preferred_contact_method"
            ),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "receiving_ssi_or_disability_income",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("client_info_id", name="client_info_pkey"),
        sa.UniqueConstraint("state_code", "person_external_id", name="unique_person"),
    )
    op.create_index(
        "ix_client_info_state_code", "client_info", ["state_code"], unique=False
    )
    op.create_index(
        "ix_client_info_person_external_id",
        "client_info",
        ["person_external_id"],
        unique=False,
    )
    op.create_table(
        "dashboard_user_restrictions",
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="Dashboard user's state code",
        ),
        sa.Column(
            "restricted_user_email",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="Dashboard user's email address",
        ),
        sa.Column(
            "allowed_supervision_location_ids",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="String array of supervision location IDs the user can access",
        ),
        sa.Column(
            "allowed_supervision_location_level",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The supervision location level, i.e. level_1_supervision_location",
        ),
        sa.Column(
            "internal_role",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="Dashboard user's access level role",
        ),
        sa.Column(
            "can_access_leadership_dashboard",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="User has permission to access the Leadership Dashboard",
        ),
        sa.Column(
            "can_access_case_triage",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="User has permission to access Case Triage",
        ),
        sa.Column(
            "routes",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
            comment="Page level restrictions for the user",
        ),
        sa.Column(
            "should_see_beta_charts",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="User has permission to view Leadership Dashboard beta charts",
        ),
        sa.Column(
            "user_hash",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Pseudonymous identifier for logging user activity without exposing PII",
        ),
        sa.PrimaryKeyConstraint(
            "restricted_user_email", name="dashboard_user_restrictions_pkey"
        ),
        sa.UniqueConstraint(
            "state_code",
            "restricted_user_email",
            name="dashboard_user_restrictions_state_code_restricted_user_emai_key",
        ),
    )
    op.create_index(
        "ix_dashboard_user_restrictions_state_code",
        "dashboard_user_restrictions",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_dashboard_user_restrictions_restricted_user_email",
        "dashboard_user_restrictions",
        ["restricted_user_email"],
        unique=False,
    )
    op.create_table(
        "etl_clients",
        sa.Column(
            "supervising_officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "full_name", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("current_address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("birthdate", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "supervision_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "case_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "supervision_level",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "employer", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "most_recent_assessment_date", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "most_recent_face_to_face_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("gender", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "supervision_start_date", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column("assessment_score", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("projected_end_date", sa.DATE(), autoincrement=False, nullable=True),
        sa.Column(
            "last_known_date_of_employment",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "most_recent_home_visit_date", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "days_with_current_po", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("email_address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "days_on_current_supervision_level",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("phone_number", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "next_recommended_assessment_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "employment_start_date", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "most_recent_violation_date", sa.DATE(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "next_recommended_face_to_face_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "next_recommended_home_visit_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "most_recent_treatment_collateral_contact_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "next_recommended_treatment_collateral_contact_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
        ),
        sa.UniqueConstraint(
            "state_code", "person_external_id", name="uniq_etl_clients"
        ),
    )
    op.create_index(
        "ix_etl_clients_supervising_officer_external_id",
        "etl_clients",
        ["supervising_officer_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_etl_clients_state_code", "etl_clients", ["state_code"], unique=False
    )
    op.create_index(
        "ix_etl_clients_person_external_id",
        "etl_clients",
        ["person_external_id"],
        unique=False,
    )
    op.create_table(
        "etl_opportunities",
        sa.Column(
            "state_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "supervising_officer_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "person_external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "opportunity_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "opportunity_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "exported_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint(
            "state_code",
            "supervising_officer_external_id",
            "person_external_id",
            "opportunity_type",
            name="etl_opportunities_pkey",
        ),
    )
    op.create_index(
        "ix_etl_opportunities_supervising_officer_external_id",
        "etl_opportunities",
        ["supervising_officer_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_etl_opportunities_state_code",
        "etl_opportunities",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_etl_opportunities_person_external_id",
        "etl_opportunities",
        ["person_external_id"],
        unique=False,
    )
    op.create_index(
        "ix_etl_opportunities_opportunity_type",
        "etl_opportunities",
        ["opportunity_type"],
        unique=False,
    )
    # ### end Alembic commands ###
