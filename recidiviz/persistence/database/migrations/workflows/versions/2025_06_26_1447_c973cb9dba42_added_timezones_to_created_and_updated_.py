# pylint: skip-file
"""added_timezones_to_created_and_updated_at

Revision ID: c973cb9dba42
Revises: 39aac8332129
Create Date: 2025-06-26 14:47:59.118830

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c973cb9dba42"
down_revision = "39aac8332129"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Update existing data by converting the times from EDT (prev. saved timezone) to UTC
    op.execute(
        "UPDATE opportunity SET updated_at = updated_at AT TIME ZONE 'America/New_York' AT TIME ZONE 'UTC' WHERE updated_at IS NOT NULL"
    )
    op.execute(
        "UPDATE opportunity_configuration SET created_at = created_at AT TIME ZONE 'America/New_York' AT TIME ZONE 'UTC' WHERE created_at IS NOT NULL"
    )
    # Update columns to include timezone information (now all will be UTC)
    op.alter_column(
        "opportunity",
        "updated_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "opportunity_configuration",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "opportunity_configuration",
        "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "opportunity",
        "updated_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
