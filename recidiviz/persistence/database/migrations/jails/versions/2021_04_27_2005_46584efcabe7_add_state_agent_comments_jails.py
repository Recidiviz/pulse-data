# pylint: skip-file
"""add_state_agent_comments_jails

Revision ID: 46584efcabe7
Revises: 3d1482357cb6
Create Date: 2021-04-27 20:05:10.519008

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "46584efcabe7"
down_revision = "3d1482357cb6"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "arrest_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "arrest_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "bond_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "bond_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "booking_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "booking_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "charge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "charge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "hold_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "hold_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "person_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "person_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "sentence_relationship_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "sentence_relationship_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "sentence_relationship_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "sentence_relationship_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "person_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "person_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "hold_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "hold_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "charge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "charge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "booking_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "booking_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "bond_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "bond_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "arrest_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "arrest_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
