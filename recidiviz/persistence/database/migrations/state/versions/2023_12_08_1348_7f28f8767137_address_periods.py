# pylint: skip-file
"""address_periods

Revision ID: 7f28f8767137
Revises: c1b387143317
Create Date: 2023-12-08 13:48:00.139943

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7f28f8767137"
down_revision = "c1b387143317"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_person_address_period",
        sa.Column(
            "person_address_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person address period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "address_line_1",
            sa.String(length=255),
            nullable=True,
            comment="The first line of the address, used to display street number and name.",
        ),
        sa.Column(
            "address_line_2",
            sa.String(length=255),
            nullable=True,
            comment="The second line of the address, should denote apt. number or PO box number",
        ),
        sa.Column(
            "address_city",
            sa.String(length=255),
            nullable=True,
            comment="The city name of the address",
        ),
        sa.Column(
            "address_zip",
            sa.String(length=255),
            nullable=True,
            comment="The 5 digit zipcode of the address",
        ),
        sa.Column(
            "address_county",
            sa.String(length=255),
            nullable=True,
            comment="The county name of the address",
        ),
        sa.Column(
            "address_start_date",
            sa.Date(),
            nullable=True,
            comment="Date on which a person’s address changed or was registered for the first time",
        ),
        sa.Column(
            "address_end_date",
            sa.Date(),
            nullable=True,
            comment="Date on which a person’s address ended",
        ),
        sa.Column(
            "address_is_verified",
            sa.Boolean(),
            nullable=True,
            comment="Boolean to determine whether the person’s address has been verified",
        ),
        sa.Column(
            "address_type",
            sa.Enum(
                "PHYSICAL_RESIDENCE",
                "PHYSICAL_OTHER",
                "MAILING_ONLY",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_person_address_type",
            ),
            nullable=False,
            comment="Indicates the address type",
        ),
        sa.Column(
            "address_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="Text used to infer address_type",
        ),
        sa.Column(
            "address_metadata",
            sa.String(length=255),
            nullable=True,
            comment="Arbitrary JSON-formatted metadata relevant to a fine understanding of a particular address",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_address_period_id"),
        comment="The StatePersonAddressPeriod object represents information about a person’s address during a particular period of time. This object can be used to identify a person’s physical residence over time or their contact information for receiving mail.",
    )
    op.create_index(
        op.f("ix_state_person_address_period_person_id"),
        "state_person_address_period",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_address_period_state_code"),
        "state_person_address_period",
        ["state_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_state_person_address_period_state_code"),
        table_name="state_person_address_period",
    )
    op.drop_index(
        op.f("ix_state_person_address_period_person_id"),
        table_name="state_person_address_period",
    )
    op.drop_table("state_person_address_period")

    state_person_address_type = postgresql.ENUM(
        "PHYSICAL_RESIDENCE",
        "PHYSICAL_OTHER",
        "MAILING_ONLY",
        "INTERNAL_UNKNOWN",
        "EXTERNAL_UNKNOWN",
        name="state_person_address_type",
    )

    state_person_address_type.drop(op.get_bind())
    # ### end Alembic commands ###
