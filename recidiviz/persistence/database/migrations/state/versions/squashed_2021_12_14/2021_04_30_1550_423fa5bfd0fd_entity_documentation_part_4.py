# pylint: skip-file
"""entity_documentation_part_4

Revision ID: 423fa5bfd0fd
Revises: 82cca8fb7107
Create Date: 2021-04-30 15:50:20.152337

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "423fa5bfd0fd"
down_revision = "82cca8fb7107"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_agent",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person",
        "birthdate",
        existing_type=sa.DATE(),
        comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "birthdate_inferred_from_age",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the person's birthdate was inferred from their age.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "current_address",
        existing_type=sa.TEXT(),
        comment="The current address of the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "gender",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "FEMALE",
            "MALE",
            "OTHER",
            "TRANS",
            "TRANS_FEMALE",
            "TRANS_MALE",
            name="gender",
        ),
        comment="A person’s gender, as reported by the state.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "gender_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the person's state-reported gender.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_person_person_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_person",
        "residency_status",
        existing_type=postgresql.ENUM(
            "HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"
        ),
        comment="A person's reported residency status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person",
        "supervising_officer_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_person",
        "Each StatePerson holds details about the individual, as well as lists of several child entities. Some of these child entities are extensions of individual details, e.g. Race is its own entity as opposed to a single field, to allow for the inclusion/tracking of multiple such entities or sources of such information.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_alias",
        "alias_type",
        existing_type=postgresql.ENUM(
            "AFFILIATION_NAME",
            "ALIAS",
            "GIVEN_NAME",
            "MAIDEN_NAME",
            "NICKNAME",
            name="state_person_alias_type",
        ),
        comment="The type of the name alias.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias",
        "alias_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value for the alias type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="A person’s name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias",
        "person_alias_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_alias",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_alias",
        "Each StatePersonAlias holds the naming information for an alias for a particular person. Because a given name is an alias of sorts, we copy over the name fields provided on the StatePerson object into a child StatePersonAlias object. An alias is structured similarly to a name, with various different fields, and not a raw string -- systems storing aliases are raw strings should provide those in the full_name field below.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_alias_history",
        "alias_type",
        existing_type=postgresql.ENUM(
            "AFFILIATION_NAME",
            "ALIAS",
            "GIVEN_NAME",
            "MAIDEN_NAME",
            "NICKNAME",
            name="state_person_alias_type",
        ),
        comment="The type of the name alias.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "alias_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value for the alias type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="A person’s name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_alias_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_alias_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person alias, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person alias information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_alias_history",
        "Represents all updates that have made to a(n) StatePersonAlias object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_ethnicity",
        "ethnicity",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"
        ),
        comment="A person’s reported ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity",
        "ethnicity_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity",
        "person_ethnicity_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_ethnicity",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_ethnicity",
        "Each StatePersonEthnicity holds a single reported ethnicity for a single person. A StatePerson may have multiple StatePersonEthnicity objects, because they may be multi-ethnic, or because different data sources may report different ethnicities.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "ethnicity",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"
        ),
        comment="A person’s reported ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "ethnicity_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_ethnicity_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_ethnicity_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person ethnicity information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_ethnicity_history",
        "Represents all updates that have made to a(n) StatePersonEthnicity object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_external_id",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "id_type",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_external_id",
        "Each StatePersonExternalId holds a single external id provided by the source data system being ingested. An external id is a unique identifier for an individual, unique within the scope of the source data system. We include information denoting the source of the id to make this into a globally unique identifier.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_external_id_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "id_type",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_external_id_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_external_id_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person external id information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_external_id_history",
        "Represents all updates that have made to a(n) StatePersonExternalId object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_history",
        "birthdate",
        existing_type=sa.DATE(),
        comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "birthdate_inferred_from_age",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the person's birthdate was inferred from their age.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "current_address",
        existing_type=sa.TEXT(),
        comment="The current address of the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "gender",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "FEMALE",
            "MALE",
            "OTHER",
            "TRANS",
            "TRANS_FEMALE",
            "TRANS_MALE",
            name="gender",
        ),
        comment="A person’s gender, as reported by the state.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "gender_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the person's state-reported gender.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "person_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "residency_status",
        existing_type=postgresql.ENUM(
            "HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"
        ),
        comment="A person's reported residency status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "supervising_officer_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_person_history",
        "Represents all updates that have made to a(n) StatePerson object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_race",
        "person_race_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_person_race_person_race_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_person_race",
        "race",
        existing_type=postgresql.ENUM(
            "AMERICAN_INDIAN_ALASKAN_NATIVE",
            "ASIAN",
            "BLACK",
            "EXTERNAL_UNKNOWN",
            "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
            "OTHER",
            "WHITE",
            name="race",
        ),
        comment="A person’s reported race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race",
        "race_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the person's race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_race",
        "Each StatePersonRace holds a single reported race for a single person. A StatePerson may have multiple StatePersonRace objects because they may be multi-racial, or because different data sources may report different races.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_person_race_history",
        "person_race_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_race_history",
        "person_race_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person race information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "race",
        existing_type=postgresql.ENUM(
            "AMERICAN_INDIAN_ALASKAN_NATIVE",
            "ASIAN",
            "BLACK",
            "EXTERNAL_UNKNOWN",
            "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
            "OTHER",
            "WHITE",
            name="race",
        ),
        comment="A person’s reported race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "race_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the person's race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_person_race_history",
        "Represents all updates that have made to a(n) StatePersonRace object over time.",
        existing_comment=None,
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        "state_person_race_history",
        existing_comment="Represents all updates that have made to a(n) StatePersonRace object over time.",
        schema=None,
    )
    op.alter_column(
        "state_person_race_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "race_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the person's race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "race",
        existing_type=postgresql.ENUM(
            "AMERICAN_INDIAN_ALASKAN_NATIVE",
            "ASIAN",
            "BLACK",
            "EXTERNAL_UNKNOWN",
            "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
            "OTHER",
            "WHITE",
            name="race",
        ),
        comment=None,
        existing_comment="A person’s reported race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "person_race_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person race information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "person_race_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_table_comment(
        "state_person_race",
        existing_comment="Each StatePersonRace holds a single reported race for a single person. A StatePerson may have multiple StatePersonRace objects because they may be multi-racial, or because different data sources may report different races.",
        schema=None,
    )
    op.alter_column(
        "state_person_race",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race",
        "race_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the person's race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race",
        "race",
        existing_type=postgresql.ENUM(
            "AMERICAN_INDIAN_ALASKAN_NATIVE",
            "ASIAN",
            "BLACK",
            "EXTERNAL_UNKNOWN",
            "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
            "OTHER",
            "WHITE",
            name="race",
        ),
        comment=None,
        existing_comment="A person’s reported race.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race",
        "person_race_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_person_race_person_race_id_seq'::regclass)"
        ),
    )
    op.drop_table_comment(
        "state_person_history",
        existing_comment="Represents all updates that have made to a(n) StatePerson object over time.",
        schema=None,
    )
    op.alter_column(
        "state_person_history",
        "supervising_officer_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "residency_status",
        existing_type=postgresql.ENUM(
            "HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"
        ),
        comment=None,
        existing_comment="A person's reported residency status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "person_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_history",
        "gender_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the person's state-reported gender.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "gender",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "FEMALE",
            "MALE",
            "OTHER",
            "TRANS",
            "TRANS_FEMALE",
            "TRANS_MALE",
            name="gender",
        ),
        comment=None,
        existing_comment="A person’s gender, as reported by the state.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "current_address",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="The current address of the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "birthdate_inferred_from_age",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the person's birthdate was inferred from their age.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "birthdate",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_person_external_id_history",
        existing_comment="Represents all updates that have made to a(n) StatePersonExternalId object over time.",
        schema=None,
    )
    op.alter_column(
        "state_person_external_id_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_external_id_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person external id information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_external_id_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_external_id_history",
        "id_type",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_person_external_id",
        existing_comment="Each StatePersonExternalId holds a single external id provided by the source data system being ingested. An external id is a unique identifier for an individual, unique within the scope of the source data system. We include information denoting the source of the id to make this into a globally unique identifier.",
        schema=None,
    )
    op.alter_column(
        "state_person_external_id",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "id_type",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_person_ethnicity_history",
        existing_comment="Represents all updates that have made to a(n) StatePersonEthnicity object over time.",
        schema=None,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_ethnicity_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person ethnicity information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_ethnicity_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "ethnicity_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "ethnicity",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"
        ),
        comment=None,
        existing_comment="A person’s reported ethnicity.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_person_ethnicity",
        existing_comment="Each StatePersonEthnicity holds a single reported ethnicity for a single person. A StatePerson may have multiple StatePersonEthnicity objects, because they may be multi-ethnic, or because different data sources may report different ethnicities.",
        schema=None,
    )
    op.alter_column(
        "state_person_ethnicity",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity",
        "person_ethnicity_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_ethnicity",
        "ethnicity_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the ethnicity.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity",
        "ethnicity",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"
        ),
        comment=None,
        existing_comment="A person’s reported ethnicity.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_person_alias_history",
        existing_comment="Represents all updates that have made to a(n) StatePersonAlias object over time.",
        schema=None,
    )
    op.alter_column(
        "state_person_alias_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_alias_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person alias, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person alias information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_alias_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="A person’s name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "alias_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value for the alias type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "alias_type",
        existing_type=postgresql.ENUM(
            "AFFILIATION_NAME",
            "ALIAS",
            "GIVEN_NAME",
            "MAIDEN_NAME",
            "NICKNAME",
            name="state_person_alias_type",
        ),
        comment=None,
        existing_comment="The type of the name alias.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_person_alias",
        existing_comment="Each StatePersonAlias holds the naming information for an alias for a particular person. Because a given name is an alias of sorts, we copy over the name fields provided on the StatePerson object into a child StatePersonAlias object. An alias is structured similarly to a name, with various different fields, and not a raw string -- systems storing aliases are raw strings should provide those in the full_name field below.",
        schema=None,
    )
    op.alter_column(
        "state_person_alias",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias",
        "person_alias_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_person_alias",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="A person’s name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias",
        "alias_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value for the alias type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias",
        "alias_type",
        existing_type=postgresql.ENUM(
            "AFFILIATION_NAME",
            "ALIAS",
            "GIVEN_NAME",
            "MAIDEN_NAME",
            "NICKNAME",
            name="state_person_alias_type",
        ),
        comment=None,
        existing_comment="The type of the name alias.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_person",
        existing_comment="Each StatePerson holds details about the individual, as well as lists of several child entities. Some of these child entities are extensions of individual details, e.g. Race is its own entity as opposed to a single field, to allow for the inclusion/tracking of multiple such entities or sources of such information.",
        schema=None,
    )
    op.alter_column(
        "state_person",
        "supervising_officer_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person",
        "residency_status",
        existing_type=postgresql.ENUM(
            "HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"
        ),
        comment=None,
        existing_comment="A person's reported residency status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_person_person_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_person",
        "gender_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the person's state-reported gender.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "gender",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "FEMALE",
            "MALE",
            "OTHER",
            "TRANS",
            "TRANS_FEMALE",
            "TRANS_MALE",
            name="gender",
        ),
        comment=None,
        existing_comment="A person’s gender, as reported by the state.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "current_address",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="The current address of the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "birthdate_inferred_from_age",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the person's birthdate was inferred from their age.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person",
        "birthdate",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the person is currently incarcerated.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the person is currently incarcerated.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the incident took place.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the incident took place.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the case was tried.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the case was tried.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The state this agent operates in.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The state this agent operates in.",
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
