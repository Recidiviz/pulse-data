# pylint: skip-file
"""add_missing_entity_descriptions

Revision ID: 2989a2836e23
Revises: 8a12f64bbd72
Create Date: 2021-05-03 21:48:16.860114

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "2989a2836e23"
down_revision = "8a12f64bbd72"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_incident_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_parole_decision",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_parole_decision_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_external_id",
        "person_external_id_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.create_table_comment(
        "state_supervision_period_program_assignment_association",
        "Association table that connects supervision periods with program assignments by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_agent_association",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_agent_association",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant violation response information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_response_decision_agent_association",
        "Association table that connects supervision violation responses with agents by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_supervision_violation_response_decision_agent_association",
        existing_comment="Association table that connects supervision violation responses with agents by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_agent_association",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_agent_association",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_period_program_assignment_association",
        existing_comment="Association table that connects supervision periods with program assignments by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_person_external_id",
        "person_external_id_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_parole_decision_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_parole_decision",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_incident_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    # ### end Alembic commands ###
