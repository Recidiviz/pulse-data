# pylint: skip-file
"""entity_documentation_part_6

Revision ID: 8a12f64bbd72
Revises: b5103b6e2307
Create Date: 2021-05-03 18:34:10.402780

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "8a12f64bbd72"
down_revision = "b5103b6e2307"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "state_charge_incarceration_sentence_association",
        "Association table that connects charges with incarceration sentences by their ids.",
        existing_comment="Association table that connects charges with incarceration_sentences by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_charge_supervision_sentence_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_supervision_sentence_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_supervision_contact_association",
        "supervision_contact_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision contact, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision contact information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_supervision_contact_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_period_supervision_contact_association",
        "Association table that connects supervision periods with supervision contacts by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_period_supervision_violation_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_supervision_violation_association",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_period_supervision_violation_association",
        "Association table that connects supervision periods with supervision violations by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence",
        "completion_date",
        existing_type=sa.DATE(),
        comment="The date the person actually did complete their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the sentence was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "date_imposed",
        existing_type=sa.DATE(),
        comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "max_length_days",
        existing_type=sa.INTEGER(),
        comment="Maximum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "min_length_days",
        existing_type=sa.INTEGER(),
        comment="Minimum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "projected_completion_date",
        existing_type=sa.DATE(),
        comment="The earliest projected date the person may have completed their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "start_date",
        existing_type=sa.DATE(),
        comment="The date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "status",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPLETED",
            "EXTERNAL_UNKNOWN",
            "PARDONED",
            "PRESENT_WITHOUT_INFO",
            "REVOKED",
            "SERVING",
            "SUSPENDED",
            "VACATED",
            name="state_sentence_status",
        ),
        comment="The current status of this sentence.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the current status of this sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_sentence_supervision_sentence_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_type",
        existing_type=postgresql.ENUM(
            "CIVIL_COMMITMENT",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "HALFWAY_HOUSE",
            "PAROLE",
            "POST_CONFINEMENT",
            "PRE_CONFINEMENT",
            "PROBATION",
            name="state_supervision_type",
        ),
        comment="The type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_sentence",
        "The StateSupervisionSentence object represents information about a single sentence to a period of supervision imposed as part of a group of related sentences. Multiple distinct, related sentences to supervision should be captured as separate supervision sentence objects within the same group. These sentences may, for example, be concurrent or consecutive to one another. Like the sentence group above, the supervision sentence represents only the imposition of some sentence terms, not an actual period of supervision experienced by the person.<br /><br />A StateSupervisionSentence object can reference many charges, and each charge can reference many sentences -- the relationship is many:many.<br /><br />A StateSupervisionSentence can have multiple child StateSupervisionPeriods. It can also have child StateIncarcerationPeriods since a sentence to supervision may result in a person's parole being revoked and the person being re-incarcerated, for example. In some jurisdictions, this would be modeled as distinct sentences of supervision and incarceration, but this is not universal.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "completion_date",
        existing_type=sa.DATE(),
        comment="The date the person actually did complete their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the sentence was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "date_imposed",
        existing_type=sa.DATE(),
        comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "max_length_days",
        existing_type=sa.INTEGER(),
        comment="Maximum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "min_length_days",
        existing_type=sa.INTEGER(),
        comment="Minimum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "projected_completion_date",
        existing_type=sa.DATE(),
        comment="The earliest projected date the person may have completed their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "start_date",
        existing_type=sa.DATE(),
        comment="The date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "status",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPLETED",
            "EXTERNAL_UNKNOWN",
            "PARDONED",
            "PRESENT_WITHOUT_INFO",
            "REVOKED",
            "SERVING",
            "SUSPENDED",
            "VACATED",
            name="state_sentence_status",
        ),
        comment="The current status of this sentence.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the current status of this sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_sentence_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_type",
        existing_type=postgresql.ENUM(
            "CIVIL_COMMITMENT",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "HALFWAY_HOUSE",
            "PAROLE",
            "POST_CONFINEMENT",
            "PRE_CONFINEMENT",
            "PROBATION",
            name="state_supervision_type",
        ),
        comment="The type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_sentence_history",
        "Represents all updates that have made to a(n) StateSupervisionSentence object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_incarceration_period_association",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_incarceration_period_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_sentence_incarceration_period_association",
        "Association table that connects supervision sentences with incarceration periods by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_supervision_period_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_supervision_period_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_sentence_supervision_period_association",
        "Association table that connects supervision sentences with supervision periods by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "condition",
        existing_type=sa.VARCHAR(length=255),
        comment="The specific condition of supervision which was violated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "supervision_violated_condition_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violated condition entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.create_table_comment(
        "state_supervision_violated_condition_entry",
        "The StateSupervisionViolatedConditionEntry object represents a particular condition of supervision which was violated by a particular supervision violation. Each supervision violation has zero to many violated conditions. For example, a violation may be recorded because a brand new charge has been brought against the supervised person.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "condition",
        existing_type=sa.VARCHAR(length=255),
        comment="The specific condition of supervision which was violated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violated_condition_entry_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violated_condition_entry_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "condition",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The specific condition of supervision which was violated.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_supervision_violated_condition_entry",
        existing_comment="The StateSupervisionViolatedConditionEntry object represents a particular condition of supervision which was violated by a particular supervision violation. Each supervision violation has zero to many violated conditions. For example, a violation may be recorded because a brand new charge has been brought against the supervised person.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "supervision_violated_condition_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violated condition entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "condition",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The specific condition of supervision which was violated.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_supervision_sentence_supervision_period_association",
        existing_comment="Association table that connects supervision sentences with supervision periods by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_supervision_period_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_supervision_period_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_sentence_incarceration_period_association",
        existing_comment="Association table that connects supervision sentences with incarceration periods by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_incarceration_period_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_incarceration_period_association",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_sentence_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionSentence object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_type",
        existing_type=postgresql.ENUM(
            "CIVIL_COMMITMENT",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "HALFWAY_HOUSE",
            "PAROLE",
            "POST_CONFINEMENT",
            "PRE_CONFINEMENT",
            "PROBATION",
            name="state_supervision_type",
        ),
        comment=None,
        existing_comment="The type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "supervision_sentence_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the current status of this sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "status",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPLETED",
            "EXTERNAL_UNKNOWN",
            "PARDONED",
            "PRESENT_WITHOUT_INFO",
            "REVOKED",
            "SERVING",
            "SUSPENDED",
            "VACATED",
            name="state_sentence_status",
        ),
        comment=None,
        existing_comment="The current status of this sentence.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "start_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "projected_completion_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The earliest projected date the person may have completed their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "min_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Minimum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "max_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Maximum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "date_imposed",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the sentence was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "completion_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person actually did complete their supervision.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_sentence",
        existing_comment="The StateSupervisionSentence object represents information about a single sentence to a period of supervision imposed as part of a group of related sentences. Multiple distinct, related sentences to supervision should be captured as separate supervision sentence objects within the same group. These sentences may, for example, be concurrent or consecutive to one another. Like the sentence group above, the supervision sentence represents only the imposition of some sentence terms, not an actual period of supervision experienced by the person.<br /><br />A StateSupervisionSentence object can reference many charges, and each charge can reference many sentences -- the relationship is many:many.<br /><br />A StateSupervisionSentence can have multiple child StateSupervisionPeriods. It can also have child StateIncarcerationPeriods since a sentence to supervision may result in a person's parole being revoked and the person being re-incarcerated, for example. In some jurisdictions, this would be modeled as distinct sentences of supervision and incarceration, but this is not universal.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_type",
        existing_type=postgresql.ENUM(
            "CIVIL_COMMITMENT",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "HALFWAY_HOUSE",
            "PAROLE",
            "POST_CONFINEMENT",
            "PRE_CONFINEMENT",
            "PROBATION",
            name="state_supervision_type",
        ),
        comment=None,
        existing_comment="The type of supervision the person is being sentenced to.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_sentence_supervision_sentence_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_supervision_sentence",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the current status of this sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "status",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPLETED",
            "EXTERNAL_UNKNOWN",
            "PARDONED",
            "PRESENT_WITHOUT_INFO",
            "REVOKED",
            "SERVING",
            "SUSPENDED",
            "VACATED",
            name="state_sentence_status",
        ),
        comment=None,
        existing_comment="The current status of this sentence.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "start_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "projected_completion_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The earliest projected date the person may have completed their supervision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "min_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Minimum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "max_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Maximum duration of this sentence in days.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "date_imposed",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the sentence was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence",
        "completion_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person actually did complete their supervision.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_period_supervision_violation_association",
        existing_comment="Association table that connects supervision periods with supervision violations by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_period_supervision_violation_association",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_supervision_violation_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_period_supervision_contact_association",
        existing_comment="Association table that connects supervision periods with supervision contacts by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_period_supervision_contact_association",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_supervision_contact_association",
        "supervision_contact_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision contact, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision contact information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_supervision_sentence_association",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_supervision_sentence_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_charge_incarceration_sentence_association",
        "Association table that connects charges with incarceration_sentences by their ids.",
        existing_comment="Association table that connects charges with incarceration sentences by their ids.",
        schema=None,
    )
    # ### end Alembic commands ###
