# pylint: skip-file
"""entity_documentation_part_1

Revision ID: 7cb61207a27d
Revises: b1a54f109c42
Create Date: 2021-04-29 13:44:21.038309

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7cb61207a27d"
down_revision = "b1a54f109c42"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_agent",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_agent_agent_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_agent",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        existing_comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        existing_comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_agent_history",
        "Represents all updates that have made to a(n) StateAgent object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_assessment",
        "assessment_class",
        existing_type=postgresql.ENUM(
            "MENTAL_HEALTH",
            "RISK",
            "SECURITY_CLASSIFICATION",
            "SEX_OFFENSE",
            "SOCIAL",
            "SUBSTANCE_ABUSE",
            name="state_assessment_class",
        ),
        comment="The classification of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_class_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the classification of assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_date",
        existing_type=sa.DATE(),
        comment="The date the assessment was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_assessment_assessment_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_assessment",
        "assessment_level",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "LOW",
            "LOW_MEDIUM",
            "MEDIUM",
            "MEDIUM_HIGH",
            "MODERATE",
            "HIGH",
            "VERY_HIGH",
            name="state_assessment_level",
        ),
        comment="The final level output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the assessment level",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_metadata",
        existing_type=sa.TEXT(),
        comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_score",
        existing_type=sa.INTEGER(),
        comment="The final score output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_type",
        existing_type=postgresql.ENUM(
            "INTERNAL_UNKNOWN",
            "ASI",
            "CSSM",
            "HIQ",
            "LSIR",
            "ORAS",
            "ORAS_COMMUNITY_SUPERVISION",
            "ORAS_COMMUNITY_SUPERVISION_SCREENING",
            "ORAS_MISDEMEANOR_ASSESSMENT",
            "ORAS_MISDEMEANOR_SCREENING",
            "ORAS_PRE_TRIAL",
            "ORAS_PRISON_SCREENING",
            "ORAS_PRISON_INTAKE",
            "ORAS_REENTRY",
            "ORAS_STATIC",
            "ORAS_SUPPLEMENTAL_REENTRY",
            "PA_RST",
            "PSA",
            "SORAC",
            "STATIC_99",
            "TCU_DRUG_SCREEN",
            name="state_assessment_type",
        ),
        comment="The specific type of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the assessment type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "conducting_agent_id",
        existing_type=sa.INTEGER(),
        comment="The id of the agent conducting this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="The incarceration period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="The supervision period id associated with this assessment.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_assessment",
        "The StateAssessment object represents information about an assessment conducted for some person. Assessments are used in various stages of the justice system to assess a person's risk, or a person's needs, or to determine what course of action to take, such as pretrial sentencing or program reference. A StateAssessment is always about a particular person, but it may also be optionally linked to a particular StateIncarcerationPeriod or StateSupervisionPeriod.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_class",
        existing_type=postgresql.ENUM(
            "MENTAL_HEALTH",
            "RISK",
            "SECURITY_CLASSIFICATION",
            "SEX_OFFENSE",
            "SOCIAL",
            "SUBSTANCE_ABUSE",
            name="state_assessment_class",
        ),
        comment="The classification of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_class_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the classification of assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_date",
        existing_type=sa.DATE(),
        comment="The date the assessment was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state assessment information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_level",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "LOW",
            "LOW_MEDIUM",
            "MEDIUM",
            "MEDIUM_HIGH",
            "MODERATE",
            "HIGH",
            "VERY_HIGH",
            name="state_assessment_level",
        ),
        comment="The final level output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the assessment level",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_metadata",
        existing_type=sa.TEXT(),
        comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_score",
        existing_type=sa.INTEGER(),
        comment="The final score output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_type",
        existing_type=postgresql.ENUM(
            "INTERNAL_UNKNOWN",
            "ASI",
            "CSSM",
            "HIQ",
            "LSIR",
            "ORAS",
            "ORAS_COMMUNITY_SUPERVISION",
            "ORAS_COMMUNITY_SUPERVISION_SCREENING",
            "ORAS_MISDEMEANOR_ASSESSMENT",
            "ORAS_MISDEMEANOR_SCREENING",
            "ORAS_PRE_TRIAL",
            "ORAS_PRISON_SCREENING",
            "ORAS_PRISON_INTAKE",
            "ORAS_REENTRY",
            "ORAS_STATIC",
            "ORAS_SUPPLEMENTAL_REENTRY",
            "PA_RST",
            "PSA",
            "SORAC",
            "STATIC_99",
            "TCU_DRUG_SCREEN",
            name="state_assessment_type",
        ),
        comment="The specific type of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the assessment type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "conducting_agent_id",
        existing_type=sa.INTEGER(),
        comment="The id of the agent conducting this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="The incarceration period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="The supervision period id associated with this assessment.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_assessment_history",
        "Represents all updates that have made to a(n) StateAssessment object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_bond",
        "amount_dollars",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "bond_agent",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('state_bond_bond_id_seq'::regclass)"),
    )
    op.alter_column(
        "state_bond",
        "bond_type",
        existing_type=postgresql.ENUM(
            "CASH",
            "EXTERNAL_UNKNOWN",
            "DENIED",
            "NOT_REQUIRED",
            "PARTIAL_CASH",
            "SECURED",
            "UNSECURED",
            name="bond_type",
        ),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "bond_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "date_paid",
        existing_type=sa.DATE(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "POSTED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            "REVOKED",
            "SET",
            name="bond_status",
        ),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_bond", "DEPRECATED. See #2891.", existing_comment=None, schema=None
    )
    op.alter_column(
        "state_bond_history",
        "amount_dollars",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_agent",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "bond_type",
        existing_type=postgresql.ENUM(
            "CASH",
            "EXTERNAL_UNKNOWN",
            "DENIED",
            "NOT_REQUIRED",
            "PARTIAL_CASH",
            "SECURED",
            "UNSECURED",
            name="bond_type",
        ),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "bond_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "date_paid",
        existing_type=sa.DATE(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "POSTED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            "REVOKED",
            "SET",
            name="bond_status",
        ),
        comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_bond_history",
        "DEPRECATED. See #2891.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_charge",
        "attempted",
        existing_type=sa.BOOLEAN(),
        comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_charge",
        "charge_notes",
        existing_type=sa.TEXT(),
        comment="Free text containing other information about a charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "charging_entity",
        existing_type=sa.VARCHAR(length=255),
        comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_type",
        existing_type=postgresql.ENUM(
            "CIVIL",
            "EXTERNAL_UNKNOWN",
            "FELONY",
            "INFRACTION",
            "MISDEMEANOR",
            "OTHER",
            name="state_charge_classification_type",
        ),
        comment="Charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "counts",
        existing_type=sa.INTEGER(),
        comment="The number of counts of this charge which are being brought against the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the charge was brought.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "date_charged",
        existing_type=sa.DATE(),
        comment="The date the person was charged with the alleged offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "description",
        existing_type=sa.TEXT(),
        comment="A text description of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "is_controlling",
        existing_type=sa.BOOLEAN(),
        comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment="Whether this charge was for a violent crime or not.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "ncic_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "offense_date",
        existing_type=sa.DATE(),
        comment="The date of the alleged offense that led to this charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "offense_type",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of offense associated with the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "status",
        existing_type=postgresql.ENUM(
            "ACQUITTED",
            "COMPLETED_SENTENCE",
            "CONVICTED",
            "DROPPED",
            "INFERRED_DROPPED",
            "EXTERNAL_UNKNOWN",
            "PENDING",
            "PRETRIAL",
            "SENTENCED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            name="charge_status",
        ),
        comment="The status of the charge.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the status of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "statute",
        existing_type=sa.VARCHAR(length=255),
        comment="The identifier of the charge in the state or federal code.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_charge",
        "The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many. Each StateCharge is brought to trial as part of no more than a single StateCourtCase.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_charge_fine_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_fine_association",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_charge_fine_association",
        "Association table that connects charges with fines by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_charge_history",
        "attempted",
        existing_type=sa.BOOLEAN(),
        comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "charge_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_charge_history",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state charge information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "charge_notes",
        existing_type=sa.TEXT(),
        comment="Free text containing other information about a charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "charging_entity",
        existing_type=sa.VARCHAR(length=255),
        comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_type",
        existing_type=postgresql.ENUM(
            "CIVIL",
            "EXTERNAL_UNKNOWN",
            "FELONY",
            "INFRACTION",
            "MISDEMEANOR",
            "OTHER",
            name="state_charge_classification_type",
        ),
        comment="Charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "counts",
        existing_type=sa.INTEGER(),
        comment="The number of counts of this charge which are being brought against the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the charge was brought.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "date_charged",
        existing_type=sa.DATE(),
        comment="The date the person was charged with the alleged offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "description",
        existing_type=sa.TEXT(),
        comment="A text description of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "is_controlling",
        existing_type=sa.BOOLEAN(),
        comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment="Whether this charge was for a violent crime or not.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "ncic_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "offense_date",
        existing_type=sa.DATE(),
        comment="The date of the alleged offense that led to this charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "offense_type",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of offense associated with the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "status",
        existing_type=postgresql.ENUM(
            "ACQUITTED",
            "COMPLETED_SENTENCE",
            "CONVICTED",
            "DROPPED",
            "INFERRED_DROPPED",
            "EXTERNAL_UNKNOWN",
            "PENDING",
            "PRETRIAL",
            "SENTENCED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            name="charge_status",
        ),
        comment="The status of the charge.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the status of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "statute",
        existing_type=sa.VARCHAR(length=255),
        comment="The identifier of the charge in the state or federal code.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_charge_history",
        "Represents all updates that have made to a(n) StateCharge object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_charge_incarceration_sentence_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_incarceration_sentence_association",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_charge_incarceration_sentence_association",
        "Association table that connects charges with incarceration_sentences by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_court_case",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_charge_incarceration_sentence_association",
        existing_comment="Association table that connects charges with incarceration_sentences by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_charge_incarceration_sentence_association",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_incarceration_sentence_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_charge_history",
        existing_comment="Represents all updates that have made to a(n) StateCharge object over time.",
        schema=None,
    )
    op.alter_column(
        "state_charge_history",
        "statute",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The identifier of the charge in the state or federal code.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the status of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "status",
        existing_type=postgresql.ENUM(
            "ACQUITTED",
            "COMPLETED_SENTENCE",
            "CONVICTED",
            "DROPPED",
            "INFERRED_DROPPED",
            "EXTERNAL_UNKNOWN",
            "PENDING",
            "PRETRIAL",
            "SENTENCED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            name="charge_status",
        ),
        comment=None,
        existing_comment="The status of the charge.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "offense_type",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of offense associated with the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "offense_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date of the alleged offense that led to this charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "ncic_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether this charge was for a violent crime or not.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "is_controlling",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "description",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="A text description of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "date_charged",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was charged with the alleged offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the charge was brought.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "counts",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The number of counts of this charge which are being brought against the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_type",
        existing_type=postgresql.ENUM(
            "CIVIL",
            "EXTERNAL_UNKNOWN",
            "FELONY",
            "INFRACTION",
            "MISDEMEANOR",
            "OTHER",
            name="state_charge_classification_type",
        ),
        comment=None,
        existing_comment="Charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "classification_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "charging_entity",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "charge_notes",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Free text containing other information about a charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state charge information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "charge_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_charge_history",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "attempted",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_charge_fine_association",
        existing_comment="Association table that connects charges with fines by their ids.",
        schema=None,
    )
    op.alter_column(
        "state_charge_fine_association",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_fine_association",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_charge",
        existing_comment="The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many. Each StateCharge is brought to trial as part of no more than a single StateCourtCase.",
        schema=None,
    )
    op.alter_column(
        "state_charge",
        "statute",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The identifier of the charge in the state or federal code.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the status of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "status",
        existing_type=postgresql.ENUM(
            "ACQUITTED",
            "COMPLETED_SENTENCE",
            "CONVICTED",
            "DROPPED",
            "INFERRED_DROPPED",
            "EXTERNAL_UNKNOWN",
            "PENDING",
            "PRETRIAL",
            "SENTENCED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            name="charge_status",
        ),
        comment=None,
        existing_comment="The status of the charge.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the charge was brought.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge",
        "offense_type",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of offense associated with the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "offense_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date of the alleged offense that led to this charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "ncic_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether this charge was for a violent crime or not.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "is_controlling",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "description",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="A text description of the charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "date_charged",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was charged with the alleged offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the charge was brought.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "counts",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The number of counts of this charge which are being brought against the person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_type",
        existing_type=postgresql.ENUM(
            "CIVIL",
            "EXTERNAL_UNKNOWN",
            "FELONY",
            "INFRACTION",
            "MISDEMEANOR",
            "OTHER",
            name="state_charge_classification_type",
        ),
        comment=None,
        existing_comment="Charge classification.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "classification_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "charging_entity",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "charge_notes",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Free text containing other information about a charge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "charge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_charge",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge",
        "attempted",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_bond_history", existing_comment="DEPRECATED. See #2891.", schema=None
    )
    op.alter_column(
        "state_bond_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "POSTED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            "REVOKED",
            "SET",
            name="bond_status",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "date_paid",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_type",
        existing_type=postgresql.ENUM(
            "CASH",
            "EXTERNAL_UNKNOWN",
            "DENIED",
            "NOT_REQUIRED",
            "PARTIAL_CASH",
            "SECURED",
            "UNSECURED",
            name="bond_type",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "bond_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_bond_history",
        "bond_agent",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "amount_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_bond", existing_comment="DEPRECATED. See #2891.", schema=None
    )
    op.alter_column(
        "state_bond",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "POSTED",
            "PRESENT_WITHOUT_INFO",
            "REMOVED_WITHOUT_INFO",
            "REVOKED",
            "SET",
            name="bond_status",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "date_paid",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "bond_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "bond_type",
        existing_type=postgresql.ENUM(
            "CASH",
            "EXTERNAL_UNKNOWN",
            "DENIED",
            "NOT_REQUIRED",
            "PARTIAL_CASH",
            "SECURED",
            "UNSECURED",
            name="bond_type",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond",
        "bond_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('state_bond_bond_id_seq'::regclass)"),
    )
    op.alter_column(
        "state_bond",
        "bond_agent",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond",
        "amount_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="DEPRECATED. See #2891.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_assessment_history",
        existing_comment="Represents all updates that have made to a(n) StateAssessment object over time.",
        schema=None,
    )
    op.alter_column(
        "state_assessment_history",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The supervision period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The incarceration period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "conducting_agent_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The id of the agent conducting this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the assessment type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_type",
        existing_type=postgresql.ENUM(
            "INTERNAL_UNKNOWN",
            "ASI",
            "CSSM",
            "HIQ",
            "LSIR",
            "ORAS",
            "ORAS_COMMUNITY_SUPERVISION",
            "ORAS_COMMUNITY_SUPERVISION_SCREENING",
            "ORAS_MISDEMEANOR_ASSESSMENT",
            "ORAS_MISDEMEANOR_SCREENING",
            "ORAS_PRE_TRIAL",
            "ORAS_PRISON_SCREENING",
            "ORAS_PRISON_INTAKE",
            "ORAS_REENTRY",
            "ORAS_STATIC",
            "ORAS_SUPPLEMENTAL_REENTRY",
            "PA_RST",
            "PSA",
            "SORAC",
            "STATIC_99",
            "TCU_DRUG_SCREEN",
            name="state_assessment_type",
        ),
        comment=None,
        existing_comment="The specific type of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_score",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The final score output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_metadata",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the assessment level",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_level",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "LOW",
            "LOW_MEDIUM",
            "MEDIUM",
            "MEDIUM_HIGH",
            "MODERATE",
            "HIGH",
            "VERY_HIGH",
            name="state_assessment_level",
        ),
        comment=None,
        existing_comment="The final level output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state assessment information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the assessment was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_class_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the classification of assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "assessment_class",
        existing_type=postgresql.ENUM(
            "MENTAL_HEALTH",
            "RISK",
            "SECURITY_CLASSIFICATION",
            "SEX_OFFENSE",
            "SOCIAL",
            "SUBSTANCE_ABUSE",
            name="state_assessment_class",
        ),
        comment=None,
        existing_comment="The classification of assessment that was conducted.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_assessment",
        existing_comment="The StateAssessment object represents information about an assessment conducted for some person. Assessments are used in various stages of the justice system to assess a person's risk, or a person's needs, or to determine what course of action to take, such as pretrial sentencing or program reference. A StateAssessment is always about a particular person, but it may also be optionally linked to a particular StateIncarcerationPeriod or StateSupervisionPeriod.",
        schema=None,
    )
    op.alter_column(
        "state_assessment",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The supervision period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the assessment was conducted.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "person_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The incarceration period id associated with this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "conducting_agent_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The id of the agent conducting this assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the assessment type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_type",
        existing_type=postgresql.ENUM(
            "INTERNAL_UNKNOWN",
            "ASI",
            "CSSM",
            "HIQ",
            "LSIR",
            "ORAS",
            "ORAS_COMMUNITY_SUPERVISION",
            "ORAS_COMMUNITY_SUPERVISION_SCREENING",
            "ORAS_MISDEMEANOR_ASSESSMENT",
            "ORAS_MISDEMEANOR_SCREENING",
            "ORAS_PRE_TRIAL",
            "ORAS_PRISON_SCREENING",
            "ORAS_PRISON_INTAKE",
            "ORAS_REENTRY",
            "ORAS_STATIC",
            "ORAS_SUPPLEMENTAL_REENTRY",
            "PA_RST",
            "PSA",
            "SORAC",
            "STATIC_99",
            "TCU_DRUG_SCREEN",
            name="state_assessment_type",
        ),
        comment=None,
        existing_comment="The specific type of assessment that was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_score",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The final score output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_metadata",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the assessment level",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_level",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "LOW",
            "LOW_MEDIUM",
            "MEDIUM",
            "MEDIUM_HIGH",
            "MODERATE",
            "HIGH",
            "VERY_HIGH",
            name="state_assessment_level",
        ),
        comment=None,
        existing_comment="The final level output by the assessment, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_assessment_assessment_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_assessment",
        "assessment_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the assessment was conducted.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_class_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the classification of assessment.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment",
        "assessment_class",
        existing_type=postgresql.ENUM(
            "MENTAL_HEALTH",
            "RISK",
            "SECURITY_CLASSIFICATION",
            "SEX_OFFENSE",
            "SOCIAL",
            "SUBSTANCE_ABUSE",
            name="state_assessment_class",
        ),
        comment=None,
        existing_comment="The classification of assessment that was conducted.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_agent_history",
        existing_comment="Represents all updates that have made to a(n) StateAgent object over time.",
        schema=None,
    )
    op.alter_column(
        "state_agent_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_agent_agent_id_seq'::regclass)"
        ),
    )
    # ### end Alembic commands ###
