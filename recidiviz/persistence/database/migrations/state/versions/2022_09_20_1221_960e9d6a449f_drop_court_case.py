# pylint: skip-file
"""drop_court_case

Revision ID: 960e9d6a449f
Revises: 12e2078735d9
Create Date: 2022-09-20 12:21:47.843538

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "960e9d6a449f"
down_revision = "12e2078735d9"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_state_charge_court_case_id", table_name="state_charge")
    op.drop_constraint(
        "state_charge_court_case_id_fkey", "state_charge", type_="foreignkey"
    )
    op.create_table_comment(
        "state_charge",
        "The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many.",
        existing_comment="The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many. Each StateCharge is brought to trial as part of no more than a single StateCourtCase.",
        schema=None,
    )
    op.drop_column("state_charge", "court_case_id")

    op.drop_index("ix_state_court_case_county_code", table_name="state_court_case")
    op.drop_index("ix_state_court_case_external_id", table_name="state_court_case")
    op.drop_index("ix_state_court_case_person_id", table_name="state_court_case")
    op.drop_index("ix_state_court_case_state_code", table_name="state_court_case")
    op.drop_table("state_court_case")

    op.execute("DROP TYPE state_court_type;")
    op.execute("DROP TYPE state_court_case_status;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_court_case",
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "INTERNAL_UNKNOWN",
                name="state_court_case_status",
            ),
            autoincrement=False,
            nullable=True,
            comment="The current status of the case.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the current status of the case.",
        ),
        sa.Column(
            "court_type",
            postgresql.ENUM(
                "PRESENT_WITHOUT_INFO",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_court_type",
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of court this charge will be/was heard in.",
        ),
        sa.Column(
            "court_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the court type.",
        ),
        sa.Column(
            "date_convicted",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was convicted, if applicable.",
        ),
        sa.Column(
            "next_court_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="Date of the next scheduled court appearance for this case, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "judicial_district_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the judicial district under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "court_case_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_court_case_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("court_case_id", name="state_court_case_pkey"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            "person_id",
            name="court_case_external_ids_unique_within_state_and_person",
        ),
    )
    op.create_index(
        "ix_state_court_case_state_code",
        "state_court_case",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_person_id", "state_court_case", ["person_id"], unique=False
    )
    op.create_index(
        "ix_state_court_case_external_id",
        "state_court_case",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_county_code",
        "state_court_case",
        ["county_code"],
        unique=False,
    )

    op.add_column(
        "state_charge",
        sa.Column(
            "court_case_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
    )
    op.create_table_comment(
        "state_charge",
        "The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many. Each StateCharge is brought to trial as part of no more than a single StateCourtCase.",
        existing_comment="The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many.",
        schema=None,
    )
    op.create_foreign_key(
        "state_charge_court_case_id_fkey",
        "state_charge",
        "state_court_case",
        ["court_case_id"],
        ["court_case_id"],
    )
    op.create_index(
        "ix_state_charge_court_case_id", "state_charge", ["court_case_id"], unique=False
    )
    # ### end Alembic commands ###
