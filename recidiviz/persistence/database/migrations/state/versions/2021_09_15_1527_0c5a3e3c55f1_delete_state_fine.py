# pylint: skip-file
"""delete_state_fine

Revision ID: 0c5a3e3c55f1
Revises: a38799c0faf2
Create Date: 2021-09-15 15:27:12.520962

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0c5a3e3c55f1"
down_revision = "a38799c0faf2"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_state_fine_county_code", table_name="state_fine")
    op.drop_index("ix_state_fine_external_id", table_name="state_fine")
    op.drop_index("ix_state_fine_person_id", table_name="state_fine")
    op.drop_index("ix_state_fine_sentence_group_id", table_name="state_fine")
    op.drop_index("ix_state_fine_state_code", table_name="state_fine")
    op.drop_index(
        "ix_state_charge_fine_association_charge_id",
        table_name="state_charge_fine_association",
    )
    op.drop_index(
        "ix_state_charge_fine_association_fine_id",
        table_name="state_charge_fine_association",
    )
    op.drop_table("state_charge_fine_association")
    op.drop_index("ix_state_fine_history_county_code", table_name="state_fine_history")
    op.drop_index("ix_state_fine_history_external_id", table_name="state_fine_history")
    op.drop_index("ix_state_fine_history_fine_id", table_name="state_fine_history")
    op.drop_index("ix_state_fine_history_person_id", table_name="state_fine_history")
    op.drop_index(
        "ix_state_fine_history_sentence_group_id", table_name="state_fine_history"
    )
    op.drop_index("ix_state_fine_history_state_code", table_name="state_fine_history")

    op.drop_table("state_fine_history")
    op.drop_table("state_fine")
    # ### end Alembic commands ###

    op.execute("DROP TYPE state_fine_status;")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_fine",
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "PAID",
                "PRESENT_WITHOUT_INFO",
                "UNPAID",
                name="state_fine_status",
            ),
            autoincrement=False,
            nullable=False,
            comment="The current status of this fine.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the fine status.",
        ),
        sa.Column(
            "date_paid",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the fine was paid.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the fine was imposed.",
        ),
        sa.Column(
            "fine_dollars",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The amount of the fine, in U.S. Dollars.",
        ),
        sa.Column(
            "fine_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_fine_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            name="state_fine_sentence_group_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("fine_id", name="state_fine_pkey"),
        sa.UniqueConstraint(
            "state_code", "external_id", name="fine_external_ids_unique_within_state"
        ),
    )
    op.create_table(
        "state_fine_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "PAID",
                "PRESENT_WITHOUT_INFO",
                "UNPAID",
                name="state_fine_status",
            ),
            autoincrement=False,
            nullable=False,
            comment="The current status of this fine.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the fine status.",
        ),
        sa.Column(
            "date_paid",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the fine was paid.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the fine was imposed.",
        ),
        sa.Column(
            "fine_dollars",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The amount of the fine, in U.S. Dollars.",
        ),
        sa.Column(
            "fine_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "fine_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["fine_id"], ["state_fine.fine_id"], name="state_fine_history_fine_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_fine_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            name="state_fine_history_sentence_group_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("fine_history_id", name="state_fine_history_pkey"),
    )
    op.create_index(
        "ix_state_fine_history_state_code",
        "state_fine_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_history_sentence_group_id",
        "state_fine_history",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_history_person_id",
        "state_fine_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_history_fine_id", "state_fine_history", ["fine_id"], unique=False
    )
    op.create_index(
        "ix_state_fine_history_external_id",
        "state_fine_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_history_county_code",
        "state_fine_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_charge_fine_association",
        sa.Column(
            "charge_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        ),
        sa.Column(
            "fine_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_id"],
            ["state_charge.charge_id"],
            name="state_charge_fine_association_charge_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["fine_id"],
            ["state_fine.fine_id"],
            name="state_charge_fine_association_fine_id_fkey",
        ),
    )
    op.create_index(
        "ix_state_charge_fine_association_fine_id",
        "state_charge_fine_association",
        ["fine_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_fine_association_charge_id",
        "state_charge_fine_association",
        ["charge_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_state_code", "state_fine", ["state_code"], unique=False
    )
    op.create_index(
        "ix_state_fine_sentence_group_id",
        "state_fine",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_fine_person_id", "state_fine", ["person_id"], unique=False
    )
    op.create_index(
        "ix_state_fine_external_id", "state_fine", ["external_id"], unique=False
    )
    op.create_index(
        "ix_state_fine_county_code", "state_fine", ["county_code"], unique=False
    )
    # ### end Alembic commands ###
