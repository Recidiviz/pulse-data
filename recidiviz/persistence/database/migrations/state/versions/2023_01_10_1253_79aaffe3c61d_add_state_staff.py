# pylint: skip-file
"""add_state_staff

Revision ID: 79aaffe3c61d
Revises: f383174bc397
Create Date: 2023-01-10 12:53:18.521754

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "79aaffe3c61d"
down_revision = "f383174bc397"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_staff",
        sa.Column(
            "staff_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) staff member, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="The staff member's full name. The value in this field may change over time as the staff member's name changes.",
        ),
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=True,
            comment="The staff member's official email. The value in this field may change over time if the staff member's official email changes.",
        ),
        sa.PrimaryKeyConstraint("staff_id"),
        comment="The StateStaff object represents some staff member operating on behalf of the criminal justice system, usually referenced in the context of taking some action related to a person moving through that system. This includes references such as the officers supervising people on parole, corrections officers overseeing people in prisons, people who manage those officers, and so on. This is not intended to be used to represent justice impacted individuals who are employed by the state as part of some work program.",
    )
    op.create_index(
        op.f("ix_state_staff_state_code"), "state_staff", ["state_code"], unique=False
    )
    op.create_table(
        "state_staff_external_id",
        sa.Column(
            "staff_external_id_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) staff member external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StateStaffExternalId, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "id_type",
            sa.String(length=255),
            nullable=False,
            comment="The type of id provided by the system. In a state where there are multiple identifiers used (e.g. a system user id vs an employee id), this type will help us differentiate between the different schemes.",
        ),
        sa.Column(
            "staff_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) staff member, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant staff member information.",
        ),
        sa.ForeignKeyConstraint(
            ["staff_id"],
            ["state_staff.staff_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("staff_external_id_id"),
        sa.UniqueConstraint(
            "state_code",
            "id_type",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="staff_external_ids_unique_within_type_and_region",
        ),
        comment="Each StateStaffExternalId holds a single external id for a given staff member provided by the source data system being ingested. An external id is a unique identifier for an individual, unique within the scope of the source data system. We include information denoting the source of the id to make this into a globally unique identifier. A staff member may have multiple StateStaffExternalId, but cannot have multiple with the same id_type.",
    )
    op.create_index(
        op.f("ix_state_staff_external_id_external_id"),
        "state_staff_external_id",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_staff_external_id_staff_id"),
        "state_staff_external_id",
        ["staff_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_staff_external_id_state_code"),
        "state_staff_external_id",
        ["state_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_state_staff_external_id_state_code"),
        table_name="state_staff_external_id",
    )
    op.drop_index(
        op.f("ix_state_staff_external_id_staff_id"),
        table_name="state_staff_external_id",
    )
    op.drop_index(
        op.f("ix_state_staff_external_id_external_id"),
        table_name="state_staff_external_id",
    )
    op.drop_table("state_staff_external_id")
    op.drop_index(op.f("ix_state_staff_state_code"), table_name="state_staff")
    op.drop_table("state_staff")
    # ### end Alembic commands ###
