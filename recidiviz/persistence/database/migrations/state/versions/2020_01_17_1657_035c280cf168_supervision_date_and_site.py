"""supervision_date_and_site

Revision ID: 035c280cf168
Revises: 0f5f1cca93e6
Create Date: 2020-01-17 16:57:32.794050

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '035c280cf168'
down_revision = '0f5f1cca93e6'
branch_labels = None
depends_on = None

_state_incarceration_sentence_helper_table = sa.Table(
    'state_incarceration_sentence',
    sa.MetaData(),
    sa.Column('incarceration_sentence_id',
              sa.Integer, primary_key=True),
    sa.Column('state_code', sa.String(length=255), nullable=False),
    sa.Column('date_imposed', sa.Date(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True)
)

_state_incarceration_sentence_history_helper_table = sa.Table(
    'state_incarceration_sentence_history',
    sa.MetaData(),
    sa.Column('incarceration_sentence_history_id',
              sa.Integer, primary_key=True),
    sa.Column('state_code', sa.String(length=255), nullable=False),
    sa.Column('date_imposed', sa.Date(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True)
)


def get_primary_key_equality_clause(sentence, sentence_table, primary_key_name):
    return getattr(sentence_table.c, primary_key_name) == \
        getattr(sentence, primary_key_name)


def migrate_nd_sentence_date_imposed_to_start_date(
        connection, sentence_helper_table: sa.Table, primary_key_name: str):
    for sentence in \
            connection.execute(
                    sentence_helper_table.select()):
        if sentence.state_code == 'US_ND':
            new_start_date = sentence.date_imposed
            connection.execute(
                sentence_helper_table.update().where(
                    get_primary_key_equality_clause(
                        sentence, sentence_helper_table, primary_key_name)
                ).values(
                    start_date=new_start_date,
                    date_imposed=None
                )
            )


def downgrade_migrate_nd_sentence_start_date_to_date_imposed(
        connection, sentence_helper_table: sa.Table, primary_key_name: str):
    for sentence in \
            connection.execute(
                    sentence_helper_table.select()):
        if sentence.state_code == 'US_ND':
            new_date_imposed = sentence.start_date
            connection.execute(
                sentence_helper_table.update().where(
                    get_primary_key_equality_clause(
                        sentence, sentence_helper_table, primary_key_name)
                ).values(
                    date_imposed=new_date_imposed,
                    start_date=None
                )
            )

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('state_incarceration_sentence', sa.Column('completion_date', sa.Date(), nullable=True))
    op.add_column('state_incarceration_sentence', sa.Column('start_date', sa.Date(), nullable=True))
    op.add_column('state_incarceration_sentence_history', sa.Column('completion_date', sa.Date(), nullable=True))
    op.add_column('state_incarceration_sentence_history', sa.Column('start_date', sa.Date(), nullable=True))
    op.add_column('state_supervision_period', sa.Column('supervision_site', sa.String(length=255), nullable=True))
    op.add_column('state_supervision_period_history', sa.Column('supervision_site', sa.String(length=255), nullable=True))
    op.add_column('state_supervision_sentence', sa.Column('date_imposed', sa.Date(), nullable=True))
    op.add_column('state_supervision_sentence', sa.Column('start_date', sa.Date(), nullable=True))
    op.add_column('state_supervision_sentence_history', sa.Column('date_imposed', sa.Date(), nullable=True))
    op.add_column('state_supervision_sentence_history', sa.Column('start_date', sa.Date(), nullable=True))

    connection = op.get_bind()

    migrate_nd_sentence_date_imposed_to_start_date(
        connection, _state_incarceration_sentence_helper_table,
        'incarceration_sentence_id')
    migrate_nd_sentence_date_imposed_to_start_date(
        connection, _state_incarceration_sentence_history_helper_table,
        'incarceration_sentence_history_id')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    connection = op.get_bind()

    downgrade_migrate_nd_sentence_start_date_to_date_imposed(
        connection, _state_incarceration_sentence_helper_table,
        'incarceration_sentence_id')
    downgrade_migrate_nd_sentence_start_date_to_date_imposed(
        connection, _state_incarceration_sentence_history_helper_table,
        'incarceration_sentence_history_id')

    op.drop_column('state_supervision_sentence_history', 'start_date')
    op.drop_column('state_supervision_sentence_history', 'date_imposed')
    op.drop_column('state_supervision_sentence', 'start_date')
    op.drop_column('state_supervision_sentence', 'date_imposed')
    op.drop_column('state_supervision_period_history', 'supervision_site')
    op.drop_column('state_supervision_period', 'supervision_site')
    op.drop_column('state_incarceration_sentence_history', 'start_date')
    op.drop_column('state_incarceration_sentence_history', 'completion_date')
    op.drop_column('state_incarceration_sentence', 'start_date')
    op.drop_column('state_incarceration_sentence', 'completion_date')
    # ### end Alembic commands ###
