# pylint: skip-file
"""add_state_agent_comments

Revision ID: b1a54f109c42
Revises: cdd80c1f89b4
Create Date: 2021-04-27 17:45:22.481390

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b1a54f109c42"
down_revision = "cdd80c1f89b4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_agent",
        "agent_id",
        type_=sa.INTEGER(),
        existing_type=sa.INTEGER(),
        comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_agent_agent_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_agent",
        "agent_type",
        existing_type=postgresql.ENUM(
            "CORRECTIONAL_OFFICER",
            "JUDGE",
            "PAROLE_BOARD_MEMBER",
            "SUPERVISION_OFFICER",
            "UNIT_SUPERVISOR",
            "PRESENT_WITHOUT_INFO",
            "INTERNAL_UNKNOWN",
            name="state_agent_type",
        ),
        comment="The type of agent.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent",
        "agent_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the agent type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="The state agent's full name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_agent",
        "The StateAgent object represents some agent operating on behalf of the criminal justice system, usually referenced in the context of taking some action related to a person moving through that system. This includes references such as the judges trying cases, the officers supervising people on parole, the individuals who make a decision at a parole hearing, and so on. We entity match across StateAgents where possible so that we can see the full scope of actions taken by a particular agent to understand patterns in their behavior.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_agent_history",
        "agent_history_id",
        type_=sa.INTEGER(),
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_agent_history",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "agent_type",
        existing_type=postgresql.ENUM(
            "CORRECTIONAL_OFFICER",
            "JUDGE",
            "PAROLE_BOARD_MEMBER",
            "SUPERVISION_OFFICER",
            "UNIT_SUPERVISOR",
            "PRESENT_WITHOUT_INFO",
            "INTERNAL_UNKNOWN",
            name="state_agent_type",
        ),
        comment="The type of agent.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "agent_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the agent type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment="The state agent's full name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_parole_decision_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_external_id_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_program_assignment_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_sentence_group_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_period_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_period_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_contact_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_case_type_entry_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_sentence_group_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_sentence_group_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_program_assignment_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_program_assignment_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_race_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_race_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_external_id_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_external_id_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_ethnicity_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_person_alias_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_person_alias_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_parole_decision_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_parole_decision_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_sentence_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_charge_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_charge_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_bond_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_bond_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_assessment_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_assessment_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "valid_to",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns stopped having the associated values.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "valid_from",
        existing_type=postgresql.TIMESTAMP(),
        comment=None,
        existing_comment="Timestamp on which the columns started having the associated values.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The state agent's full name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "agent_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the agent type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent_history",
        "agent_type",
        existing_type=postgresql.ENUM(
            "CORRECTIONAL_OFFICER",
            "JUDGE",
            "PAROLE_BOARD_MEMBER",
            "SUPERVISION_OFFICER",
            "UNIT_SUPERVISOR",
            "PRESENT_WITHOUT_INFO",
            "INTERNAL_UNKNOWN",
            name="state_agent_type",
        ),
        comment=None,
        existing_comment="The type of agent.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "agent_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent_history",
        "agent_history_id",
        type_=sa.INTEGER(),
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.drop_table_comment(
        "state_agent",
        existing_comment="The StateAgent object represents some agent operating on behalf of the criminal justice system, usually referenced in the context of taking some action related to a person moving through that system. This includes references such as the judges trying cases, the officers supervising people on parole, the individuals who make a decision at a parole hearing, and so on. We entity match across StateAgents where possible so that we can see the full scope of actions taken by a particular agent to understand patterns in their behavior.",
        schema=None,
    )
    op.alter_column(
        "state_agent",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The state this agent operates in.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent",
        "full_name",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The state agent's full name.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The  unique identifier for the StateAgent, unique within the scope of the source data system",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "agent_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the agent type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_agent",
        "agent_type",
        existing_type=postgresql.ENUM(
            "CORRECTIONAL_OFFICER",
            "JUDGE",
            "PAROLE_BOARD_MEMBER",
            "SUPERVISION_OFFICER",
            "UNIT_SUPERVISOR",
            "PRESENT_WITHOUT_INFO",
            "INTERNAL_UNKNOWN",
            name="state_agent_type",
        ),
        comment=None,
        existing_comment="The type of agent.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_agent",
        "agent_id",
        type_=sa.INTEGER(),
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for an agent. If not specified, one will be generated.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_agent_agent_id_seq'::regclass)"
        ),
    )
    # ### end Alembic commands ###
