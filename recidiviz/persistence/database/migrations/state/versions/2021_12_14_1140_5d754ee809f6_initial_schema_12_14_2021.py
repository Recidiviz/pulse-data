# pylint: skip-file
"""Initial schema 12-14-2021

Revision ID: 5d754ee809f6
Revises: 
Create Date: 2021-12-14 11:40:32.347422

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "5d754ee809f6"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_agent",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        ),
        sa.Column(
            "agent_type",
            sa.Enum(
                "PRESENT_WITHOUT_INFO",
                "CORRECTIONAL_OFFICER",
                "JUDGE",
                "PAROLE_BOARD_MEMBER",
                "SUPERVISION_OFFICER",
                "UNIT_SUPERVISOR",
                "INTERNAL_UNKNOWN",
                name="state_agent_type",
            ),
            nullable=False,
            comment="The type of agent.",
        ),
        sa.Column(
            "agent_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the agent type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="The state agent's full name.",
        ),
        sa.Column(
            "agent_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.PrimaryKeyConstraint("agent_id"),
        comment="The StateAgent object represents some agent operating on behalf of the criminal justice system, usually referenced in the context of taking some action related to a person moving through that system. This includes references such as the judges trying cases, the officers supervising people on parole, the individuals who make a decision at a parole hearing, and so on. We entity match across StateAgents where possible so that we can see the full scope of actions taken by a particular agent to understand patterns in their behavior.",
    )
    op.create_index(
        op.f("ix_state_agent_external_id"), "state_agent", ["external_id"], unique=False
    )
    op.create_index(
        op.f("ix_state_agent_state_code"), "state_agent", ["state_code"], unique=False
    )
    op.create_table(
        "state_agent_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        ),
        sa.Column(
            "agent_type",
            sa.Enum(
                "PRESENT_WITHOUT_INFO",
                "CORRECTIONAL_OFFICER",
                "JUDGE",
                "PAROLE_BOARD_MEMBER",
                "SUPERVISION_OFFICER",
                "UNIT_SUPERVISOR",
                "INTERNAL_UNKNOWN",
                name="state_agent_type",
                create_type=False,
            ),
            nullable=False,
            comment="The type of agent.",
        ),
        sa.Column(
            "agent_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the agent type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="The state agent's full name.",
        ),
        sa.Column(
            "agent_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "agent_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for an agent. If not specified, one will be generated.",
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("agent_history_id"),
        comment="Represents all updates that have made to a(n) StateAgent object over time.",
    )
    op.create_index(
        op.f("ix_state_agent_history_agent_id"),
        "state_agent_history",
        ["agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_agent_history_external_id"),
        "state_agent_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_agent_history_state_code"),
        "state_agent_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "current_address",
            sa.Text(),
            nullable=True,
            comment="The current address of the person.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        ),
        sa.Column(
            "birthdate",
            sa.Date(),
            nullable=True,
            comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        ),
        sa.Column(
            "gender",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "FEMALE",
                "MALE",
                "OTHER",
                "TRANS",
                "TRANS_FEMALE",
                "TRANS_MALE",
                name="gender",
            ),
            nullable=True,
            comment="A person’s gender, as reported by the state.",
        ),
        sa.Column(
            "gender_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the person's state-reported gender.",
        ),
        sa.Column(
            "residency_status",
            sa.Enum("HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"),
            nullable=True,
            comment="A person's reported residency status.",
        ),
        sa.Column(
            "residency_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text used to derive a person's reported residency status.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("person_id"),
        comment="Each StatePerson holds details about the individual, as well as lists of several child entities. Some of these child entities are extensions of individual details, e.g. Race is its own entity as opposed to a single field, to allow for the inclusion/tracking of multiple such entities or sources of such information.",
    )
    op.create_index(
        op.f("ix_state_person_birthdate"), "state_person", ["birthdate"], unique=False
    )
    op.create_index(
        op.f("ix_state_person_full_name"), "state_person", ["full_name"], unique=False
    )
    op.create_index(
        op.f("ix_state_person_state_code"), "state_person", ["state_code"], unique=False
    )
    op.create_index(
        op.f("ix_state_person_supervising_officer_id"),
        "state_person",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_table(
        "state_assessment",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "assessment_class",
            sa.Enum(
                "MENTAL_HEALTH",
                "RISK",
                "SECURITY_CLASSIFICATION",
                "SEX_OFFENSE",
                "SOCIAL",
                "SUBSTANCE_ABUSE",
                name="state_assessment_class",
            ),
            nullable=True,
            comment="The classification of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_class_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the classification of assessment.",
        ),
        sa.Column(
            "assessment_type",
            sa.Enum(
                "ASI",
                "CSSM",
                "HIQ",
                "LSIR",
                "PA_RST",
                "PSA",
                "SORAC",
                "STATIC_99",
                "TCU_DRUG_SCREEN",
                "ORAS_COMMUNITY_SUPERVISION",
                "ORAS_COMMUNITY_SUPERVISION_SCREENING",
                "ORAS_MISDEMEANOR_ASSESSMENT",
                "ORAS_MISDEMEANOR_SCREENING",
                "ORAS_PRE_TRIAL",
                "ORAS_PRISON_SCREENING",
                "ORAS_PRISON_INTAKE",
                "ORAS_REENTRY",
                "ORAS_STATIC",
                "ORAS_SUPPLEMENTAL_REENTRY",
                "INTERNAL_UNKNOWN",
                name="state_assessment_type",
            ),
            nullable=True,
            comment="The specific type of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the assessment type.",
        ),
        sa.Column(
            "assessment_date",
            sa.Date(),
            nullable=True,
            comment="The date the assessment was conducted.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "assessment_score",
            sa.Integer(),
            nullable=True,
            comment="The final score output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "LOW",
                "LOW_MEDIUM",
                "MEDIUM",
                "MEDIUM_HIGH",
                "MODERATE",
                "HIGH",
                "VERY_HIGH",
                name="state_assessment_level",
            ),
            nullable=True,
            comment="The final level output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the assessment level",
        ),
        sa.Column(
            "assessment_metadata",
            sa.Text(),
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "assessment_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "conducting_agent_id",
            sa.Integer(),
            nullable=True,
            comment="The id of the agent conducting this assessment.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["conducting_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("assessment_id"),
        comment="The StateAssessment object represents information about an assessment conducted for some person. Assessments are used in various stages of the justice system to assess a person's risk, or a person's needs, or to determine what course of action to take, such as pretrial sentencing or program reference.",
    )
    op.create_index(
        op.f("ix_state_assessment_conducting_agent_id"),
        "state_assessment",
        ["conducting_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_external_id"),
        "state_assessment",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_person_id"),
        "state_assessment",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_state_code"),
        "state_assessment",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_court_case",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                name="state_court_case_status",
            ),
            nullable=True,
            comment="The current status of the case.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the current status of the case.",
        ),
        sa.Column(
            "court_type",
            sa.Enum("PRESENT_WITHOUT_INFO", name="state_court_type"),
            nullable=True,
            comment="The type of court this charge will be/was heard in.",
        ),
        sa.Column(
            "court_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the court type.",
        ),
        sa.Column(
            "date_convicted",
            sa.Date(),
            nullable=True,
            comment="The date the person was convicted, if applicable.",
        ),
        sa.Column(
            "next_court_date",
            sa.Date(),
            nullable=True,
            comment="Date of the next scheduled court appearance for this case, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "judicial_district_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the judicial district under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "court_case_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "judge_id",
            sa.Integer(),
            nullable=True,
            comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["judge_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("court_case_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            "person_id",
            deferrable="True",
            initially="DEFERRED",
            name="court_case_external_ids_unique_within_state_and_person",
        ),
        comment="The StateCourtCase object holds information on a single court case that a person stands trial at. This represents the case itself, not the charges brought in the case, or any sentences imposed as a result of the case.",
    )
    op.create_index(
        op.f("ix_state_court_case_county_code"),
        "state_court_case",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_external_id"),
        "state_court_case",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_judge_id"),
        "state_court_case",
        ["judge_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_person_id"),
        "state_court_case",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_state_code"),
        "state_court_case",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incident_type",
            sa.Enum(
                "PRESENT_WITHOUT_INFO",
                "CONTRABAND",
                "DISORDERLY_CONDUCT",
                "ESCAPE",
                "MINOR_OFFENSE",
                "POSITIVE",
                "REPORT",
                "VIOLENCE",
                name="state_incarceration_incident_type",
            ),
            nullable=True,
            comment="The type of incident.",
        ),
        sa.Column(
            "incident_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incident type.",
        ),
        sa.Column(
            "incident_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the incident took place.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "facility",
            sa.String(length=255),
            nullable=True,
            comment="The facility in which the incident took place.",
        ),
        sa.Column(
            "location_within_facility",
            sa.String(length=255),
            nullable=True,
            comment="The more specific location where the incident took place.",
        ),
        sa.Column(
            "incident_details",
            sa.Text(),
            nullable=True,
            comment="Descriptive notes describing the incident.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceartion incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "responding_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["responding_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("incarceration_incident_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="incarceration_incident_external_ids_unique_within_state",
        ),
        comment="The StateIncarcerationIncident object represents any behavioral incidents recorded against a person during a period of incarceration, such as a fight with another incarcerated individual or the possession of contraband. A StateIncarcerationIncident has zero to many StateIncarcerationIncidentOutcome children, indicating any official outcomes (e.g. disciplinary responses) due to the incident.",
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_external_id"),
        "state_incarceration_incident",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_person_id"),
        "state_incarceration_incident",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_responding_officer_id"),
        "state_incarceration_incident",
        ["responding_officer_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_state_code"),
        "state_incarceration_incident",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_period",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incarceration_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                name="state_incarceration_type",
            ),
            nullable=True,
            comment="The type of incarceration the person is serving.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period type.",
        ),
        sa.Column(
            "admission_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "release_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="he code of the county where the person is currently incarcerated.",
        ),
        sa.Column(
            "facility",
            sa.String(length=255),
            nullable=True,
            comment="The facility in which the person is currently incarcerated.",
        ),
        sa.Column(
            "housing_unit",
            sa.String(length=255),
            nullable=True,
            comment="The housing unit within the facility in which the person currently resides.",
        ),
        sa.Column(
            "facility_security_level",
            sa.Enum(
                "MAXIMUM",
                "MEDIUM",
                "MINIMUM",
                name="state_incarceration_facility_security_level",
            ),
            nullable=True,
            comment="The security level of the facility.",
        ),
        sa.Column(
            "facility_security_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the facility security level.",
        ),
        sa.Column(
            "admission_reason",
            sa.Enum(
                "ADMITTED_IN_ERROR",
                "ADMITTED_FROM_SUPERVISION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "NEW_ADMISSION",
                "REVOCATION",
                "SANCTION_ADMISSION",
                "RETURN_FROM_ERRONEOUS_RELEASE",
                "RETURN_FROM_TEMPORARY_RELEASE",
                "RETURN_FROM_ESCAPE",
                "TEMPORARY_CUSTODY",
                "TRANSFER",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "STATUS_CHANGE",
                name="state_incarceration_period_admission_reason",
            ),
            nullable=True,
            comment="The reason the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period admission reason.",
        ),
        sa.Column(
            "projected_release_reason",
            sa.Enum(
                "COMMUTED",
                "COMPASSIONATE",
                "CONDITIONAL_RELEASE",
                "COURT_ORDER",
                "DEATH",
                "ESCAPE",
                "EXECUTION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PARDONED",
                "RELEASED_FROM_ERRONEOUS_ADMISSION",
                "RELEASED_FROM_TEMPORARY_CUSTODY",
                "RELEASED_IN_ERROR",
                "RELEASED_TO_SUPERVISION",
                "SENTENCE_SERVED",
                "TEMPORARY_RELEASE",
                "TRANSFER",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "VACATED",
                "STATUS_CHANGE",
                name="state_incarceration_period_release_reason",
            ),
            nullable=True,
            comment="The reason the person would be released on the current projected date for their earliest possible release.",
        ),
        sa.Column(
            "projected_release_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's project release reason.",
        ),
        sa.Column(
            "release_reason",
            sa.Enum(
                "COMMUTED",
                "COMPASSIONATE",
                "CONDITIONAL_RELEASE",
                "COURT_ORDER",
                "DEATH",
                "ESCAPE",
                "EXECUTION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PARDONED",
                "RELEASED_FROM_ERRONEOUS_ADMISSION",
                "RELEASED_FROM_TEMPORARY_CUSTODY",
                "RELEASED_IN_ERROR",
                "RELEASED_TO_SUPERVISION",
                "SENTENCE_SERVED",
                "TEMPORARY_RELEASE",
                "TRANSFER",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "VACATED",
                "STATUS_CHANGE",
                name="state_incarceration_period_release_reason",
            ),
            nullable=True,
            comment="The reason the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "release_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's release reason.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "GENERAL",
                "PAROLE_BOARD_HOLD",
                "SHOCK_INCARCERATION",
                "TREATMENT_IN_PRISON",
                "TEMPORARY_CUSTODY",
                name="state_specialized_purpose_for_incarceration",
            ),
            nullable=True,
            comment="The specialized purpose for incarceration for this particular incarceration period.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the specialized purpose for incarceration.",
        ),
        sa.Column(
            "custodial_authority",
            sa.Enum(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
            ),
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's custodial authority.",
        ),
        sa.Column(
            "incarceration_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_period_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="incarceration_period_external_ids_unique_within_state",
        ),
        comment="The StateIncarcerationPeriod object represents information about a single period of incarceration, defined as a contiguous stay by a particular person in a particular facility. As a person transfers from facility to facility, these are modeled as multiple abutting incarceration periods. This also extends to temporary transfers to, say, hospitals or court appearances. The sequence of incarceration periods can be squashed into longer conceptual periods (e.g. from the first admission to the final release for a particular sentence) for analytical purposes, such as measuring recidivism and revocation -- this is done with a fine-grained examination of the admission dates, admission reasons, release dates, and release reasons of consecutive incarceration periods.<br /><br />Handling of incarceration periods is a crucial aspect of our platform and involves work in jurisdictional ingest mappings, entity matching, and calculation. Fortunately, this means that we have practice working with varied representations of this information.<br /><br />Incarceration Periods can be children of either Incarceration Sentences or Supervision Sentences, for reasons established in the descriptions of those objects. Incarceration periods have zero to many Parole Decisions as children.",
    )
    op.create_index(
        op.f("ix_state_incarceration_period_county_code"),
        "state_incarceration_period",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_external_id"),
        "state_incarceration_period",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_person_id"),
        "state_incarceration_period",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_state_code"),
        "state_incarceration_period",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_alias",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="A person’s name.",
        ),
        sa.Column(
            "alias_type",
            sa.Enum(
                "AFFILIATION_NAME",
                "ALIAS",
                "GIVEN_NAME",
                "MAIDEN_NAME",
                "NICKNAME",
                name="state_person_alias_type",
            ),
            nullable=True,
            comment="The type of the name alias.",
        ),
        sa.Column(
            "alias_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value for the alias type.",
        ),
        sa.Column(
            "person_alias_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_alias_id"),
        comment="Each StatePersonAlias holds the naming information for an alias for a particular person. Because a given name is an alias of sorts, we copy over the name fields provided on the StatePerson object into a child StatePersonAlias object. An alias is structured similarly to a name, with various different fields, and not a raw string -- systems storing aliases are raw strings should provide those in the full_name field below.",
    )
    op.create_index(
        op.f("ix_state_person_alias_person_id"),
        "state_person_alias",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_alias_state_code"),
        "state_person_alias",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_ethnicity",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "ethnicity",
            sa.Enum("EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"),
            nullable=True,
            comment="A person’s reported ethnicity.",
        ),
        sa.Column(
            "ethnicity_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the ethnicity.",
        ),
        sa.Column(
            "person_ethnicity_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_ethnicity_id"),
        comment="Each StatePersonEthnicity holds a single reported ethnicity for a single person. A StatePerson may have multiple StatePersonEthnicity objects, because they may be multi-ethnic, or because different data sources may report different ethnicities.",
    )
    op.create_index(
        op.f("ix_state_person_ethnicity_person_id"),
        "state_person_ethnicity",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_ethnicity_state_code"),
        "state_person_ethnicity",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_external_id",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "id_type",
            sa.String(length=255),
            nullable=False,
            comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        ),
        sa.Column(
            "person_external_id_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_external_id_id"),
        sa.UniqueConstraint(
            "state_code",
            "id_type",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="person_external_ids_unique_within_type_and_region",
        ),
        comment="Each StatePersonExternalId holds a single external id provided by the source data system being ingested. An external id is a unique identifier for an individual, unique within the scope of the source data system. We include information denoting the source of the id to make this into a globally unique identifier.",
    )
    op.create_index(
        op.f("ix_state_person_external_id_external_id"),
        "state_person_external_id",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_external_id_person_id"),
        "state_person_external_id",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_external_id_state_code"),
        "state_person_external_id",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "current_address",
            sa.Text(),
            nullable=True,
            comment="The current address of the person.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        ),
        sa.Column(
            "birthdate",
            sa.Date(),
            nullable=True,
            comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        ),
        sa.Column(
            "gender",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "FEMALE",
                "MALE",
                "OTHER",
                "TRANS",
                "TRANS_FEMALE",
                "TRANS_MALE",
                name="gender",
            ),
            nullable=True,
            comment="A person’s gender, as reported by the state.",
        ),
        sa.Column(
            "gender_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the person's state-reported gender.",
        ),
        sa.Column(
            "residency_status",
            sa.Enum("HOMELESS", "PERMANENT", "TRANSIENT", name="residency_status"),
            nullable=True,
            comment="A person's reported residency status.",
        ),
        sa.Column(
            "residency_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text used to derive a person's reported residency status.",
        ),
        sa.Column(
            "person_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person information.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("person_history_id"),
        comment="Represents all updates that have made to a(n) StatePerson object over time.",
    )
    op.create_index(
        op.f("ix_state_person_history_birthdate"),
        "state_person_history",
        ["birthdate"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_history_full_name"),
        "state_person_history",
        ["full_name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_history_person_id"),
        "state_person_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_history_state_code"),
        "state_person_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_history_supervising_officer_id"),
        "state_person_history",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_table(
        "state_person_race",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "race",
            sa.Enum(
                "AMERICAN_INDIAN_ALASKAN_NATIVE",
                "ASIAN",
                "BLACK",
                "EXTERNAL_UNKNOWN",
                "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
                "OTHER",
                "WHITE",
                name="race",
            ),
            nullable=True,
            comment="A person’s reported race.",
        ),
        sa.Column(
            "race_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the person's race.",
        ),
        sa.Column(
            "person_race_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_race_id"),
        comment="Each StatePersonRace holds a single reported race for a single person. A StatePerson may have multiple StatePersonRace objects because they may be multi-racial, or because different data sources may report different races.",
    )
    op.create_index(
        op.f("ix_state_person_race_person_id"),
        "state_person_race",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_race_state_code"),
        "state_person_race",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_program_assignment",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateProgramAssignment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "program_id",
            sa.String(length=255),
            nullable=True,
            comment="Unique identifier for a program being assigned to.",
        ),
        sa.Column(
            "program_location_id",
            sa.String(length=255),
            nullable=True,
            comment="The id of where the program takes place.",
        ),
        sa.Column(
            "participation_status",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "DENIED",
                "DISCHARGED",
                "IN_PROGRESS",
                "PENDING",
                "REFUSED",
                name="state_program_assignment_participation_status",
            ),
            nullable=False,
            comment="The status of the person's participation in the program.",
        ),
        sa.Column(
            "participation_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the participation status.",
        ),
        sa.Column(
            "discharge_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "ABSCONDED",
                "ADVERSE_TERMINATION",
                "COMPLETED",
                "MOVED",
                "OPTED_OUT",
                "PROGRAM_TRANSFER",
                "REINCARCERATED",
                name="state_program_assignment_discharge_reason",
            ),
            nullable=True,
            comment="The reason the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "discharge_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value for the discharge reason.",
        ),
        sa.Column(
            "referral_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was referred to the program, if applicable.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person started the program, if applicable.",
        ),
        sa.Column(
            "discharge_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "referral_metadata",
            sa.Text(),
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular referral. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "program_assignment_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) program assignment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "referring_agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["referring_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("program_assignment_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="program_assignment_external_ids_unique_within_state",
        ),
        comment="The StateProgramAssignment object represents information about the assignment of a person to some form of rehabilitative programming -- and their participation in the program -- intended to address specific needs of the person. People can be assigned to programs while under various forms of custody, principally while incarcerated or under supervision. These programs can be administered by the agency/government, by a quasi-governmental organization, by a private third party, or any other number of service providers. The programming-related portion of our schema is still being constructed and will be added to in the near future.",
    )
    op.create_index(
        op.f("ix_state_program_assignment_external_id"),
        "state_program_assignment",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_person_id"),
        "state_program_assignment",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_referring_agent_id"),
        "state_program_assignment",
        ["referring_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_state_code"),
        "state_program_assignment",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_sentence_group",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "date_imposed", sa.Date(), nullable=True, comment="DEPRECATED. See #5411."
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "is_life", sa.Boolean(), nullable=True, comment="DEPRECATED. See #5411."
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("sentence_group_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="sentence_group_external_ids_unique_within_state",
        ),
        comment="DEPRECATED. See #5411.",
    )
    op.create_index(
        op.f("ix_state_sentence_group_county_code"),
        "state_sentence_group",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_external_id"),
        "state_sentence_group",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_person_id"),
        "state_sentence_group",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_state_code"),
        "state_sentence_group",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_contact",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionContact, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "contact_date",
            sa.Date(),
            nullable=True,
            comment="The date when this contact happened.",
        ),
        sa.Column(
            "contact_reason",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "EMERGENCY_CONTACT",
                "GENERAL_CONTACT",
                "INITIAL_CONTACT",
                name="state_supervision_contact_reason",
            ),
            nullable=True,
            comment="The reason why this contact took place.",
        ),
        sa.Column(
            "contact_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact reason.",
        ),
        sa.Column(
            "contact_type",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COLLATERAL",
                "DIRECT",
                "BOTH_COLLATERAL_AND_DIRECT",
                name="state_supervision_contact_type",
            ),
            nullable=True,
            comment="The type of contact which took place.",
        ),
        sa.Column(
            "contact_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact type.",
        ),
        sa.Column(
            "contact_method",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "IN_PERSON",
                "TELEPHONE",
                "VIRTUAL",
                "WRITTEN_MESSAGE",
                name="state_supervision_contact_method",
            ),
            nullable=True,
            comment="The method used to perform the contact.",
        ),
        sa.Column(
            "contact_method_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact method.",
        ),
        sa.Column(
            "location",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COURT",
                "FIELD",
                "JAIL",
                "PLACE_OF_EMPLOYMENT",
                "RESIDENCE",
                "SUPERVISION_OFFICE",
                "TREATMENT_PROVIDER",
                "LAW_ENFORCEMENT_AGENCY",
                "PAROLE_COMMISSION",
                "ALTERNATIVE_WORK_SITE",
                name="state_supervision_contact_location",
            ),
            nullable=True,
            comment="Where this contact took place.",
        ),
        sa.Column(
            "location_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact location.",
        ),
        sa.Column(
            "resulted_in_arrest",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this contact resulted in the person's arrest.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "ATTEMPTED",
                "COMPLETED",
                name="state_supervision_contact_status",
            ),
            nullable=True,
            comment="The current status of this contact.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact status.",
        ),
        sa.Column(
            "verified_employment",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the person's current employment status was verified at this contact.",
        ),
        sa.Column(
            "supervision_contact_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision contact, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "contacted_agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["contacted_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("supervision_contact_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="supervision_contact_external_ids_unique_within_state",
        ),
        comment="The StateSupervisionContact object represents information about a point of contact between a person under supervision and some agent representing the department, typically a supervising officer. These may include face-to-face meetings, phone calls, emails, or other such media. At these contacts, specific things may occur, such as referral to programming or written warnings or even arrest, but any and all events that happen as part of a single contact are modeled as one supervision contact. StateSupervisionPeriods have zero to many StateSupervisionContacts as children, and each StateSupervisionContact has one to many StateSupervisionPeriods as parents. This is because a given person may be serving multiple periods of supervision simultaneously in rare cases, and a given point of contact may apply to both.",
    )
    op.create_index(
        op.f("ix_state_supervision_contact_contacted_agent_id"),
        "state_supervision_contact",
        ["contacted_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_external_id"),
        "state_supervision_contact",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_person_id"),
        "state_supervision_contact",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_state_code"),
        "state_supervision_contact",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_period",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "supervision_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "INFORMAL_PROBATION",
                "INVESTIGATION",
                "PAROLE",
                "PROBATION",
                "DUAL",
                "COMMUNITY_CONFINEMENT",
                name="state_supervision_period_supervision_type",
            ),
            nullable=True,
            comment="The type of supervision the person is serving during this time period.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period supervision type.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person began this period of supervision.",
        ),
        sa.Column(
            "termination_date",
            sa.Date(),
            nullable=True,
            comment="The date the period of supervision was terminated, either positively or negatively.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county where the person is currently supervised.",
        ),
        sa.Column(
            "supervision_site",
            sa.String(length=255),
            nullable=True,
            comment="A single string encoding the location (i.e. office/region/district) this person is being supervised out of. This field may eventually be split into multiple to better encode supervision org structure. See #3829.",
        ),
        sa.Column(
            "admission_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "CONDITIONAL_RELEASE",
                "COURT_SENTENCE",
                "INVESTIGATION",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_FROM_SUSPENSION",
                name="state_supervision_period_admission_reason",
            ),
            nullable=True,
            comment="The reason the person was admitted to this particular period of supervision.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's admission reason.",
        ),
        sa.Column(
            "termination_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "COMMUTED",
                "DEATH",
                "DISCHARGE",
                "DISMISSED",
                "EXPIRATION",
                "INVESTIGATION",
                "PARDONED",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_TO_INCARCERATION",
                "REVOCATION",
                "SUSPENSION",
                name="state_supervision_period_termination_reason",
            ),
            nullable=True,
            comment="The reason the period of supervision was terminated.",
        ),
        sa.Column(
            "termination_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's termination reason.",
        ),
        sa.Column(
            "supervision_level",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "MINIMUM",
                "MEDIUM",
                "HIGH",
                "MAXIMUM",
                "INCARCERATED",
                "IN_CUSTODY",
                "DIVERSION",
                "INTERSTATE_COMPACT",
                "LIMITED",
                "ELECTRONIC_MONITORING_ONLY",
                "UNSUPERVISED",
                "UNASSIGNED",
                name="state_supervision_level",
            ),
            nullable=True,
            comment="The level of supervision the person is receiving, i.e. an analog to the security level of incarceration, indicating frequency of contact, strictness of constraints, etc.",
        ),
        sa.Column(
            "supervision_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's supervision level.",
        ),
        sa.Column(
            "conditions",
            sa.Text(),
            nullable=True,
            comment="The conditions of this period of supervision which the person must follow to avoid a disciplinary response.",
        ),
        sa.Column(
            "custodial_authority",
            sa.Enum(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
            ),
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's custodial authority.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_period_id"),
        comment="The StateSupervisionPeriod object represents information about a single period of supervision, defined as a contiguous period of custody for a particular person under a particular jurisdiction. As a person transfers between supervising locations, these are modeled as multiple abutting supervision periods. Multiple periods of supervision for a particular person may be overlapping, due to extended periods of supervision that are temporarily interrupted by, say, periods of incarceration, or periods of supervision stemming from different charges.<br/><br />StateSupervisionPeriods can be children of either StateIncarcerationSentences or StateSupervisionSentences, for reasons established in the descriptions of those objects.<br /><br />StateSupervisionPeriods have zero to many StateSupervisionViolations as children.",
    )
    op.create_index(
        op.f("ix_state_supervision_period_county_code"),
        "state_supervision_period",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_external_id"),
        "state_supervision_period",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_person_id"),
        "state_supervision_period",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_state_code"),
        "state_supervision_period",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_supervising_officer_id"),
        "state_supervision_period",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        ),
        sa.Column(
            "violation_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the violation took place.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "is_violent",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation was violent in nature.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("supervision_violation_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="supervision_violation_external_ids_unique_within_state",
        ),
        comment="The StateSupervisionViolation object represents any violations recorded against a person during a period of supervision, such as technical violation or a new offense. A StateSupervisionViolation has zero to many StateSupervisionViolationResponse children, indicating any official response to the violation, e.g. a disciplinary response such as a revocation back to prison or extension of supervision.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_external_id"),
        "state_supervision_violation",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_person_id"),
        "state_supervision_violation",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_state_code"),
        "state_supervision_violation",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_assessment_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "assessment_class",
            sa.Enum(
                "MENTAL_HEALTH",
                "RISK",
                "SECURITY_CLASSIFICATION",
                "SEX_OFFENSE",
                "SOCIAL",
                "SUBSTANCE_ABUSE",
                name="state_assessment_class",
            ),
            nullable=True,
            comment="The classification of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_class_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the classification of assessment.",
        ),
        sa.Column(
            "assessment_type",
            sa.Enum(
                "ASI",
                "CSSM",
                "HIQ",
                "LSIR",
                "PA_RST",
                "PSA",
                "SORAC",
                "STATIC_99",
                "TCU_DRUG_SCREEN",
                "ORAS_COMMUNITY_SUPERVISION",
                "ORAS_COMMUNITY_SUPERVISION_SCREENING",
                "ORAS_MISDEMEANOR_ASSESSMENT",
                "ORAS_MISDEMEANOR_SCREENING",
                "ORAS_PRE_TRIAL",
                "ORAS_PRISON_SCREENING",
                "ORAS_PRISON_INTAKE",
                "ORAS_REENTRY",
                "ORAS_STATIC",
                "ORAS_SUPPLEMENTAL_REENTRY",
                "INTERNAL_UNKNOWN",
                name="state_assessment_type",
            ),
            nullable=True,
            comment="The specific type of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the assessment type.",
        ),
        sa.Column(
            "assessment_date",
            sa.Date(),
            nullable=True,
            comment="The date the assessment was conducted.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "assessment_score",
            sa.Integer(),
            nullable=True,
            comment="The final score output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "LOW",
                "LOW_MEDIUM",
                "MEDIUM",
                "MEDIUM_HIGH",
                "MODERATE",
                "HIGH",
                "VERY_HIGH",
                name="state_assessment_level",
            ),
            nullable=True,
            comment="The final level output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the assessment level",
        ),
        sa.Column(
            "assessment_metadata",
            sa.Text(),
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "assessment_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "assessment_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state assessment information.",
        ),
        sa.Column(
            "conducting_agent_id",
            sa.Integer(),
            nullable=True,
            comment="The id of the agent conducting this assessment.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["assessment_id"],
            ["state_assessment.assessment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["conducting_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("assessment_history_id"),
        comment="Represents all updates that have made to a(n) StateAssessment object over time.",
    )
    op.create_index(
        op.f("ix_state_assessment_history_assessment_id"),
        "state_assessment_history",
        ["assessment_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_history_conducting_agent_id"),
        "state_assessment_history",
        ["conducting_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_history_external_id"),
        "state_assessment_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_history_person_id"),
        "state_assessment_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_assessment_history_state_code"),
        "state_assessment_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_charge",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACQUITTED",
                "COMPLETED_SENTENCE",
                "CONVICTED",
                "DROPPED",
                "INFERRED_DROPPED",
                "EXTERNAL_UNKNOWN",
                "PENDING",
                "PRETRIAL",
                "SENTENCED",
                "PRESENT_WITHOUT_INFO",
                "REMOVED_WITHOUT_INFO",
                name="charge_status",
            ),
            nullable=False,
            comment="The status of the charge.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the status of the charge.",
        ),
        sa.Column(
            "offense_date",
            sa.Date(),
            nullable=True,
            comment="The date of the alleged offense that led to this charge.",
        ),
        sa.Column(
            "date_charged",
            sa.Date(),
            nullable=True,
            comment="The date the person was charged with the alleged offense.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the charge was brought.",
        ),
        sa.Column(
            "ncic_code",
            sa.String(length=255),
            nullable=True,
            comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        ),
        sa.Column(
            "statute",
            sa.String(length=255),
            nullable=True,
            comment="The identifier of the charge in the state or federal code.",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="A text description of the charge.",
        ),
        sa.Column(
            "attempted",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        ),
        sa.Column(
            "classification_type",
            sa.Enum(
                "CIVIL",
                "EXTERNAL_UNKNOWN",
                "FELONY",
                "INFRACTION",
                "MISDEMEANOR",
                "OTHER",
                name="state_charge_classification_type",
            ),
            nullable=True,
            comment="Charge classification.",
        ),
        sa.Column(
            "classification_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the charge classification.",
        ),
        sa.Column(
            "classification_subtype",
            sa.String(length=255),
            nullable=True,
            comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        ),
        sa.Column(
            "offense_type",
            sa.String(length=255),
            nullable=True,
            comment="The type of offense associated with the charge.",
        ),
        sa.Column(
            "is_violent",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was for a violent crime or not.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "counts",
            sa.Integer(),
            nullable=True,
            comment="The number of counts of this charge which are being brought against the person.",
        ),
        sa.Column(
            "charge_notes",
            sa.Text(),
            nullable=True,
            comment="Free text containing other information about a charge.",
        ),
        sa.Column(
            "charging_entity",
            sa.String(length=255),
            nullable=True,
            comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        ),
        sa.Column(
            "is_controlling",
            sa.Boolean(),
            nullable=True,
            comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        ),
        sa.Column(
            "charge_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "court_case_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["court_case_id"],
            ["state_court_case.court_case_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("charge_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="charge_external_ids_unique_within_state",
        ),
        comment="The StateCharge object holds information on a single charge that a person has been accused of. A single StateCharge can reference multiple Incarceration/Supervision Sentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single Incarceration/Supervision Sentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Supervision/Incarceration Sentence type is many:many. Each StateCharge is brought to trial as part of no more than a single StateCourtCase.",
    )
    op.create_index(
        op.f("ix_state_charge_county_code"),
        "state_charge",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_court_case_id"),
        "state_charge",
        ["court_case_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_external_id"),
        "state_charge",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_person_id"), "state_charge", ["person_id"], unique=False
    )
    op.create_index(
        op.f("ix_state_charge_state_code"), "state_charge", ["state_code"], unique=False
    )
    op.create_table(
        "state_court_case_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                name="state_court_case_status",
            ),
            nullable=True,
            comment="The current status of the case.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the current status of the case.",
        ),
        sa.Column(
            "court_type",
            sa.Enum("PRESENT_WITHOUT_INFO", name="state_court_type"),
            nullable=True,
            comment="The type of court this charge will be/was heard in.",
        ),
        sa.Column(
            "court_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the court type.",
        ),
        sa.Column(
            "date_convicted",
            sa.Date(),
            nullable=True,
            comment="The date the person was convicted, if applicable.",
        ),
        sa.Column(
            "next_court_date",
            sa.Date(),
            nullable=True,
            comment="Date of the next scheduled court appearance for this case, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "judicial_district_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the judicial district under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "court_case_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "court_case_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
        sa.Column(
            "judge_id",
            sa.Integer(),
            nullable=True,
            comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["court_case_id"],
            ["state_court_case.court_case_id"],
        ),
        sa.ForeignKeyConstraint(
            ["judge_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("court_case_history_id"),
        comment="The history table for StateCourtCase. Represents the historical state of a StateCourtCase.",
    )
    op.create_index(
        op.f("ix_state_court_case_history_county_code"),
        "state_court_case_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_history_court_case_id"),
        "state_court_case_history",
        ["court_case_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_history_external_id"),
        "state_court_case_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_history_judge_id"),
        "state_court_case_history",
        ["judge_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_history_person_id"),
        "state_court_case_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_court_case_history_state_code"),
        "state_court_case_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incident_type",
            sa.Enum(
                "PRESENT_WITHOUT_INFO",
                "CONTRABAND",
                "DISORDERLY_CONDUCT",
                "ESCAPE",
                "MINOR_OFFENSE",
                "POSITIVE",
                "REPORT",
                "VIOLENCE",
                name="state_incarceration_incident_type",
            ),
            nullable=True,
            comment="The type of incident.",
        ),
        sa.Column(
            "incident_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incident type.",
        ),
        sa.Column(
            "incident_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the incident took place.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "facility",
            sa.String(length=255),
            nullable=True,
            comment="The facility in which the incident took place.",
        ),
        sa.Column(
            "location_within_facility",
            sa.String(length=255),
            nullable=True,
            comment="The more specific location where the incident took place.",
        ),
        sa.Column(
            "incident_details",
            sa.Text(),
            nullable=True,
            comment="Descriptive notes describing the incident.",
        ),
        sa.Column(
            "incarceration_incident_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        ),
        sa.Column(
            "responding_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_id"],
            ["state_incarceration_incident.incarceration_incident_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["responding_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("incarceration_incident_history_id"),
        comment="Represents all updates that have made to a(n) StateIncarcerationIncident object over time.",
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_history_external_id"),
        "state_incarceration_incident_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_history_incarceration_incident_id"),
        "state_incarceration_incident_history",
        ["incarceration_incident_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_history_person_id"),
        "state_incarceration_incident_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_history_responding_officer_id"),
        "state_incarceration_incident_history",
        ["responding_officer_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_history_state_code"),
        "state_incarceration_incident_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident_outcome",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        ),
        sa.Column(
            "outcome_type",
            sa.Enum(
                "CELL_CONFINEMENT",
                "DISCIPLINARY_LABOR",
                "DISMISSED",
                "EXTERNAL_PROSECUTION",
                "FINANCIAL_PENALTY",
                "GOOD_TIME_LOSS",
                "MISCELLANEOUS",
                "NOT_GUILTY",
                "PRIVILEGE_LOSS",
                "RESTRICTED_CONFINEMENT",
                "SOLITARY",
                "TREATMENT",
                "WARNING",
                name="state_incarceration_incident_outcome_type",
            ),
            nullable=True,
            comment="The type of outcome.",
        ),
        sa.Column(
            "outcome_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the outcome type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "date_effective",
            sa.Date(),
            nullable=True,
            comment="The date on which the outcome takes effect.",
        ),
        sa.Column(
            "hearing_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the hearing for the incident is taking place.",
        ),
        sa.Column(
            "report_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the incident was reported.",
        ),
        sa.Column(
            "outcome_description",
            sa.String(length=255),
            nullable=True,
            comment="Descriptive notes describing the outcome.",
        ),
        sa.Column(
            "punishment_length_days",
            sa.Integer(),
            nullable=True,
            comment="The length of any durational, punishment-focused outcome.",
        ),
        sa.Column(
            "incarceration_incident_outcome_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_id"],
            ["state_incarceration_incident.incarceration_incident_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_incident_outcome_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="incarceration_incident_outcome_external_ids_unique_within_state",
        ),
        comment="The StateIncarcerationIncidentOutcome object represents the outcomes in response to a particular StateIncarcerationIncident. These can be positive, neutral, or negative, but they should never be empty or null -- an incident that has no outcomes should simply have no StateIncarcerationIncidentOutcome children objects.",
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_external_id"),
        "state_incarceration_incident_outcome",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_incarceration_incident_id"),
        "state_incarceration_incident_outcome",
        ["incarceration_incident_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_person_id"),
        "state_incarceration_incident_outcome",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_state_code"),
        "state_incarceration_incident_outcome",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_period_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incarceration_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                name="state_incarceration_type",
            ),
            nullable=True,
            comment="The type of incarceration the person is serving.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period type.",
        ),
        sa.Column(
            "admission_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "release_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="he code of the county where the person is currently incarcerated.",
        ),
        sa.Column(
            "facility",
            sa.String(length=255),
            nullable=True,
            comment="The facility in which the person is currently incarcerated.",
        ),
        sa.Column(
            "housing_unit",
            sa.String(length=255),
            nullable=True,
            comment="The housing unit within the facility in which the person currently resides.",
        ),
        sa.Column(
            "facility_security_level",
            sa.Enum(
                "MAXIMUM",
                "MEDIUM",
                "MINIMUM",
                name="state_incarceration_facility_security_level",
            ),
            nullable=True,
            comment="The security level of the facility.",
        ),
        sa.Column(
            "facility_security_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the facility security level.",
        ),
        sa.Column(
            "admission_reason",
            sa.Enum(
                "ADMITTED_IN_ERROR",
                "ADMITTED_FROM_SUPERVISION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "NEW_ADMISSION",
                "REVOCATION",
                "SANCTION_ADMISSION",
                "RETURN_FROM_ERRONEOUS_RELEASE",
                "RETURN_FROM_TEMPORARY_RELEASE",
                "RETURN_FROM_ESCAPE",
                "TEMPORARY_CUSTODY",
                "TRANSFER",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "STATUS_CHANGE",
                name="state_incarceration_period_admission_reason",
            ),
            nullable=True,
            comment="The reason the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period admission reason.",
        ),
        sa.Column(
            "projected_release_reason",
            sa.Enum(
                "COMMUTED",
                "COMPASSIONATE",
                "CONDITIONAL_RELEASE",
                "COURT_ORDER",
                "DEATH",
                "ESCAPE",
                "EXECUTION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PARDONED",
                "RELEASED_FROM_ERRONEOUS_ADMISSION",
                "RELEASED_FROM_TEMPORARY_CUSTODY",
                "RELEASED_IN_ERROR",
                "RELEASED_TO_SUPERVISION",
                "SENTENCE_SERVED",
                "TEMPORARY_RELEASE",
                "TRANSFER",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "VACATED",
                "STATUS_CHANGE",
                name="state_incarceration_period_release_reason",
            ),
            nullable=True,
            comment="The reason the person would be released on the current projected date for their earliest possible release.",
        ),
        sa.Column(
            "projected_release_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's project release reason.",
        ),
        sa.Column(
            "release_reason",
            sa.Enum(
                "COMMUTED",
                "COMPASSIONATE",
                "CONDITIONAL_RELEASE",
                "COURT_ORDER",
                "DEATH",
                "ESCAPE",
                "EXECUTION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PARDONED",
                "RELEASED_FROM_ERRONEOUS_ADMISSION",
                "RELEASED_FROM_TEMPORARY_CUSTODY",
                "RELEASED_IN_ERROR",
                "RELEASED_TO_SUPERVISION",
                "SENTENCE_SERVED",
                "TEMPORARY_RELEASE",
                "TRANSFER",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "VACATED",
                "STATUS_CHANGE",
                name="state_incarceration_period_release_reason",
            ),
            nullable=True,
            comment="The reason the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "release_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's release reason.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "GENERAL",
                "PAROLE_BOARD_HOLD",
                "SHOCK_INCARCERATION",
                "TREATMENT_IN_PRISON",
                "TEMPORARY_CUSTODY",
                name="state_specialized_purpose_for_incarceration",
            ),
            nullable=True,
            comment="The specialized purpose for incarceration for this particular incarceration period.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the specialized purpose for incarceration.",
        ),
        sa.Column(
            "custodial_authority",
            sa.Enum(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
            ),
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the incarceration period's custodial authority.",
        ),
        sa.Column(
            "incarceration_period_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_period_id"],
            ["state_incarceration_period.incarceration_period_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_period_history_id"),
        comment="Represents all updates that have made to a(n) StateIncarcerationPeriod object over time.",
    )
    op.create_index(
        op.f("ix_state_incarceration_period_history_county_code"),
        "state_incarceration_period_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_history_external_id"),
        "state_incarceration_period_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_history_incarceration_period_id"),
        "state_incarceration_period_history",
        ["incarceration_period_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_history_person_id"),
        "state_incarceration_period_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_period_history_state_code"),
        "state_incarceration_period_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_sentence",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the status of the sentence.",
        ),
        sa.Column(
            "incarceration_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                name="state_incarceration_type",
            ),
            nullable=True,
            comment="The type of incarceration the person is being sentenced to.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the type of incarceration of this sentence.",
        ),
        sa.Column(
            "date_imposed",
            sa.Date(),
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date this sentence started.",
        ),
        sa.Column(
            "projected_min_release_date",
            sa.Date(),
            nullable=True,
            comment="The earliest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "projected_max_release_date",
            sa.Date(),
            nullable=True,
            comment="The latest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "completion_date",
            sa.Date(),
            nullable=True,
            comment="The date this sentence has been completed.",
        ),
        sa.Column(
            "parole_eligibility_date",
            sa.Date(),
            nullable=True,
            comment="The first date under which the person becomes eligible for parole under the terms of this sentence.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The code of the state under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="The minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="The maximum duration of this sentence in days.",
        ),
        sa.Column(
            "is_life",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is a life sentence.",
        ),
        sa.Column(
            "is_capital_punishment",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is a sentence for the death penalty.",
        ),
        sa.Column(
            "parole_possible",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the person may be released to parole under the terms of this sentence.",
        ),
        sa.Column(
            "initial_time_served_days",
            sa.Integer(),
            nullable=True,
            comment="The amount of any time already served (in days), to possible be credited against the overall sentence duration.",
        ),
        sa.Column(
            "good_time_days",
            sa.Integer(),
            nullable=True,
            comment="Any good time (in days) the person has credited against this sentence due to good conduct, a.k.a. time off for good behavior, if applicable.",
        ),
        sa.Column(
            "earned_time_days",
            sa.Integer(),
            nullable=True,
            comment="Any earned time (in days) the person has credited against this sentence due to participation in programming designed to reduce the likelihood of re-offense, if applicable.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_sentence_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="incarceration_sentence_external_ids_unique_within_state",
        ),
        comment="The StateIncarcerationSentence object represents information about a single sentence to a period of incarceration imposed as part of a group of related sentences. Multiple distinct, related sentences to incarceration should be captured as separate incarceration sentence objects within the same group. These sentences may, for example, be concurrent or consecutive to one another. Like the sentence group, the StateIncarcerationSentence represents only the imposition of some sentence terms, not an actual period of incarceration experienced by the person.<br /><br />A StateIncarcerationSentence can reference many charges, and each charge can reference many sentences -- the relationship is many:many.<br /><br />A StateIncarcerationSentence can have multiple child StateIncarcerationPeriods. It can also have child StateSupervisionPeriods since a sentence to incarceration may result in a person being paroled, for example. In some jurisdictions, this would be modeled as distinct sentences of incarceration and supervision, but this is not universal.",
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_county_code"),
        "state_incarceration_sentence",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_external_id"),
        "state_incarceration_sentence",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_person_id"),
        "state_incarceration_sentence",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_sentence_group_id"),
        "state_incarceration_sentence",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_state_code"),
        "state_incarceration_sentence",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_parole_decision",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateParoleDecision, unique within the scope of the source data system.",
        ),
        sa.Column(
            "decision_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the decision was made.",
        ),
        sa.Column(
            "corrective_action_deadline",
            sa.Date(),
            nullable=True,
            comment="The date by which any corrective actions must be taken to ensure parole is granted, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the parole hearing is convened.",
        ),
        sa.Column(
            "decision_outcome",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PAROLE_DENIED",
                "PAROLE_GRANTED",
                name="state_parole_decision_outcome",
            ),
            nullable=True,
            comment="The outcome of the decision.",
        ),
        sa.Column(
            "decision_outcome_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the outcome of the decision.",
        ),
        sa.Column(
            "decision_reasoning",
            sa.String(length=255),
            nullable=True,
            comment="Descriptive notes describing the reasoning behind the decision.",
        ),
        sa.Column(
            "corrective_action",
            sa.String(length=255),
            nullable=True,
            comment="Any corrective actions that must be taken by the person to ensure their parole is granted, if applicable.",
        ),
        sa.Column(
            "parole_decision_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) parole decision, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "incarceration_period_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_period_id"],
            ["state_incarceration_period.incarceration_period_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("parole_decision_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="parole_decision_external_ids_unique_within_state",
        ),
        comment="The StateParoleDecision object represents information about a particular parole hearing deciding whether or not to grant parole to a currently incarcerated person. This includes information about the context of the hearing and also its final decision/outcome.",
    )
    op.create_index(
        op.f("ix_state_parole_decision_county_code"),
        "state_parole_decision",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_external_id"),
        "state_parole_decision",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_incarceration_period_id"),
        "state_parole_decision",
        ["incarceration_period_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_person_id"),
        "state_parole_decision",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_state_code"),
        "state_parole_decision",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_alias_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.String(length=255),
            nullable=True,
            comment="A person’s name.",
        ),
        sa.Column(
            "alias_type",
            sa.Enum(
                "AFFILIATION_NAME",
                "ALIAS",
                "GIVEN_NAME",
                "MAIDEN_NAME",
                "NICKNAME",
                name="state_person_alias_type",
            ),
            nullable=True,
            comment="The type of the name alias.",
        ),
        sa.Column(
            "alias_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value for the alias type.",
        ),
        sa.Column(
            "person_alias_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_alias_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person alias, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person alias information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_alias_id"],
            ["state_person_alias.person_alias_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_alias_history_id"),
        comment="Represents all updates that have made to a(n) StatePersonAlias object over time.",
    )
    op.create_index(
        op.f("ix_state_person_alias_history_person_alias_id"),
        "state_person_alias_history",
        ["person_alias_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_alias_history_person_id"),
        "state_person_alias_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_alias_history_state_code"),
        "state_person_alias_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_ethnicity_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "ethnicity",
            sa.Enum("EXTERNAL_UNKNOWN", "HISPANIC", "NOT_HISPANIC", name="ethnicity"),
            nullable=True,
            comment="A person’s reported ethnicity.",
        ),
        sa.Column(
            "ethnicity_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the ethnicity.",
        ),
        sa.Column(
            "person_ethnicity_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_ethnicity_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person ethnicity information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_ethnicity_id"],
            ["state_person_ethnicity.person_ethnicity_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_ethnicity_history_id"),
        comment="Represents all updates that have made to a(n) StatePersonEthnicity object over time.",
    )
    op.create_index(
        op.f("ix_state_person_ethnicity_history_person_ethnicity_id"),
        "state_person_ethnicity_history",
        ["person_ethnicity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_ethnicity_history_person_id"),
        "state_person_ethnicity_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_ethnicity_history_state_code"),
        "state_person_ethnicity_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_external_id_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "id_type",
            sa.String(length=255),
            nullable=False,
            comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        ),
        sa.Column(
            "person_external_id_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_external_id_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person external id information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_external_id_id"],
            ["state_person_external_id.person_external_id_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("person_external_id_history_id"),
        comment="Represents all updates that have made to a(n) StatePersonExternalId object over time.",
    )
    op.create_index(
        op.f("ix_state_person_external_id_history_external_id"),
        "state_person_external_id_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_external_id_history_person_external_id_id"),
        "state_person_external_id_history",
        ["person_external_id_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_external_id_history_person_id"),
        "state_person_external_id_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_external_id_history_state_code"),
        "state_person_external_id_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_person_race_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "race",
            sa.Enum(
                "AMERICAN_INDIAN_ALASKAN_NATIVE",
                "ASIAN",
                "BLACK",
                "EXTERNAL_UNKNOWN",
                "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
                "OTHER",
                "WHITE",
                name="race",
            ),
            nullable=True,
            comment="A person’s reported race.",
        ),
        sa.Column(
            "race_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the person's race.",
        ),
        sa.Column(
            "person_race_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_race_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person race information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_race_id"],
            ["state_person_race.person_race_id"],
        ),
        sa.PrimaryKeyConstraint("person_race_history_id"),
        comment="Represents all updates that have made to a(n) StatePersonRace object over time.",
    )
    op.create_index(
        op.f("ix_state_person_race_history_person_id"),
        "state_person_race_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_race_history_person_race_id"),
        "state_person_race_history",
        ["person_race_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_person_race_history_state_code"),
        "state_person_race_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_program_assignment_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateProgramAssignment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "program_id",
            sa.String(length=255),
            nullable=True,
            comment="Unique identifier for a program being assigned to.",
        ),
        sa.Column(
            "program_location_id",
            sa.String(length=255),
            nullable=True,
            comment="The id of where the program takes place.",
        ),
        sa.Column(
            "participation_status",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "DENIED",
                "DISCHARGED",
                "IN_PROGRESS",
                "PENDING",
                "REFUSED",
                name="state_program_assignment_participation_status",
            ),
            nullable=False,
            comment="The status of the person's participation in the program.",
        ),
        sa.Column(
            "participation_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the participation status.",
        ),
        sa.Column(
            "discharge_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "ABSCONDED",
                "ADVERSE_TERMINATION",
                "COMPLETED",
                "MOVED",
                "OPTED_OUT",
                "PROGRAM_TRANSFER",
                "REINCARCERATED",
                name="state_program_assignment_discharge_reason",
            ),
            nullable=True,
            comment="The reason the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "discharge_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value for the discharge reason.",
        ),
        sa.Column(
            "referral_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was referred to the program, if applicable.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person started the program, if applicable.",
        ),
        sa.Column(
            "discharge_date",
            sa.Date(),
            nullable=True,
            comment="The date the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "referral_metadata",
            sa.Text(),
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular referral. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "program_assignment_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "program_assignment_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) program assignment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant program assignment information.",
        ),
        sa.Column(
            "referring_agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["program_assignment_id"],
            ["state_program_assignment.program_assignment_id"],
        ),
        sa.ForeignKeyConstraint(
            ["referring_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.PrimaryKeyConstraint("program_assignment_history_id"),
        comment="Represents all updates that have made to a(n) StateProgramAssignment object over time.",
    )
    op.create_index(
        op.f("ix_state_program_assignment_history_external_id"),
        "state_program_assignment_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_history_person_id"),
        "state_program_assignment_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_history_program_assignment_id"),
        "state_program_assignment_history",
        ["program_assignment_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_history_referring_agent_id"),
        "state_program_assignment_history",
        ["referring_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_program_assignment_history_state_code"),
        "state_program_assignment_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_sentence_group_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "date_imposed", sa.Date(), nullable=True, comment="DEPRECATED. See #5411."
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "is_life", sa.Boolean(), nullable=True, comment="DEPRECATED. See #5411."
        ),
        sa.Column(
            "sentence_group_history_id",
            sa.Integer(),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
        ),
        sa.PrimaryKeyConstraint("sentence_group_history_id"),
        comment="DEPRECATED. See #5411.",
    )
    op.create_index(
        op.f("ix_state_sentence_group_history_county_code"),
        "state_sentence_group_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_history_external_id"),
        "state_sentence_group_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_history_person_id"),
        "state_sentence_group_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_history_sentence_group_id"),
        "state_sentence_group_history",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_group_history_state_code"),
        "state_sentence_group_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_case_type_entry",
        sa.Column(
            "case_type",
            sa.Enum(
                "ALCOHOL_DRUG",
                "DOMESTIC_VIOLENCE",
                "DRUG_COURT",
                "FAMILY_COURT",
                "GENERAL",
                "MENTAL_HEALTH_COURT",
                "SERIOUS_MENTAL_ILLNESS",
                "SEX_OFFENSE",
                "VETERANS_COURT",
                name="state_supervision_case_type",
            ),
            nullable=True,
            comment="The type of case that describes the associated period of supervision.",
        ),
        sa.Column(
            "case_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the case type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "supervision_case_type_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) case type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionCaseTypeEntry, unique within the scope of the source data system.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision period information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_period_id"],
            ["state_supervision_period.supervision_period_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_case_type_entry_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="supervision_case_type_entry_external_ids_unique_within_state",
        ),
        comment="The StateSupervisionCaseTypeEntry object represents a particular case type that applies to this period of supervision. A case type implies certain conditions of supervision that may apply, or certain levels or intensity of supervision, or certain kinds of specialized courts that generated the sentence to supervision, or even that the person being supervised may be supervised by particular kinds of officers with particular types of caseloads they are responsible for. A StateSupervisionPeriod may have zero to many distinct case types.",
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_external_id"),
        "state_supervision_case_type_entry",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_person_id"),
        "state_supervision_case_type_entry",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_state_code"),
        "state_supervision_case_type_entry",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_supervision_period_id"),
        "state_supervision_case_type_entry",
        ["supervision_period_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_contact_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionContact, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "contact_date",
            sa.Date(),
            nullable=True,
            comment="The date when this contact happened.",
        ),
        sa.Column(
            "contact_reason",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "EMERGENCY_CONTACT",
                "GENERAL_CONTACT",
                "INITIAL_CONTACT",
                name="state_supervision_contact_reason",
            ),
            nullable=True,
            comment="The reason why this contact took place.",
        ),
        sa.Column(
            "contact_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact reason.",
        ),
        sa.Column(
            "contact_type",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COLLATERAL",
                "DIRECT",
                "BOTH_COLLATERAL_AND_DIRECT",
                name="state_supervision_contact_type",
            ),
            nullable=True,
            comment="The type of contact which took place.",
        ),
        sa.Column(
            "contact_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact type.",
        ),
        sa.Column(
            "contact_method",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "IN_PERSON",
                "TELEPHONE",
                "VIRTUAL",
                "WRITTEN_MESSAGE",
                name="state_supervision_contact_method",
            ),
            nullable=True,
            comment="The method used to perform the contact.",
        ),
        sa.Column(
            "contact_method_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact method.",
        ),
        sa.Column(
            "location",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COURT",
                "FIELD",
                "JAIL",
                "PLACE_OF_EMPLOYMENT",
                "RESIDENCE",
                "SUPERVISION_OFFICE",
                "TREATMENT_PROVIDER",
                "LAW_ENFORCEMENT_AGENCY",
                "PAROLE_COMMISSION",
                "ALTERNATIVE_WORK_SITE",
                name="state_supervision_contact_location",
            ),
            nullable=True,
            comment="Where this contact took place.",
        ),
        sa.Column(
            "location_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact location.",
        ),
        sa.Column(
            "resulted_in_arrest",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this contact resulted in the person's arrest.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "ATTEMPTED",
                "COMPLETED",
                name="state_supervision_contact_status",
            ),
            nullable=True,
            comment="The current status of this contact.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the contact status.",
        ),
        sa.Column(
            "verified_employment",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the person's current employment status was verified at this contact.",
        ),
        sa.Column(
            "supervision_contact_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_contact_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state supervision contact, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision contact information.",
        ),
        sa.Column(
            "contacted_agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["contacted_agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_contact_id"],
            ["state_supervision_contact.supervision_contact_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_contact_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionContact object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_contact_history_contacted_agent_id"),
        "state_supervision_contact_history",
        ["contacted_agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_history_external_id"),
        "state_supervision_contact_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_history_person_id"),
        "state_supervision_contact_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_history_state_code"),
        "state_supervision_contact_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_contact_history_supervision_contact_id"),
        "state_supervision_contact_history",
        ["supervision_contact_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_period_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "supervision_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "INFORMAL_PROBATION",
                "INVESTIGATION",
                "PAROLE",
                "PROBATION",
                "DUAL",
                "COMMUNITY_CONFINEMENT",
                name="state_supervision_period_supervision_type",
            ),
            nullable=True,
            comment="The type of supervision the person is serving during this time period.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period supervision type.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person began this period of supervision.",
        ),
        sa.Column(
            "termination_date",
            sa.Date(),
            nullable=True,
            comment="The date the period of supervision was terminated, either positively or negatively.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county where the person is currently supervised.",
        ),
        sa.Column(
            "supervision_site",
            sa.String(length=255),
            nullable=True,
            comment="A single string encoding the location (i.e. office/region/district) this person is being supervised out of. This field may eventually be split into multiple to better encode supervision org structure. See #3829.",
        ),
        sa.Column(
            "admission_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "CONDITIONAL_RELEASE",
                "COURT_SENTENCE",
                "INVESTIGATION",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_FROM_SUSPENSION",
                name="state_supervision_period_admission_reason",
            ),
            nullable=True,
            comment="The reason the person was admitted to this particular period of supervision.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's admission reason.",
        ),
        sa.Column(
            "termination_reason",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "COMMUTED",
                "DEATH",
                "DISCHARGE",
                "DISMISSED",
                "EXPIRATION",
                "INVESTIGATION",
                "PARDONED",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_TO_INCARCERATION",
                "REVOCATION",
                "SUSPENSION",
                name="state_supervision_period_termination_reason",
            ),
            nullable=True,
            comment="The reason the period of supervision was terminated.",
        ),
        sa.Column(
            "termination_reason_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's termination reason.",
        ),
        sa.Column(
            "supervision_level",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "MINIMUM",
                "MEDIUM",
                "HIGH",
                "MAXIMUM",
                "INCARCERATED",
                "IN_CUSTODY",
                "DIVERSION",
                "INTERSTATE_COMPACT",
                "LIMITED",
                "ELECTRONIC_MONITORING_ONLY",
                "UNSUPERVISED",
                "UNASSIGNED",
                name="state_supervision_level",
            ),
            nullable=True,
            comment="The level of supervision the person is receiving, i.e. an analog to the security level of incarceration, indicating frequency of contact, strictness of constraints, etc.",
        ),
        sa.Column(
            "supervision_level_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's supervision level.",
        ),
        sa.Column(
            "conditions",
            sa.Text(),
            nullable=True,
            comment="The conditions of this period of supervision which the person must follow to avoid a disciplinary response.",
        ),
        sa.Column(
            "custodial_authority",
            sa.Enum(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
            ),
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision period's custodial authority.",
        ),
        sa.Column(
            "supervision_period_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision period information.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_period_id"],
            ["state_supervision_period.supervision_period_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_period_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionPeriod object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_county_code"),
        "state_supervision_period_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_external_id"),
        "state_supervision_period_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_person_id"),
        "state_supervision_period_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_state_code"),
        "state_supervision_period_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_supervising_officer_id"),
        "state_supervision_period_history",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_period_history_supervision_period_id"),
        "state_supervision_period_history",
        ["supervision_period_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_sentence",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="The current status of this sentence.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the current status of this sentence.",
        ),
        sa.Column(
            "supervision_type",
            sa.Enum(
                "CIVIL_COMMITMENT",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "HALFWAY_HOUSE",
                "PAROLE",
                "POST_CONFINEMENT",
                "PRE_CONFINEMENT",
                "PROBATION",
                name="state_supervision_sentence_supervision_type",
            ),
            nullable=True,
            comment="The type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "date_imposed",
            sa.Date(),
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person started serving the sentence.",
        ),
        sa.Column(
            "projected_completion_date",
            sa.Date(),
            nullable=True,
            comment="The earliest projected date the person may have completed their supervision.",
        ),
        sa.Column(
            "completion_date",
            sa.Date(),
            nullable=True,
            comment="The date the person actually did complete their supervision.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="Minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="Maximum duration of this sentence in days.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("supervision_sentence_id"),
        comment="The StateSupervisionSentence object represents information about a single sentence to a period of supervision imposed as part of a group of related sentences. Multiple distinct, related sentences to supervision should be captured as separate supervision sentence objects within the same group. These sentences may, for example, be concurrent or consecutive to one another. Like the sentence group above, the supervision sentence represents only the imposition of some sentence terms, not an actual period of supervision experienced by the person.<br /><br />A StateSupervisionSentence object can reference many charges, and each charge can reference many sentences -- the relationship is many:many.<br /><br />A StateSupervisionSentence can have multiple child StateSupervisionPeriods. It can also have child StateIncarcerationPeriods since a sentence to supervision may result in a person's parole being revoked and the person being re-incarcerated, for example. In some jurisdictions, this would be modeled as distinct sentences of supervision and incarceration, but this is not universal.",
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_county_code"),
        "state_supervision_sentence",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_external_id"),
        "state_supervision_sentence",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_person_id"),
        "state_supervision_sentence",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_sentence_group_id"),
        "state_supervision_sentence",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_state_code"),
        "state_supervision_sentence",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violated_condition_entry",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "condition",
            sa.String(length=255),
            nullable=False,
            comment="The specific condition of supervision which was violated.",
        ),
        sa.Column(
            "supervision_violated_condition_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violated condition entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violated_condition_entry_id"),
        comment="The StateSupervisionViolatedConditionEntry object represents a particular condition of supervision which was violated by a particular supervision violation. Each supervision violation has zero to many violated conditions. For example, a violation may be recorded because a brand new charge has been brought against the supervised person.",
    )
    op.create_index(
        op.f("ix_state_supervision_violated_condition_entry_person_id"),
        "state_supervision_violated_condition_entry",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violated_condition_entry_state_code"),
        "state_supervision_violated_condition_entry",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violated_condition_entry_supervision_violation_id"),
        "state_supervision_violated_condition_entry",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        ),
        sa.Column(
            "violation_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the violation took place.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "is_violent",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation was violent in nature.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "supervision_violation_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionViolation object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_history_external_id"),
        "state_supervision_violation_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_history_person_id"),
        "state_supervision_violation_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_history_state_code"),
        "state_supervision_violation_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_history_supervision_violation_id"),
        "state_supervision_violation_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        ),
        sa.Column(
            "response_type",
            sa.Enum(
                "CITATION",
                "VIOLATION_REPORT",
                "PERMANENT_DECISION",
                name="state_supervision_violation_response_type",
            ),
            nullable=True,
            comment="The type of response to the violation.",
        ),
        sa.Column(
            "response_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the response type.",
        ),
        sa.Column(
            "response_subtype",
            sa.String(length=255),
            nullable=True,
            comment="The type of response subtype to the violation.",
        ),
        sa.Column(
            "response_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the response was made official.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "deciding_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SUPERVISION_OFFICER",
                name="state_supervision_violation_response_deciding_body_type",
            ),
            nullable=True,
            comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision violation deciding body type.",
        ),
        sa.Column(
            "is_draft",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_response_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="supervision_violation_response_external_ids_unique_within_state",
        ),
        comment="The StateSupervisionViolationResponse object represents the official responses to a particular StateSupervisionViolation. These can be positive, neutral, or negative, but they should never be empty or null -- a violation that has no responses should simply have no StateSupervisionViolationResponse children objects.<br /><br />As described under StateIncarcerationPeriod, any StateSupervisionViolationResponse which leads to a revocation back to prison should be linked to the subsequent period of incarceration. This can be done implicitly in entity matching, or can be marked explicitly in incoming data, either here or on the incarceration period as the case may be.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_external_id"),
        "state_supervision_violation_response",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_person_id"),
        "state_supervision_violation_response",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_state_code"),
        "state_supervision_violation_response",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_supervision_violation_id"),
        "state_supervision_violation_response",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_type_entry",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "violation_type",
            sa.Enum(
                "ABSCONDED",
                "ESCAPED",
                "FELONY",
                "LAW",
                "MISDEMEANOR",
                "MUNICIPAL",
                "TECHNICAL",
                name="state_supervision_violation_type",
            ),
            nullable=True,
            comment="The type of violation.",
        ),
        sa.Column(
            "violation_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the violation type.",
        ),
        sa.Column(
            "supervision_violation_type_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_type_entry_id"),
        comment="The StateSupervisionViolationTypeEntry object represents each specific violation type that was composed within a single violation. Each supervision violation has zero to many such violation types. For example, a single violation may have been reported for both absconsion and a technical violation. However, it may also be the case that separate violations were recorded for both an absconsion and a technical violation which were related in the real world. The drawing line is how the violation is itself reported in the source data: if a single violation report filed by an agency staff member includes multiple types of violations, then it will be ingested into our schema as a single supervision violation with multiple supervision violation type entries.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_type_entry_person_id"),
        "state_supervision_violation_type_entry",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_type_entry_state_code"),
        "state_supervision_violation_type_entry",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_type_entry_supervision_violation_id"),
        "state_supervision_violation_type_entry",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_charge_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACQUITTED",
                "COMPLETED_SENTENCE",
                "CONVICTED",
                "DROPPED",
                "INFERRED_DROPPED",
                "EXTERNAL_UNKNOWN",
                "PENDING",
                "PRETRIAL",
                "SENTENCED",
                "PRESENT_WITHOUT_INFO",
                "REMOVED_WITHOUT_INFO",
                name="charge_status",
            ),
            nullable=False,
            comment="The status of the charge.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the status of the charge.",
        ),
        sa.Column(
            "offense_date",
            sa.Date(),
            nullable=True,
            comment="The date of the alleged offense that led to this charge.",
        ),
        sa.Column(
            "date_charged",
            sa.Date(),
            nullable=True,
            comment="The date the person was charged with the alleged offense.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the charge was brought.",
        ),
        sa.Column(
            "ncic_code",
            sa.String(length=255),
            nullable=True,
            comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        ),
        sa.Column(
            "statute",
            sa.String(length=255),
            nullable=True,
            comment="The identifier of the charge in the state or federal code.",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="A text description of the charge.",
        ),
        sa.Column(
            "attempted",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        ),
        sa.Column(
            "classification_type",
            sa.Enum(
                "CIVIL",
                "EXTERNAL_UNKNOWN",
                "FELONY",
                "INFRACTION",
                "MISDEMEANOR",
                "OTHER",
                name="state_charge_classification_type",
            ),
            nullable=True,
            comment="Charge classification.",
        ),
        sa.Column(
            "classification_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the charge classification.",
        ),
        sa.Column(
            "classification_subtype",
            sa.String(length=255),
            nullable=True,
            comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        ),
        sa.Column(
            "offense_type",
            sa.String(length=255),
            nullable=True,
            comment="The type of offense associated with the charge.",
        ),
        sa.Column(
            "is_violent",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was for a violent crime or not.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "counts",
            sa.Integer(),
            nullable=True,
            comment="The number of counts of this charge which are being brought against the person.",
        ),
        sa.Column(
            "charge_notes",
            sa.Text(),
            nullable=True,
            comment="Free text containing other information about a charge.",
        ),
        sa.Column(
            "charging_entity",
            sa.String(length=255),
            nullable=True,
            comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        ),
        sa.Column(
            "is_controlling",
            sa.Boolean(),
            nullable=True,
            comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        ),
        sa.Column(
            "charge_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "charge_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state charge information.",
        ),
        sa.Column(
            "court_case_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_id"],
            ["state_charge.charge_id"],
        ),
        sa.ForeignKeyConstraint(
            ["court_case_id"],
            ["state_court_case.court_case_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("charge_history_id"),
        comment="Represents all updates that have made to a(n) StateCharge object over time.",
    )
    op.create_index(
        op.f("ix_state_charge_history_charge_id"),
        "state_charge_history",
        ["charge_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_history_county_code"),
        "state_charge_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_history_court_case_id"),
        "state_charge_history",
        ["court_case_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_history_external_id"),
        "state_charge_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_history_person_id"),
        "state_charge_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_history_state_code"),
        "state_charge_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_charge_incarceration_sentence_association",
        sa.Column(
            "charge_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_id"],
            ["state_charge.charge_id"],
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
        ),
        comment="Association table that connects charges with incarceration sentences by their ids.",
    )
    op.create_index(
        op.f("ix_state_charge_incarceration_sentence_association_charge_id"),
        "state_charge_incarceration_sentence_association",
        ["charge_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_charge_incarceration_sentence_association_incarceration_sentence_id"
        ),
        "state_charge_incarceration_sentence_association",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_charge_supervision_sentence_association",
        sa.Column(
            "charge_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant charge information.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_id"],
            ["state_charge.charge_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
        ),
        comment="Association table that connects charges with supervision sentences by their ids.",
    )
    op.create_index(
        op.f("ix_state_charge_supervision_sentence_association_charge_id"),
        "state_charge_supervision_sentence_association",
        ["charge_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_charge_supervision_sentence_association_supervision_sentence_id"
        ),
        "state_charge_supervision_sentence_association",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_early_discharge",
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the early discharge took place.",
        ),
        sa.Column(
            "decision_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the result of this early decision request was decided.",
        ),
        sa.Column(
            "decision",
            sa.Enum(
                "REQUEST_DENIED",
                "SENTENCE_TERMINATION_GRANTED",
                "UNSUPERVISED_PROBATION_GRANTED",
                name="state_early_discharge_decision",
            ),
            nullable=True,
            comment="The decided result of this early decision request.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the early discharge decision.",
        ),
        sa.Column(
            "decision_status",
            sa.Enum(
                "PENDING",
                "DECIDED",
                "INVALID",
                name="state_early_discharge_decision_status",
            ),
            nullable=True,
            comment="The current status of the early discharge decision.",
        ),
        sa.Column(
            "decision_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the early discharge decision status.",
        ),
        sa.Column(
            "deciding_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                name="state_acting_body_type",
            ),
            nullable=True,
            comment="The type of body that made or will make the early discharge decision.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the deciding body type.",
        ),
        sa.Column(
            "request_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the early discharge request took place.",
        ),
        sa.Column(
            "requesting_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                name="state_acting_body_type",
            ),
            nullable=True,
            comment="The type of body that requested the early discharge for this person.",
        ),
        sa.Column(
            "requesting_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the requesting body type.",
        ),
        sa.Column(
            "early_discharge_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("early_discharge_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="early_discharge_external_ids_unique_within_state",
        ),
        comment="The StateEarlyDischarge object represents a request and its associated decision to discharge a sentence before its expected end date. This includes various metadata surrounding the actual event of the early discharge request as well as who requested and approved the decision for early discharge. It is possible for a sentence to be discharged early without ending someone's supervision / incarceration term if that person is serving multiple sentences.",
    )
    op.create_index(
        op.f("ix_state_early_discharge_external_id"),
        "state_early_discharge",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_incarceration_sentence_id"),
        "state_early_discharge",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_person_id"),
        "state_early_discharge",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_state_code"),
        "state_early_discharge",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_supervision_sentence_id"),
        "state_early_discharge",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident_outcome_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        ),
        sa.Column(
            "outcome_type",
            sa.Enum(
                "CELL_CONFINEMENT",
                "DISCIPLINARY_LABOR",
                "DISMISSED",
                "EXTERNAL_PROSECUTION",
                "FINANCIAL_PENALTY",
                "GOOD_TIME_LOSS",
                "MISCELLANEOUS",
                "NOT_GUILTY",
                "PRIVILEGE_LOSS",
                "RESTRICTED_CONFINEMENT",
                "SOLITARY",
                "TREATMENT",
                "WARNING",
                name="state_incarceration_incident_outcome_type",
            ),
            nullable=True,
            comment="The type of outcome.",
        ),
        sa.Column(
            "outcome_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the outcome type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "date_effective",
            sa.Date(),
            nullable=True,
            comment="The date on which the outcome takes effect.",
        ),
        sa.Column(
            "hearing_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the hearing for the incident is taking place.",
        ),
        sa.Column(
            "report_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the incident was reported.",
        ),
        sa.Column(
            "outcome_description",
            sa.String(length=255),
            nullable=True,
            comment="Descriptive notes describing the outcome.",
        ),
        sa.Column(
            "punishment_length_days",
            sa.Integer(),
            nullable=True,
            comment="The length of any durational, punishment-focused outcome.",
        ),
        sa.Column(
            "incarceration_incident_outcome_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_incident_outcome_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident outcome information.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_id"],
            ["state_incarceration_incident.incarceration_incident_id"],
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_outcome_id"],
            ["state_incarceration_incident_outcome.incarceration_incident_outcome_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_incident_outcome_history_id"),
        comment="Represents all updates that have made to a(n) StateIncarcerationIncidentOutcome object over time.",
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_history_external_id"),
        "state_incarceration_incident_outcome_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_incarceration_incident_outcome_history_incarceration_incident_id"
        ),
        "state_incarceration_incident_outcome_history",
        ["incarceration_incident_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_incarceration_incident_outcome_history_incarceration_incident_outcome_id"
        ),
        "state_incarceration_incident_outcome_history",
        ["incarceration_incident_outcome_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_history_person_id"),
        "state_incarceration_incident_outcome_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_incident_outcome_history_state_code"),
        "state_incarceration_incident_outcome_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_sentence_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateIncarcerationSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the status of the sentence.",
        ),
        sa.Column(
            "incarceration_type",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                name="state_incarceration_type",
            ),
            nullable=True,
            comment="The type of incarceration the person is being sentenced to.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the type of incarceration of this sentence.",
        ),
        sa.Column(
            "date_imposed",
            sa.Date(),
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date this sentence started.",
        ),
        sa.Column(
            "projected_min_release_date",
            sa.Date(),
            nullable=True,
            comment="The earliest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "projected_max_release_date",
            sa.Date(),
            nullable=True,
            comment="The latest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "completion_date",
            sa.Date(),
            nullable=True,
            comment="The date this sentence has been completed.",
        ),
        sa.Column(
            "parole_eligibility_date",
            sa.Date(),
            nullable=True,
            comment="The first date under which the person becomes eligible for parole under the terms of this sentence.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The code of the state under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="The minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="The maximum duration of this sentence in days.",
        ),
        sa.Column(
            "is_life",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is a life sentence.",
        ),
        sa.Column(
            "is_capital_punishment",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is a sentence for the death penalty.",
        ),
        sa.Column(
            "parole_possible",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the person may be released to parole under the terms of this sentence.",
        ),
        sa.Column(
            "initial_time_served_days",
            sa.Integer(),
            nullable=True,
            comment="The amount of any time already served (in days), to possible be credited against the overall sentence duration.",
        ),
        sa.Column(
            "good_time_days",
            sa.Integer(),
            nullable=True,
            comment="Any good time (in days) the person has credited against this sentence due to good conduct, a.k.a. time off for good behavior, if applicable.",
        ),
        sa.Column(
            "earned_time_days",
            sa.Integer(),
            nullable=True,
            comment="Any earned time (in days) the person has credited against this sentence due to participation in programming designed to reduce the likelihood of re-offense, if applicable.",
        ),
        sa.Column(
            "incarceration_sentence_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("incarceration_sentence_history_id"),
        comment="Represents all updates that have made to a(n) StateIncarcerationSentence object over time.",
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_county_code"),
        "state_incarceration_sentence_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_external_id"),
        "state_incarceration_sentence_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_incarceration_sentence_id"),
        "state_incarceration_sentence_history",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_person_id"),
        "state_incarceration_sentence_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_sentence_group_id"),
        "state_incarceration_sentence_history",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_incarceration_sentence_history_state_code"),
        "state_incarceration_sentence_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_parole_decision_decision_agent_association",
        sa.Column(
            "parole_decision_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) parole decision, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant parole decision information.",
        ),
        sa.Column(
            "agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["parole_decision_id"],
            ["state_parole_decision.parole_decision_id"],
        ),
        comment="Association table that connects parole decisions with agents by their ids.",
    )
    op.create_index(
        op.f("ix_state_parole_decision_decision_agent_association_agent_id"),
        "state_parole_decision_decision_agent_association",
        ["agent_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_decision_agent_association_parole_decision_id"),
        "state_parole_decision_decision_agent_association",
        ["parole_decision_id"],
        unique=False,
    )
    op.create_table(
        "state_parole_decision_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateParoleDecision, unique within the scope of the source data system.",
        ),
        sa.Column(
            "decision_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the decision was made.",
        ),
        sa.Column(
            "corrective_action_deadline",
            sa.Date(),
            nullable=True,
            comment="The date by which any corrective actions must be taken to ensure parole is granted, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the parole hearing is convened.",
        ),
        sa.Column(
            "decision_outcome",
            sa.Enum(
                "EXTERNAL_UNKNOWN",
                "PAROLE_DENIED",
                "PAROLE_GRANTED",
                name="state_parole_decision_outcome",
            ),
            nullable=True,
            comment="The outcome of the decision.",
        ),
        sa.Column(
            "decision_outcome_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the outcome of the decision.",
        ),
        sa.Column(
            "decision_reasoning",
            sa.String(length=255),
            nullable=True,
            comment="Descriptive notes describing the reasoning behind the decision.",
        ),
        sa.Column(
            "corrective_action",
            sa.String(length=255),
            nullable=True,
            comment="Any corrective actions that must be taken by the person to ensure their parole is granted, if applicable.",
        ),
        sa.Column(
            "parole_decision_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "parole_decision_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) parole decision, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant parole decision information.",
        ),
        sa.Column(
            "incarceration_period_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_period_id"],
            ["state_incarceration_period.incarceration_period_id"],
        ),
        sa.ForeignKeyConstraint(
            ["parole_decision_id"],
            ["state_parole_decision.parole_decision_id"],
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("parole_decision_history_id"),
        comment="Represents all updates that have made to a(n) StateParoleDecision object over time.",
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_county_code"),
        "state_parole_decision_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_external_id"),
        "state_parole_decision_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_incarceration_period_id"),
        "state_parole_decision_history",
        ["incarceration_period_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_parole_decision_id"),
        "state_parole_decision_history",
        ["parole_decision_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_person_id"),
        "state_parole_decision_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_parole_decision_history_state_code"),
        "state_parole_decision_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_case_type_entry_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "case_type",
            sa.Enum(
                "ALCOHOL_DRUG",
                "DOMESTIC_VIOLENCE",
                "DRUG_COURT",
                "FAMILY_COURT",
                "GENERAL",
                "MENTAL_HEALTH_COURT",
                "SERIOUS_MENTAL_ILLNESS",
                "SEX_OFFENSE",
                "VETERANS_COURT",
                name="state_supervision_case_type",
            ),
            nullable=True,
            comment="The type of case that describes the associated period of supervision.",
        ),
        sa.Column(
            "case_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the case type.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "supervision_case_type_entry_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_case_type_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) state case type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state case type entry information.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision period information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_case_type_entry_id"],
            ["state_supervision_case_type_entry.supervision_case_type_entry_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_period_id"],
            ["state_supervision_period.supervision_period_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_case_type_entry_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionCaseTypeEntry object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_history_person_id"),
        "state_supervision_case_type_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_history_state_code"),
        "state_supervision_case_type_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_case_type_entry_history_supervision_case_type_entry_id"
        ),
        "state_supervision_case_type_entry_history",
        ["supervision_case_type_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_case_type_entry_history_supervision_period_id"),
        "state_supervision_case_type_entry_history",
        ["supervision_period_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_sentence_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                name="state_sentence_status",
            ),
            nullable=False,
            comment="The current status of this sentence.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the current status of this sentence.",
        ),
        sa.Column(
            "supervision_type",
            sa.Enum(
                "CIVIL_COMMITMENT",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "HALFWAY_HOUSE",
                "PAROLE",
                "POST_CONFINEMENT",
                "PRE_CONFINEMENT",
                "PROBATION",
                name="state_supervision_sentence_supervision_type",
            ),
            nullable=True,
            comment="The type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "date_imposed",
            sa.Date(),
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=True,
            comment="The date the person started serving the sentence.",
        ),
        sa.Column(
            "projected_completion_date",
            sa.Date(),
            nullable=True,
            comment="The earliest projected date the person may have completed their supervision.",
        ),
        sa.Column(
            "completion_date",
            sa.Date(),
            nullable=True,
            comment="The date the person actually did complete their supervision.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.Integer(),
            nullable=True,
            comment="Minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.Integer(),
            nullable=True,
            comment="Maximum duration of this sentence in days.",
        ),
        sa.Column(
            "supervision_sentence_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant sentence group information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_sentence_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionSentence object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_county_code"),
        "state_supervision_sentence_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_external_id"),
        "state_supervision_sentence_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_person_id"),
        "state_supervision_sentence_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_sentence_group_id"),
        "state_supervision_sentence_history",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_state_code"),
        "state_supervision_sentence_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_sentence_history_supervision_sentence_id"),
        "state_supervision_sentence_history",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violated_condition_entry_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "condition",
            sa.String(length=255),
            nullable=False,
            comment="The specific condition of supervision which was violated.",
        ),
        sa.Column(
            "supervision_violated_condition_entry_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violated_condition_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response decision entry information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violated_condition_entry_id"],
            [
                "state_supervision_violated_condition_entry.supervision_violated_condition_entry_id"
            ],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violated_condition_entry_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionViolatedConditionEntry object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_violated_condition_entry_history_person_id"),
        "state_supervision_violated_condition_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violated_condition_entry_history_supervision_violated_condition_entry_id"
        ),
        "state_supervision_violated_condition_entry_history",
        ["supervision_violated_condition_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violated_condition_entry_history_state_code"),
        "state_supervision_violated_condition_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violated_condition_entry_history_supervision_violation_id"
        ),
        "state_supervision_violated_condition_entry_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_decision_agent_association",
        sa.Column(
            "supervision_violation_response_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant violation response information.",
        ),
        sa.Column(
            "agent_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant agent information.",
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["state_agent.agent_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
        ),
        comment="Association table that connects supervision violation responses with agents by their ids.",
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_agent_association_agent_id"
        ),
        "state_supervision_violation_response_decision_agent_association",
        ["agent_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_agent_association_supervision_violation_response_id"
        ),
        "state_supervision_violation_response_decision_agent_association",
        ["supervision_violation_response_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_decision_entry",
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "decision",
            sa.Enum(
                "COMMUNITY_SERVICE",
                "CONTINUANCE",
                "DELAYED_ACTION",
                "EXTENSION",
                "INTERNAL_UNKNOWN",
                "NEW_CONDITIONS",
                "OTHER",
                "REVOCATION",
                "PRIVILEGES_REVOKED",
                "SERVICE_TERMINATION",
                "SHOCK_INCARCERATION",
                "SPECIALIZED_COURT",
                "SUSPENSION",
                "TREATMENT_IN_PRISON",
                "TREATMENT_IN_FIELD",
                "WARNING",
                "WARRANT_ISSUED",
                name="state_supervision_violation_response_decision",
            ),
            nullable=True,
            comment="A specific decision that was made in response, if applicable.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision violation response decision.",
        ),
        sa.Column(
            "supervision_violation_response_decision_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_response_decision_entry_id"),
        comment="The StateSupervisionViolationResponseDecisionEntry object represents each specific decision made in response to a particular supervision violation. Each supervision violation response has zero to many such decisions. Decisions are essentially the final consequences of a violation, actions such as continuance, privileges revoked, or revocation.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_decision_entry_person_id"),
        "state_supervision_violation_response_decision_entry",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_decision_entry_state_code"),
        "state_supervision_violation_response_decision_entry",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_supervision_violation_response_id"
        ),
        "state_supervision_violation_response_decision_entry",
        ["supervision_violation_response_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        ),
        sa.Column(
            "response_type",
            sa.Enum(
                "CITATION",
                "VIOLATION_REPORT",
                "PERMANENT_DECISION",
                name="state_supervision_violation_response_type",
            ),
            nullable=True,
            comment="The type of response to the violation.",
        ),
        sa.Column(
            "response_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the response type.",
        ),
        sa.Column(
            "response_subtype",
            sa.String(length=255),
            nullable=True,
            comment="The type of response subtype to the violation.",
        ),
        sa.Column(
            "response_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the response was made official.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "deciding_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SUPERVISION_OFFICER",
                name="state_supervision_violation_response_deciding_body_type",
            ),
            nullable=True,
            comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision violation deciding body type.",
        ),
        sa.Column(
            "is_draft",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        ),
        sa.Column(
            "supervision_violation_response_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_response_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionViolationResponse object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_history_external_id"),
        "state_supervision_violation_response_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_history_person_id"),
        "state_supervision_violation_response_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_response_history_state_code"),
        "state_supervision_violation_response_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_history_supervision_violation_id"
        ),
        "state_supervision_violation_response_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_history_supervision_violation_response_id"
        ),
        "state_supervision_violation_response_history",
        ["supervision_violation_response_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_type_entry_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "violation_type",
            sa.Enum(
                "ABSCONDED",
                "ESCAPED",
                "FELONY",
                "LAW",
                "MISDEMEANOR",
                "MUNICIPAL",
                "TECHNICAL",
                name="state_supervision_violation_type",
            ),
            nullable=True,
            comment="The type of violation.",
        ),
        sa.Column(
            "violation_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the violation type.",
        ),
        sa.Column(
            "supervision_violation_type_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_type_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation type entry information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_type_entry_id"],
            [
                "state_supervision_violation_type_entry.supervision_violation_type_entry_id"
            ],
        ),
        sa.PrimaryKeyConstraint("supervision_violation_type_history_id"),
        comment="Represents all updates that have made to a(n) StateSupervisionViolationTypeEntry object over time.",
    )
    op.create_index(
        op.f("ix_state_supervision_violation_type_entry_history_person_id"),
        "state_supervision_violation_type_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_supervision_violation_type_entry_history_state_code"),
        "state_supervision_violation_type_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_type_entry_history_supervision_violation_type_entry_id"
        ),
        "state_supervision_violation_type_entry_history",
        ["supervision_violation_type_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_type_entry_history_supervision_violation_id"
        ),
        "state_supervision_violation_type_entry_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_table(
        "state_early_discharge_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the early discharge took place.",
        ),
        sa.Column(
            "decision_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the result of this early decision request was decided.",
        ),
        sa.Column(
            "decision",
            sa.Enum(
                "REQUEST_DENIED",
                "SENTENCE_TERMINATION_GRANTED",
                "UNSUPERVISED_PROBATION_GRANTED",
                name="state_early_discharge_decision",
            ),
            nullable=True,
            comment="The decided result of this early decision request.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the early discharge decision.",
        ),
        sa.Column(
            "decision_status",
            sa.Enum(
                "PENDING",
                "DECIDED",
                "INVALID",
                name="state_early_discharge_decision_status",
            ),
            nullable=True,
            comment="The current status of the early discharge decision.",
        ),
        sa.Column(
            "decision_status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the early discharge decision status.",
        ),
        sa.Column(
            "deciding_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                name="state_acting_body_type",
            ),
            nullable=True,
            comment="The type of body that made or will make the early discharge decision.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the deciding body type.",
        ),
        sa.Column(
            "request_date",
            sa.Date(),
            nullable=True,
            comment="The date on which the early discharge request took place.",
        ),
        sa.Column(
            "requesting_body_type",
            sa.Enum(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                name="state_acting_body_type",
            ),
            nullable=True,
            comment="The type of body that requested the early discharge for this person.",
        ),
        sa.Column(
            "requesting_body_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the requesting body type.",
        ),
        sa.Column(
            "early_discharge_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "early_discharge_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant early discharge information.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["early_discharge_id"],
            ["state_early_discharge.early_discharge_id"],
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("early_discharge_history_id"),
        comment="Represents all updates that have made to a(n) StateEarlyDischarge object over time.",
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_early_discharge_id"),
        "state_early_discharge_history",
        ["early_discharge_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_external_id"),
        "state_early_discharge_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_incarceration_sentence_id"),
        "state_early_discharge_history",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_person_id"),
        "state_early_discharge_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_state_code"),
        "state_early_discharge_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_early_discharge_history_supervision_sentence_id"),
        "state_early_discharge_history",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_decision_entry_history",
        sa.Column(
            "valid_from",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            sa.DateTime(),
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "decision",
            sa.Enum(
                "COMMUNITY_SERVICE",
                "CONTINUANCE",
                "DELAYED_ACTION",
                "EXTENSION",
                "INTERNAL_UNKNOWN",
                "NEW_CONDITIONS",
                "OTHER",
                "REVOCATION",
                "PRIVILEGES_REVOKED",
                "SERVICE_TERMINATION",
                "SHOCK_INCARCERATION",
                "SPECIALIZED_COURT",
                "SUSPENSION",
                "TREATMENT_IN_PRISON",
                "TREATMENT_IN_FIELD",
                "WARNING",
                "WARRANT_ISSUED",
                name="state_supervision_violation_response_decision",
            ),
            nullable=True,
            comment="A specific decision that was made in response, if applicable.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the supervision violation response decision.",
        ),
        sa.Column(
            "supervision_violation_response_decision_entry_history_id",
            sa.Integer(),
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_response_decision_entry_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_decision_entry_id"],
            [
                "state_supervision_violation_response_decision_entry.supervision_violation_response_decision_entry_id"
            ],
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violation_response_decision_entry_history_id"
        ),
        comment="Represents all updates that have made to a(n) StateSupervisionViolationResponseDecisionEntry object over time.",
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_state_code"
        ),
        "state_supervision_violation_response_decision_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_supervision_violation_response_decision_entry_id"
        ),
        "state_supervision_violation_response_decision_entry_history",
        ["supervision_violation_response_decision_entry_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_person_id"
        ),
        "state_supervision_violation_response_decision_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_supervision_violation_response_id"
        ),
        "state_supervision_violation_response_decision_entry_history",
        ["supervision_violation_response_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_supervision_violation_response_id"
        ),
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_person_id"
        ),
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_supervision_violation_response_decision_entry_id"
        ),
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_history_state_code"
        ),
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_table("state_supervision_violation_response_decision_entry_history")
    op.drop_index(
        op.f("ix_state_early_discharge_history_supervision_sentence_id"),
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_history_state_code"),
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_history_person_id"),
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_history_incarceration_sentence_id"),
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_history_external_id"),
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_history_early_discharge_id"),
        table_name="state_early_discharge_history",
    )
    op.drop_table("state_early_discharge_history")
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_type_entry_history_supervision_violation_id"
        ),
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_type_entry_history_supervision_violation_type_entry_id"
        ),
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_type_entry_history_state_code"),
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_type_entry_history_person_id"),
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_table("state_supervision_violation_type_entry_history")
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_history_supervision_violation_response_id"
        ),
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_history_supervision_violation_id"
        ),
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_history_state_code"),
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_history_person_id"),
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_history_external_id"),
        table_name="state_supervision_violation_response_history",
    )
    op.drop_table("state_supervision_violation_response_history")
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_entry_supervision_violation_response_id"
        ),
        table_name="state_supervision_violation_response_decision_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_decision_entry_state_code"),
        table_name="state_supervision_violation_response_decision_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_decision_entry_person_id"),
        table_name="state_supervision_violation_response_decision_entry",
    )
    op.drop_table("state_supervision_violation_response_decision_entry")
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_agent_association_supervision_violation_response_id"
        ),
        table_name="state_supervision_violation_response_decision_agent_association",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violation_response_decision_agent_association_agent_id"
        ),
        table_name="state_supervision_violation_response_decision_agent_association",
    )
    op.drop_table("state_supervision_violation_response_decision_agent_association")
    op.drop_index(
        op.f(
            "ix_state_supervision_violated_condition_entry_history_supervision_violation_id"
        ),
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violated_condition_entry_history_state_code"),
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_violated_condition_entry_history_supervision_violated_condition_entry_id"
        ),
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violated_condition_entry_history_person_id"),
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_table("state_supervision_violated_condition_entry_history")
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_supervision_sentence_id"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_state_code"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_sentence_group_id"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_person_id"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_external_id"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_history_county_code"),
        table_name="state_supervision_sentence_history",
    )
    op.drop_table("state_supervision_sentence_history")
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_history_supervision_period_id"),
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        op.f(
            "ix_state_supervision_case_type_entry_history_supervision_case_type_entry_id"
        ),
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_history_state_code"),
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_history_person_id"),
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_table("state_supervision_case_type_entry_history")
    op.drop_index(
        op.f("ix_state_parole_decision_history_state_code"),
        table_name="state_parole_decision_history",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_history_person_id"),
        table_name="state_parole_decision_history",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_history_parole_decision_id"),
        table_name="state_parole_decision_history",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_history_incarceration_period_id"),
        table_name="state_parole_decision_history",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_history_external_id"),
        table_name="state_parole_decision_history",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_history_county_code"),
        table_name="state_parole_decision_history",
    )
    op.drop_table("state_parole_decision_history")
    op.drop_index(
        op.f("ix_state_parole_decision_decision_agent_association_parole_decision_id"),
        table_name="state_parole_decision_decision_agent_association",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_decision_agent_association_agent_id"),
        table_name="state_parole_decision_decision_agent_association",
    )
    op.drop_table("state_parole_decision_decision_agent_association")
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_state_code"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_sentence_group_id"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_person_id"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_incarceration_sentence_id"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_external_id"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_history_county_code"),
        table_name="state_incarceration_sentence_history",
    )
    op.drop_table("state_incarceration_sentence_history")
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_history_state_code"),
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_history_person_id"),
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        op.f(
            "ix_state_incarceration_incident_outcome_history_incarceration_incident_outcome_id"
        ),
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        op.f(
            "ix_state_incarceration_incident_outcome_history_incarceration_incident_id"
        ),
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_history_external_id"),
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_table("state_incarceration_incident_outcome_history")
    op.drop_index(
        op.f("ix_state_early_discharge_supervision_sentence_id"),
        table_name="state_early_discharge",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_state_code"), table_name="state_early_discharge"
    )
    op.drop_index(
        op.f("ix_state_early_discharge_person_id"), table_name="state_early_discharge"
    )
    op.drop_index(
        op.f("ix_state_early_discharge_incarceration_sentence_id"),
        table_name="state_early_discharge",
    )
    op.drop_index(
        op.f("ix_state_early_discharge_external_id"), table_name="state_early_discharge"
    )
    op.drop_table("state_early_discharge")
    op.drop_index(
        op.f(
            "ix_state_charge_supervision_sentence_association_supervision_sentence_id"
        ),
        table_name="state_charge_supervision_sentence_association",
    )
    op.drop_index(
        op.f("ix_state_charge_supervision_sentence_association_charge_id"),
        table_name="state_charge_supervision_sentence_association",
    )
    op.drop_table("state_charge_supervision_sentence_association")
    op.drop_index(
        op.f(
            "ix_state_charge_incarceration_sentence_association_incarceration_sentence_id"
        ),
        table_name="state_charge_incarceration_sentence_association",
    )
    op.drop_index(
        op.f("ix_state_charge_incarceration_sentence_association_charge_id"),
        table_name="state_charge_incarceration_sentence_association",
    )
    op.drop_table("state_charge_incarceration_sentence_association")
    op.drop_index(
        op.f("ix_state_charge_history_state_code"), table_name="state_charge_history"
    )
    op.drop_index(
        op.f("ix_state_charge_history_person_id"), table_name="state_charge_history"
    )
    op.drop_index(
        op.f("ix_state_charge_history_external_id"), table_name="state_charge_history"
    )
    op.drop_index(
        op.f("ix_state_charge_history_court_case_id"), table_name="state_charge_history"
    )
    op.drop_index(
        op.f("ix_state_charge_history_county_code"), table_name="state_charge_history"
    )
    op.drop_index(
        op.f("ix_state_charge_history_charge_id"), table_name="state_charge_history"
    )
    op.drop_table("state_charge_history")
    op.drop_index(
        op.f("ix_state_supervision_violation_type_entry_supervision_violation_id"),
        table_name="state_supervision_violation_type_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_type_entry_state_code"),
        table_name="state_supervision_violation_type_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_type_entry_person_id"),
        table_name="state_supervision_violation_type_entry",
    )
    op.drop_table("state_supervision_violation_type_entry")
    op.drop_index(
        op.f("ix_state_supervision_violation_response_supervision_violation_id"),
        table_name="state_supervision_violation_response",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_state_code"),
        table_name="state_supervision_violation_response",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_person_id"),
        table_name="state_supervision_violation_response",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_response_external_id"),
        table_name="state_supervision_violation_response",
    )
    op.drop_table("state_supervision_violation_response")
    op.drop_index(
        op.f("ix_state_supervision_violation_history_supervision_violation_id"),
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_history_state_code"),
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_history_person_id"),
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_history_external_id"),
        table_name="state_supervision_violation_history",
    )
    op.drop_table("state_supervision_violation_history")
    op.drop_index(
        op.f("ix_state_supervision_violated_condition_entry_supervision_violation_id"),
        table_name="state_supervision_violated_condition_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violated_condition_entry_state_code"),
        table_name="state_supervision_violated_condition_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_violated_condition_entry_person_id"),
        table_name="state_supervision_violated_condition_entry",
    )
    op.drop_table("state_supervision_violated_condition_entry")
    op.drop_index(
        op.f("ix_state_supervision_sentence_state_code"),
        table_name="state_supervision_sentence",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_sentence_group_id"),
        table_name="state_supervision_sentence",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_person_id"),
        table_name="state_supervision_sentence",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_external_id"),
        table_name="state_supervision_sentence",
    )
    op.drop_index(
        op.f("ix_state_supervision_sentence_county_code"),
        table_name="state_supervision_sentence",
    )
    op.drop_table("state_supervision_sentence")
    op.drop_index(
        op.f("ix_state_supervision_period_history_supervision_period_id"),
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_history_supervising_officer_id"),
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_history_state_code"),
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_history_person_id"),
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_history_external_id"),
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_history_county_code"),
        table_name="state_supervision_period_history",
    )
    op.drop_table("state_supervision_period_history")
    op.drop_index(
        op.f("ix_state_supervision_contact_history_supervision_contact_id"),
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_history_state_code"),
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_history_person_id"),
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_history_external_id"),
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_history_contacted_agent_id"),
        table_name="state_supervision_contact_history",
    )
    op.drop_table("state_supervision_contact_history")
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_supervision_period_id"),
        table_name="state_supervision_case_type_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_state_code"),
        table_name="state_supervision_case_type_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_person_id"),
        table_name="state_supervision_case_type_entry",
    )
    op.drop_index(
        op.f("ix_state_supervision_case_type_entry_external_id"),
        table_name="state_supervision_case_type_entry",
    )
    op.drop_table("state_supervision_case_type_entry")
    op.drop_index(
        op.f("ix_state_sentence_group_history_state_code"),
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        op.f("ix_state_sentence_group_history_sentence_group_id"),
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        op.f("ix_state_sentence_group_history_person_id"),
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        op.f("ix_state_sentence_group_history_external_id"),
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        op.f("ix_state_sentence_group_history_county_code"),
        table_name="state_sentence_group_history",
    )
    op.drop_table("state_sentence_group_history")
    op.drop_index(
        op.f("ix_state_program_assignment_history_state_code"),
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_history_referring_agent_id"),
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_history_program_assignment_id"),
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_history_person_id"),
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_history_external_id"),
        table_name="state_program_assignment_history",
    )
    op.drop_table("state_program_assignment_history")
    op.drop_index(
        op.f("ix_state_person_race_history_state_code"),
        table_name="state_person_race_history",
    )
    op.drop_index(
        op.f("ix_state_person_race_history_person_race_id"),
        table_name="state_person_race_history",
    )
    op.drop_index(
        op.f("ix_state_person_race_history_person_id"),
        table_name="state_person_race_history",
    )
    op.drop_table("state_person_race_history")
    op.drop_index(
        op.f("ix_state_person_external_id_history_state_code"),
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        op.f("ix_state_person_external_id_history_person_id"),
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        op.f("ix_state_person_external_id_history_person_external_id_id"),
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        op.f("ix_state_person_external_id_history_external_id"),
        table_name="state_person_external_id_history",
    )
    op.drop_table("state_person_external_id_history")
    op.drop_index(
        op.f("ix_state_person_ethnicity_history_state_code"),
        table_name="state_person_ethnicity_history",
    )
    op.drop_index(
        op.f("ix_state_person_ethnicity_history_person_id"),
        table_name="state_person_ethnicity_history",
    )
    op.drop_index(
        op.f("ix_state_person_ethnicity_history_person_ethnicity_id"),
        table_name="state_person_ethnicity_history",
    )
    op.drop_table("state_person_ethnicity_history")
    op.drop_index(
        op.f("ix_state_person_alias_history_state_code"),
        table_name="state_person_alias_history",
    )
    op.drop_index(
        op.f("ix_state_person_alias_history_person_id"),
        table_name="state_person_alias_history",
    )
    op.drop_index(
        op.f("ix_state_person_alias_history_person_alias_id"),
        table_name="state_person_alias_history",
    )
    op.drop_table("state_person_alias_history")
    op.drop_index(
        op.f("ix_state_parole_decision_state_code"), table_name="state_parole_decision"
    )
    op.drop_index(
        op.f("ix_state_parole_decision_person_id"), table_name="state_parole_decision"
    )
    op.drop_index(
        op.f("ix_state_parole_decision_incarceration_period_id"),
        table_name="state_parole_decision",
    )
    op.drop_index(
        op.f("ix_state_parole_decision_external_id"), table_name="state_parole_decision"
    )
    op.drop_index(
        op.f("ix_state_parole_decision_county_code"), table_name="state_parole_decision"
    )
    op.drop_table("state_parole_decision")
    op.drop_index(
        op.f("ix_state_incarceration_sentence_state_code"),
        table_name="state_incarceration_sentence",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_sentence_group_id"),
        table_name="state_incarceration_sentence",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_person_id"),
        table_name="state_incarceration_sentence",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_external_id"),
        table_name="state_incarceration_sentence",
    )
    op.drop_index(
        op.f("ix_state_incarceration_sentence_county_code"),
        table_name="state_incarceration_sentence",
    )
    op.drop_table("state_incarceration_sentence")
    op.drop_index(
        op.f("ix_state_incarceration_period_history_state_code"),
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_history_person_id"),
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_history_incarceration_period_id"),
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_history_external_id"),
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_history_county_code"),
        table_name="state_incarceration_period_history",
    )
    op.drop_table("state_incarceration_period_history")
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_state_code"),
        table_name="state_incarceration_incident_outcome",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_person_id"),
        table_name="state_incarceration_incident_outcome",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_incarceration_incident_id"),
        table_name="state_incarceration_incident_outcome",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_outcome_external_id"),
        table_name="state_incarceration_incident_outcome",
    )
    op.drop_table("state_incarceration_incident_outcome")
    op.drop_index(
        op.f("ix_state_incarceration_incident_history_state_code"),
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_history_responding_officer_id"),
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_history_person_id"),
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_history_incarceration_incident_id"),
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_history_external_id"),
        table_name="state_incarceration_incident_history",
    )
    op.drop_table("state_incarceration_incident_history")
    op.drop_index(
        op.f("ix_state_court_case_history_state_code"),
        table_name="state_court_case_history",
    )
    op.drop_index(
        op.f("ix_state_court_case_history_person_id"),
        table_name="state_court_case_history",
    )
    op.drop_index(
        op.f("ix_state_court_case_history_judge_id"),
        table_name="state_court_case_history",
    )
    op.drop_index(
        op.f("ix_state_court_case_history_external_id"),
        table_name="state_court_case_history",
    )
    op.drop_index(
        op.f("ix_state_court_case_history_court_case_id"),
        table_name="state_court_case_history",
    )
    op.drop_index(
        op.f("ix_state_court_case_history_county_code"),
        table_name="state_court_case_history",
    )
    op.drop_table("state_court_case_history")
    op.drop_index(op.f("ix_state_charge_state_code"), table_name="state_charge")
    op.drop_index(op.f("ix_state_charge_person_id"), table_name="state_charge")
    op.drop_index(op.f("ix_state_charge_external_id"), table_name="state_charge")
    op.drop_index(op.f("ix_state_charge_court_case_id"), table_name="state_charge")
    op.drop_index(op.f("ix_state_charge_county_code"), table_name="state_charge")
    op.drop_table("state_charge")
    op.drop_index(
        op.f("ix_state_assessment_history_state_code"),
        table_name="state_assessment_history",
    )
    op.drop_index(
        op.f("ix_state_assessment_history_person_id"),
        table_name="state_assessment_history",
    )
    op.drop_index(
        op.f("ix_state_assessment_history_external_id"),
        table_name="state_assessment_history",
    )
    op.drop_index(
        op.f("ix_state_assessment_history_conducting_agent_id"),
        table_name="state_assessment_history",
    )
    op.drop_index(
        op.f("ix_state_assessment_history_assessment_id"),
        table_name="state_assessment_history",
    )
    op.drop_table("state_assessment_history")
    op.drop_index(
        op.f("ix_state_supervision_violation_state_code"),
        table_name="state_supervision_violation",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_person_id"),
        table_name="state_supervision_violation",
    )
    op.drop_index(
        op.f("ix_state_supervision_violation_external_id"),
        table_name="state_supervision_violation",
    )
    op.drop_table("state_supervision_violation")
    op.drop_index(
        op.f("ix_state_supervision_period_supervising_officer_id"),
        table_name="state_supervision_period",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_state_code"),
        table_name="state_supervision_period",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_person_id"),
        table_name="state_supervision_period",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_external_id"),
        table_name="state_supervision_period",
    )
    op.drop_index(
        op.f("ix_state_supervision_period_county_code"),
        table_name="state_supervision_period",
    )
    op.drop_table("state_supervision_period")
    op.drop_index(
        op.f("ix_state_supervision_contact_state_code"),
        table_name="state_supervision_contact",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_person_id"),
        table_name="state_supervision_contact",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_external_id"),
        table_name="state_supervision_contact",
    )
    op.drop_index(
        op.f("ix_state_supervision_contact_contacted_agent_id"),
        table_name="state_supervision_contact",
    )
    op.drop_table("state_supervision_contact")
    op.drop_index(
        op.f("ix_state_sentence_group_state_code"), table_name="state_sentence_group"
    )
    op.drop_index(
        op.f("ix_state_sentence_group_person_id"), table_name="state_sentence_group"
    )
    op.drop_index(
        op.f("ix_state_sentence_group_external_id"), table_name="state_sentence_group"
    )
    op.drop_index(
        op.f("ix_state_sentence_group_county_code"), table_name="state_sentence_group"
    )
    op.drop_table("state_sentence_group")
    op.drop_index(
        op.f("ix_state_program_assignment_state_code"),
        table_name="state_program_assignment",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_referring_agent_id"),
        table_name="state_program_assignment",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_person_id"),
        table_name="state_program_assignment",
    )
    op.drop_index(
        op.f("ix_state_program_assignment_external_id"),
        table_name="state_program_assignment",
    )
    op.drop_table("state_program_assignment")
    op.drop_index(
        op.f("ix_state_person_race_state_code"), table_name="state_person_race"
    )
    op.drop_index(
        op.f("ix_state_person_race_person_id"), table_name="state_person_race"
    )
    op.drop_table("state_person_race")
    op.drop_index(
        op.f("ix_state_person_history_supervising_officer_id"),
        table_name="state_person_history",
    )
    op.drop_index(
        op.f("ix_state_person_history_state_code"), table_name="state_person_history"
    )
    op.drop_index(
        op.f("ix_state_person_history_person_id"), table_name="state_person_history"
    )
    op.drop_index(
        op.f("ix_state_person_history_full_name"), table_name="state_person_history"
    )
    op.drop_index(
        op.f("ix_state_person_history_birthdate"), table_name="state_person_history"
    )
    op.drop_table("state_person_history")
    op.drop_index(
        op.f("ix_state_person_external_id_state_code"),
        table_name="state_person_external_id",
    )
    op.drop_index(
        op.f("ix_state_person_external_id_person_id"),
        table_name="state_person_external_id",
    )
    op.drop_index(
        op.f("ix_state_person_external_id_external_id"),
        table_name="state_person_external_id",
    )
    op.drop_table("state_person_external_id")
    op.drop_index(
        op.f("ix_state_person_ethnicity_state_code"),
        table_name="state_person_ethnicity",
    )
    op.drop_index(
        op.f("ix_state_person_ethnicity_person_id"), table_name="state_person_ethnicity"
    )
    op.drop_table("state_person_ethnicity")
    op.drop_index(
        op.f("ix_state_person_alias_state_code"), table_name="state_person_alias"
    )
    op.drop_index(
        op.f("ix_state_person_alias_person_id"), table_name="state_person_alias"
    )
    op.drop_table("state_person_alias")
    op.drop_index(
        op.f("ix_state_incarceration_period_state_code"),
        table_name="state_incarceration_period",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_person_id"),
        table_name="state_incarceration_period",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_external_id"),
        table_name="state_incarceration_period",
    )
    op.drop_index(
        op.f("ix_state_incarceration_period_county_code"),
        table_name="state_incarceration_period",
    )
    op.drop_table("state_incarceration_period")
    op.drop_index(
        op.f("ix_state_incarceration_incident_state_code"),
        table_name="state_incarceration_incident",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_responding_officer_id"),
        table_name="state_incarceration_incident",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_person_id"),
        table_name="state_incarceration_incident",
    )
    op.drop_index(
        op.f("ix_state_incarceration_incident_external_id"),
        table_name="state_incarceration_incident",
    )
    op.drop_table("state_incarceration_incident")
    op.drop_index(op.f("ix_state_court_case_state_code"), table_name="state_court_case")
    op.drop_index(op.f("ix_state_court_case_person_id"), table_name="state_court_case")
    op.drop_index(op.f("ix_state_court_case_judge_id"), table_name="state_court_case")
    op.drop_index(
        op.f("ix_state_court_case_external_id"), table_name="state_court_case"
    )
    op.drop_index(
        op.f("ix_state_court_case_county_code"), table_name="state_court_case"
    )
    op.drop_table("state_court_case")
    op.drop_index(op.f("ix_state_assessment_state_code"), table_name="state_assessment")
    op.drop_index(op.f("ix_state_assessment_person_id"), table_name="state_assessment")
    op.drop_index(
        op.f("ix_state_assessment_external_id"), table_name="state_assessment"
    )
    op.drop_index(
        op.f("ix_state_assessment_conducting_agent_id"), table_name="state_assessment"
    )
    op.drop_table("state_assessment")
    op.drop_index(
        op.f("ix_state_person_supervising_officer_id"), table_name="state_person"
    )
    op.drop_index(op.f("ix_state_person_state_code"), table_name="state_person")
    op.drop_index(op.f("ix_state_person_full_name"), table_name="state_person")
    op.drop_index(op.f("ix_state_person_birthdate"), table_name="state_person")
    op.drop_table("state_person")
    op.drop_index(
        op.f("ix_state_agent_history_state_code"), table_name="state_agent_history"
    )
    op.drop_index(
        op.f("ix_state_agent_history_external_id"), table_name="state_agent_history"
    )
    op.drop_index(
        op.f("ix_state_agent_history_agent_id"), table_name="state_agent_history"
    )
    op.drop_table("state_agent_history")
    op.drop_index(op.f("ix_state_agent_state_code"), table_name="state_agent")
    op.drop_index(op.f("ix_state_agent_external_id"), table_name="state_agent")
    op.drop_table("state_agent")

    # ### end Alembic commands ###

    # Manually added
    op.execute("DROP TYPE state_supervision_contact_location;")
    op.execute("DROP TYPE state_supervision_period_supervision_type;")
    op.execute("DROP TYPE state_early_discharge_decision_status;")
    op.execute("DROP TYPE state_assessment_level;")
    op.execute("DROP TYPE ethnicity;")
    op.execute("DROP TYPE state_supervision_contact_type;")
    op.execute("DROP TYPE state_supervision_level;")
    op.execute("DROP TYPE state_court_case_status;")
    op.execute("DROP TYPE state_custodial_authority;")
    op.execute("DROP TYPE state_incarceration_type;")
    op.execute("DROP TYPE state_program_assignment_participation_status;")
    op.execute("DROP TYPE state_court_type;")
    op.execute("DROP TYPE state_supervision_violation_response_type;")
    op.execute("DROP TYPE state_early_discharge_decision;")
    op.execute("DROP TYPE state_supervision_sentence_supervision_type;")
    op.execute("DROP TYPE race;")
    op.execute("DROP TYPE state_incarceration_incident_type;")
    op.execute("DROP TYPE state_incarceration_period_release_reason;")
    op.execute("DROP TYPE state_supervision_period_admission_reason;")
    op.execute("DROP TYPE state_incarceration_period_admission_reason;")
    op.execute("DROP TYPE state_program_assignment_discharge_reason;")
    op.execute("DROP TYPE state_supervision_period_termination_reason;")
    op.execute("DROP TYPE state_charge_classification_type;")
    op.execute("DROP TYPE charge_status;")
    op.execute("DROP TYPE gender;")
    op.execute("DROP TYPE state_specialized_purpose_for_incarceration;")
    op.execute("DROP TYPE state_supervision_contact_reason;")
    op.execute("DROP TYPE state_supervision_case_type;")
    op.execute("DROP TYPE state_incarceration_incident_outcome_type;")
    op.execute("DROP TYPE state_supervision_violation_response_decision;")
    op.execute("DROP TYPE residency_status;")
    op.execute("DROP TYPE state_assessment_type;")
    op.execute("DROP TYPE state_supervision_contact_status;")
    op.execute("DROP TYPE state_incarceration_facility_security_level;")
    op.execute("DROP TYPE state_supervision_violation_type;")
    op.execute("DROP TYPE state_supervision_violation_response_deciding_body_type;")
    op.execute("DROP TYPE state_person_alias_type;")
    op.execute("DROP TYPE state_acting_body_type;")
    op.execute("DROP TYPE state_parole_decision_outcome;")
    op.execute("DROP TYPE state_sentence_status;")
    op.execute("DROP TYPE state_supervision_contact_method;")
    op.execute("DROP TYPE state_agent_type;")
    op.execute("DROP TYPE state_assessment_class;")
