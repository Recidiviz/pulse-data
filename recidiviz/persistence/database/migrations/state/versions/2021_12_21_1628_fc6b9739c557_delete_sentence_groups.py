# pylint: skip-file
"""delete_sentence_groups

Revision ID: fc6b9739c557
Revises: 8470b051bf0c
Create Date: 2021-12-21 16:28:45.211632

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "fc6b9739c557"
down_revision = "8470b051bf0c"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_state_sentence_group_county_code", table_name="state_sentence_group"
    )
    op.drop_index(
        "ix_state_sentence_group_external_id", table_name="state_sentence_group"
    )
    op.drop_index(
        "ix_state_sentence_group_person_id", table_name="state_sentence_group"
    )
    op.drop_index(
        "ix_state_sentence_group_state_code", table_name="state_sentence_group"
    )
    op.drop_index(
        "ix_state_sentence_group_history_county_code",
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        "ix_state_sentence_group_history_external_id",
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        "ix_state_sentence_group_history_person_id",
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        "ix_state_sentence_group_history_sentence_group_id",
        table_name="state_sentence_group_history",
    )
    op.drop_index(
        "ix_state_sentence_group_history_state_code",
        table_name="state_sentence_group_history",
    )
    op.drop_table("state_sentence_group_history")
    op.drop_table("state_sentence_group")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_sentence_group",
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                name="state_sentence_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "date_imposed",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "min_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "max_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "is_life",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="Unique identifier for a(n) sentence group, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_sentence_group_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("sentence_group_id", name="state_sentence_group_pkey"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            name="sentence_group_external_ids_unique_within_state",
        ),
    )
    op.create_index(
        "ix_state_sentence_group_state_code",
        "state_sentence_group",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_person_id",
        "state_sentence_group",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_external_id",
        "state_sentence_group",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_county_code",
        "state_sentence_group",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_sentence_group_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                name="state_sentence_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "date_imposed",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "min_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "max_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "is_life",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "sentence_group_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "sentence_group_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="DEPRECATED. See #5411.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_sentence_group_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_group_id"],
            ["state_sentence_group.sentence_group_id"],
            name="state_sentence_group_history_sentence_group_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "sentence_group_history_id", name="state_sentence_group_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_sentence_group_history_state_code",
        "state_sentence_group_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_history_sentence_group_id",
        "state_sentence_group_history",
        ["sentence_group_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_history_person_id",
        "state_sentence_group_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_history_external_id",
        "state_sentence_group_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_sentence_group_history_county_code",
        "state_sentence_group_history",
        ["county_code"],
        unique=False,
    )
    # ### end Alembic commands ###
