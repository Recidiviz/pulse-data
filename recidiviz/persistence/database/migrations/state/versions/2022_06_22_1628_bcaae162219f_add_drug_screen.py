# pylint: skip-file
"""add_drug_screen

Revision ID: bcaae162219f
Revises: 77774457c64b
Create Date: 2022-06-22 16:28:52.755197

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "bcaae162219f"
down_revision = "77774457c64b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_drug_screen",
        sa.Column(
            "drug_screen_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) drug screen, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the StateDrugScreen, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "drug_screen_date",
            sa.Date(),
            nullable=False,
            comment="Date the drug screen was administered. This is the date the sample was collected or a positive admission was recorded.",
        ),
        sa.Column(
            "drug_screen_result",
            sa.Enum(
                "POSITIVE",
                "NEGATIVE",
                "ADMITTED_POSITIVE",
                "MEDICAL_EXEMPTION",
                "NO_RESULT",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_drug_screen_result",
            ),
            nullable=True,
            comment="Enum indicating whether the test result was positive, negative or other.",
        ),
        sa.Column(
            "drug_screen_result_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="Raw text for the result field.",
        ),
        sa.Column(
            "sample_type",
            sa.Enum(
                "URINE",
                "SWEAT",
                "SALIVA",
                "BLOOD",
                "HAIR",
                "BREATH",
                "NO_SAMPLE",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_drug_screen_sample_type",
            ),
            nullable=True,
            comment="Type of sample collected for the drug screen.",
        ),
        sa.Column(
            "sample_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="Raw text for the sample_type field.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("drug_screen_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="state_drug_screen_external_ids_unique_within_state",
        ),
        comment="The StateDrugScreen object represents information about the results of a particular drug screen.",
    )
    op.create_index(
        op.f("ix_state_drug_screen_external_id"),
        "state_drug_screen",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_drug_screen_person_id"),
        "state_drug_screen",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_drug_screen_state_code"),
        "state_drug_screen",
        ["state_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_state_drug_screen_state_code"), table_name="state_drug_screen"
    )
    op.drop_index(
        op.f("ix_state_drug_screen_person_id"), table_name="state_drug_screen"
    )
    op.drop_index(
        op.f("ix_state_drug_screen_external_id"), table_name="state_drug_screen"
    )
    op.drop_table("state_drug_screen")
    # ### end Alembic commands ###
    op.execute("DROP TYPE state_drug_screen_result;")
    op.execute("DROP TYPE state_drug_screen_sample_type;")
