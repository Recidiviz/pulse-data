# pylint: skip-file
"""delete_history_tables

Revision ID: f0b4f8724f7d
Revises: 8b3414901d9b
Create Date: 2022-05-06 17:56:49.590805

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f0b4f8724f7d"
down_revision = "6d2226525eb4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_state_supervision_violation_response_history_external_id",
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_history_person_id",
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_history_state_code",
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_history_supervi_a3b2",
        table_name="state_supervision_violation_response_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_history_supervi_ca01",
        table_name="state_supervision_violation_response_history",
    )
    op.drop_table("state_supervision_violation_response_history")
    op.drop_index(
        "ix_state_incarceration_period_history_county_code",
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        "ix_state_incarceration_period_history_external_id",
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        "ix_state_incarceration_period_history_incarceration_period_id",
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        "ix_state_incarceration_period_history_person_id",
        table_name="state_incarceration_period_history",
    )
    op.drop_index(
        "ix_state_incarceration_period_history_state_code",
        table_name="state_incarceration_period_history",
    )
    op.drop_table("state_incarceration_period_history")
    op.drop_index(
        "ix_state_supervision_case_type_entry_history_person_id",
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_case_type_entry_history_state_code",
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_case_type_entry_history_supervisio_9f75",
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_case_type_entry_history_supervisio_ea65",
        table_name="state_supervision_case_type_entry_history",
    )
    op.drop_table("state_supervision_case_type_entry_history")
    op.drop_index(
        "ix_state_assessment_history_assessment_id",
        table_name="state_assessment_history",
    )
    op.drop_index(
        "ix_state_assessment_history_conducting_agent_id",
        table_name="state_assessment_history",
    )
    op.drop_index(
        "ix_state_assessment_history_external_id", table_name="state_assessment_history"
    )
    op.drop_index(
        "ix_state_assessment_history_person_id", table_name="state_assessment_history"
    )
    op.drop_index(
        "ix_state_assessment_history_state_code", table_name="state_assessment_history"
    )
    op.drop_table("state_assessment_history")
    op.drop_index(
        "ix_state_supervision_period_history_county_code",
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        "ix_state_supervision_period_history_external_id",
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        "ix_state_supervision_period_history_person_id",
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        "ix_state_supervision_period_history_state_code",
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        "ix_state_supervision_period_history_supervising_officer_id",
        table_name="state_supervision_period_history",
    )
    op.drop_index(
        "ix_state_supervision_period_history_supervision_period_id",
        table_name="state_supervision_period_history",
    )
    op.drop_table("state_supervision_period_history")
    op.drop_index(
        "ix_state_supervision_violated_condition_entry_history_person_id",
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violated_condition_entry_history_s_3f94",
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violated_condition_entry_history_s_d225",
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violated_condition_entry_history_s_f575",
        table_name="state_supervision_violated_condition_entry_history",
    )
    op.drop_table("state_supervision_violated_condition_entry_history")
    op.drop_index(
        "ix_state_supervision_violation_response_decision_entry__288c",
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_decision_entry__7153",
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_decision_entry__82c7",
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_response_decision_entry__df7c",
        table_name="state_supervision_violation_response_decision_entry_history",
    )
    op.drop_table("state_supervision_violation_response_decision_entry_history")
    op.drop_index(
        "ix_state_incarceration_incident_outcome_history_external_id",
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_outcome_history_incarce_a75f",
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_outcome_history_incarce_bf65",
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_outcome_history_person_id",
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_outcome_history_state_code",
        table_name="state_incarceration_incident_outcome_history",
    )
    op.drop_table("state_incarceration_incident_outcome_history")
    op.drop_index(
        "ix_state_charge_history_charge_id", table_name="state_charge_history"
    )
    op.drop_index(
        "ix_state_charge_history_county_code", table_name="state_charge_history"
    )
    op.drop_index(
        "ix_state_charge_history_court_case_id", table_name="state_charge_history"
    )
    op.drop_index(
        "ix_state_charge_history_external_id", table_name="state_charge_history"
    )
    op.drop_index(
        "ix_state_charge_history_person_id", table_name="state_charge_history"
    )
    op.drop_index(
        "ix_state_charge_history_state_code", table_name="state_charge_history"
    )
    op.drop_table("state_charge_history")
    op.drop_index(
        "ix_state_person_alias_history_person_alias_id",
        table_name="state_person_alias_history",
    )
    op.drop_index(
        "ix_state_person_alias_history_person_id",
        table_name="state_person_alias_history",
    )
    op.drop_index(
        "ix_state_person_alias_history_state_code",
        table_name="state_person_alias_history",
    )
    op.drop_table("state_person_alias_history")
    op.drop_index(
        "ix_state_person_external_id_history_external_id",
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        "ix_state_person_external_id_history_person_external_id_id",
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        "ix_state_person_external_id_history_person_id",
        table_name="state_person_external_id_history",
    )
    op.drop_index(
        "ix_state_person_external_id_history_state_code",
        table_name="state_person_external_id_history",
    )
    op.drop_table("state_person_external_id_history")
    op.drop_index(
        "ix_state_incarceration_sentence_history_county_code",
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        "ix_state_incarceration_sentence_history_external_id",
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        "ix_state_incarceration_sentence_history_incarceration_s_d830",
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        "ix_state_incarceration_sentence_history_person_id",
        table_name="state_incarceration_sentence_history",
    )
    op.drop_index(
        "ix_state_incarceration_sentence_history_state_code",
        table_name="state_incarceration_sentence_history",
    )
    op.drop_table("state_incarceration_sentence_history")
    op.drop_index(
        "ix_state_court_case_history_county_code", table_name="state_court_case_history"
    )
    op.drop_index(
        "ix_state_court_case_history_court_case_id",
        table_name="state_court_case_history",
    )
    op.drop_index(
        "ix_state_court_case_history_external_id", table_name="state_court_case_history"
    )
    op.drop_index(
        "ix_state_court_case_history_judge_id", table_name="state_court_case_history"
    )
    op.drop_index(
        "ix_state_court_case_history_person_id", table_name="state_court_case_history"
    )
    op.drop_index(
        "ix_state_court_case_history_state_code", table_name="state_court_case_history"
    )
    op.drop_table("state_court_case_history")
    op.drop_index(
        "ix_state_supervision_contact_history_contacted_agent_id",
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        "ix_state_supervision_contact_history_external_id",
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        "ix_state_supervision_contact_history_person_id",
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        "ix_state_supervision_contact_history_state_code",
        table_name="state_supervision_contact_history",
    )
    op.drop_index(
        "ix_state_supervision_contact_history_supervision_contact_id",
        table_name="state_supervision_contact_history",
    )
    op.drop_table("state_supervision_contact_history")
    op.drop_index(
        "ix_state_supervision_sentence_history_county_code",
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        "ix_state_supervision_sentence_history_external_id",
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        "ix_state_supervision_sentence_history_person_id",
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        "ix_state_supervision_sentence_history_state_code",
        table_name="state_supervision_sentence_history",
    )
    op.drop_index(
        "ix_state_supervision_sentence_history_supervision_sentence_id",
        table_name="state_supervision_sentence_history",
    )
    op.drop_table("state_supervision_sentence_history")
    op.drop_index(
        "ix_state_person_history_birthdate", table_name="state_person_history"
    )
    op.drop_index(
        "ix_state_person_history_full_name", table_name="state_person_history"
    )
    op.drop_index(
        "ix_state_person_history_person_id", table_name="state_person_history"
    )
    op.drop_index(
        "ix_state_person_history_state_code", table_name="state_person_history"
    )
    op.drop_index(
        "ix_state_person_history_supervising_officer_id",
        table_name="state_person_history",
    )
    op.drop_table("state_person_history")
    op.drop_index(
        "ix_state_program_assignment_history_external_id",
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        "ix_state_program_assignment_history_person_id",
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        "ix_state_program_assignment_history_program_assignment_id",
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        "ix_state_program_assignment_history_referring_agent_id",
        table_name="state_program_assignment_history",
    )
    op.drop_index(
        "ix_state_program_assignment_history_state_code",
        table_name="state_program_assignment_history",
    )
    op.drop_table("state_program_assignment_history")
    op.drop_index(
        "ix_state_person_race_history_person_id", table_name="state_person_race_history"
    )
    op.drop_index(
        "ix_state_person_race_history_person_race_id",
        table_name="state_person_race_history",
    )
    op.drop_index(
        "ix_state_person_race_history_state_code",
        table_name="state_person_race_history",
    )
    op.drop_table("state_person_race_history")
    op.drop_index(
        "ix_state_incarceration_incident_history_external_id",
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_history_incarceration_i_bcc9",
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_history_person_id",
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_history_responding_officer_id",
        table_name="state_incarceration_incident_history",
    )
    op.drop_index(
        "ix_state_incarceration_incident_history_state_code",
        table_name="state_incarceration_incident_history",
    )
    op.drop_table("state_incarceration_incident_history")
    op.drop_index(
        "ix_state_person_ethnicity_history_person_ethnicity_id",
        table_name="state_person_ethnicity_history",
    )
    op.drop_index(
        "ix_state_person_ethnicity_history_person_id",
        table_name="state_person_ethnicity_history",
    )
    op.drop_index(
        "ix_state_person_ethnicity_history_state_code",
        table_name="state_person_ethnicity_history",
    )
    op.drop_table("state_person_ethnicity_history")
    op.drop_index("ix_state_agent_history_agent_id", table_name="state_agent_history")
    op.drop_index(
        "ix_state_agent_history_external_id", table_name="state_agent_history"
    )
    op.drop_index("ix_state_agent_history_state_code", table_name="state_agent_history")
    op.drop_table("state_agent_history")
    op.drop_index(
        "ix_state_supervision_violation_history_external_id",
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_history_person_id",
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_history_state_code",
        table_name="state_supervision_violation_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_history_supervision_violation_id",
        table_name="state_supervision_violation_history",
    )
    op.drop_table("state_supervision_violation_history")
    op.drop_index(
        "ix_state_supervision_violation_type_entry_history_person_id",
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_type_entry_history_state_code",
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_type_entry_history_super_8db2",
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_index(
        "ix_state_supervision_violation_type_entry_history_super_c54e",
        table_name="state_supervision_violation_type_entry_history",
    )
    op.drop_table("state_supervision_violation_type_entry_history")
    op.drop_index(
        "ix_state_early_discharge_history_early_discharge_id",
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        "ix_state_early_discharge_history_external_id",
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        "ix_state_early_discharge_history_incarceration_sentence_id",
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        "ix_state_early_discharge_history_person_id",
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        "ix_state_early_discharge_history_state_code",
        table_name="state_early_discharge_history",
    )
    op.drop_index(
        "ix_state_early_discharge_history_supervision_sentence_id",
        table_name="state_early_discharge_history",
    )
    op.drop_table("state_early_discharge_history")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_early_discharge_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the early discharge took place.",
        ),
        sa.Column(
            "decision_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the result of this early decision request was decided.",
        ),
        sa.Column(
            "decision",
            postgresql.ENUM(
                "REQUEST_DENIED",
                "SENTENCE_TERMINATION_GRANTED",
                "UNSUPERVISED_PROBATION_GRANTED",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_early_discharge_decision",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The decided result of this early decision request.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the early discharge decision.",
        ),
        sa.Column(
            "decision_status",
            postgresql.ENUM(
                "PENDING",
                "DECIDED",
                "INVALID",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_early_discharge_decision_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The current status of the early discharge decision.",
        ),
        sa.Column(
            "decision_status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the early discharge decision status.",
        ),
        sa.Column(
            "deciding_body_type",
            postgresql.ENUM(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_acting_body_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of body that made or will make the early discharge decision.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the deciding body type.",
        ),
        sa.Column(
            "request_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the early discharge request took place.",
        ),
        sa.Column(
            "requesting_body_type",
            postgresql.ENUM(
                "COURT",
                "PAROLE_BOARD",
                "SENTENCED_PERSON",
                "SUPERVISION_OFFICER",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_acting_body_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of body that requested the early discharge for this person.",
        ),
        sa.Column(
            "requesting_body_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the requesting body type.",
        ),
        sa.Column(
            "early_discharge_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "early_discharge_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant early discharge information.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["early_discharge_id"],
            ["state_early_discharge.early_discharge_id"],
            name="state_early_discharge_history_early_discharge_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
            name="state_early_discharge_history_incarceration_sentence_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_early_discharge_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
            name="state_early_discharge_history_supervision_sentence_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "early_discharge_history_id", name="state_early_discharge_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_early_discharge_history_supervision_sentence_id",
        "state_early_discharge_history",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_early_discharge_history_state_code",
        "state_early_discharge_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_early_discharge_history_person_id",
        "state_early_discharge_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_early_discharge_history_incarceration_sentence_id",
        "state_early_discharge_history",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_early_discharge_history_external_id",
        "state_early_discharge_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_early_discharge_history_early_discharge_id",
        "state_early_discharge_history",
        ["early_discharge_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_type_entry_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "violation_type",
            postgresql.ENUM(
                "ABSCONDED",
                "ESCAPED",
                "FELONY",
                "LAW",
                "MISDEMEANOR",
                "MUNICIPAL",
                "TECHNICAL",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_supervision_violation_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of violation.",
        ),
        sa.Column(
            "violation_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the violation type.",
        ),
        sa.Column(
            "supervision_violation_type_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_type_entry_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation type entry information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_violation_type_entry_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
            name="state_supervision_violation_type_supervision_violation_id_fkey1",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_type_entry_id"],
            [
                "state_supervision_violation_type_entry.supervision_violation_type_entry_id"
            ],
            name="state_supervision_violation_t_supervision_violation_type_e_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violation_type_history_id",
            name="state_supervision_violation_type_entry_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_violation_type_entry_history_super_c54e",
        "state_supervision_violation_type_entry_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_type_entry_history_super_8db2",
        "state_supervision_violation_type_entry_history",
        ["supervision_violation_type_entry_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_type_entry_history_state_code",
        "state_supervision_violation_type_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_type_entry_history_person_id",
        "state_supervision_violation_type_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        ),
        sa.Column(
            "violation_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the violation took place.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "is_violent",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not the violation was violent in nature.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "supervision_violation_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_violation_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
            name="state_supervision_violation_histo_supervision_violation_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violation_history_id",
            name="state_supervision_violation_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_violation_history_supervision_violation_id",
        "state_supervision_violation_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_history_state_code",
        "state_supervision_violation_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_history_person_id",
        "state_supervision_violation_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_history_external_id",
        "state_supervision_violation_history",
        ["external_id"],
        unique=False,
    )
    op.create_table(
        "state_agent_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateAgent, unique within the scope of the source data system.",
        ),
        sa.Column(
            "agent_type",
            postgresql.ENUM(
                "PRESENT_WITHOUT_INFO",
                "CORRECTIONAL_OFFICER",
                "JUDGE",
                "SUPERVISION_OFFICER",
                "INTERNAL_UNKNOWN",
                "JUSTICE",
                "EXTERNAL_UNKNOWN",
                name="state_agent_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="The type of agent.",
        ),
        sa.Column(
            "agent_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the agent type.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The state agent's full name.",
        ),
        sa.Column(
            "agent_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "agent_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for an agent. If not specified, one will be generated.",
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"],
            ["state_agent.agent_id"],
            name="state_agent_history_agent_id_fkey",
        ),
        sa.PrimaryKeyConstraint("agent_history_id", name="state_agent_history_pkey"),
    )
    op.create_index(
        "ix_state_agent_history_state_code",
        "state_agent_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_agent_history_external_id",
        "state_agent_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_agent_history_agent_id",
        "state_agent_history",
        ["agent_id"],
        unique=False,
    )
    op.create_table(
        "state_person_ethnicity_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "ethnicity",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "HISPANIC",
                "NOT_HISPANIC",
                "INTERNAL_UNKNOWN",
                name="state_ethnicity",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="A person’s reported ethnicity.",
        ),
        sa.Column(
            "ethnicity_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the ethnicity.",
        ),
        sa.Column(
            "person_ethnicity_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_ethnicity_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state person ethnicity, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person ethnicity information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_ethnicity_id"],
            ["state_person_ethnicity.person_ethnicity_id"],
            name="state_person_ethnicity_history_person_ethnicity_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_person_ethnicity_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "person_ethnicity_history_id", name="state_person_ethnicity_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_person_ethnicity_history_state_code",
        "state_person_ethnicity_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_ethnicity_history_person_id",
        "state_person_ethnicity_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_ethnicity_history_person_ethnicity_id",
        "state_person_ethnicity_history",
        ["person_ethnicity_id"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incident_type",
            postgresql.ENUM(
                "PRESENT_WITHOUT_INFO",
                "CONTRABAND",
                "DISORDERLY_CONDUCT",
                "ESCAPE",
                "MINOR_OFFENSE",
                "POSITIVE",
                "REPORT",
                "VIOLENCE",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_incarceration_incident_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of incident.",
        ),
        sa.Column(
            "incident_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the incident type.",
        ),
        sa.Column(
            "incident_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the incident took place.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "facility",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The facility in which the incident took place.",
        ),
        sa.Column(
            "location_within_facility",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The more specific location where the incident took place.",
        ),
        sa.Column(
            "incident_details",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="Descriptive notes describing the incident.",
        ),
        sa.Column(
            "incarceration_incident_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        ),
        sa.Column(
            "responding_officer_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_id"],
            ["state_incarceration_incident.incarceration_incident_id"],
            name="state_incarceration_incident_his_incarceration_incident_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_incarceration_incident_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["responding_officer_id"],
            ["state_agent.agent_id"],
            name="state_incarceration_incident_history_responding_officer_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "incarceration_incident_history_id",
            name="state_incarceration_incident_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_incarceration_incident_history_state_code",
        "state_incarceration_incident_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_history_responding_officer_id",
        "state_incarceration_incident_history",
        ["responding_officer_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_history_person_id",
        "state_incarceration_incident_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_history_incarceration_i_bcc9",
        "state_incarceration_incident_history",
        ["incarceration_incident_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_history_external_id",
        "state_incarceration_incident_history",
        ["external_id"],
        unique=False,
    )
    op.create_table(
        "state_person_race_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "race",
            postgresql.ENUM(
                "AMERICAN_INDIAN_ALASKAN_NATIVE",
                "ASIAN",
                "BLACK",
                "EXTERNAL_UNKNOWN",
                "NATIVE_HAWAIIAN_PACIFIC_ISLANDER",
                "OTHER",
                "WHITE",
                "INTERNAL_UNKNOWN",
                name="state_race",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="A person’s reported race.",
        ),
        sa.Column(
            "race_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the person's race.",
        ),
        sa.Column(
            "person_race_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_race_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person race, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person race information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_person_race_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["person_race_id"],
            ["state_person_race.person_race_id"],
            name="state_person_race_history_person_race_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "person_race_history_id", name="state_person_race_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_person_race_history_state_code",
        "state_person_race_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_race_history_person_race_id",
        "state_person_race_history",
        ["person_race_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_race_history_person_id",
        "state_person_race_history",
        ["person_id"],
        unique=False,
    )
    op.create_table(
        "state_program_assignment_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateProgramAssignment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "program_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a program being assigned to.",
        ),
        sa.Column(
            "program_location_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The id of where the program takes place.",
        ),
        sa.Column(
            "participation_status",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "DENIED",
                "DISCHARGED",
                "IN_PROGRESS",
                "PENDING",
                "REFUSED",
                "INTERNAL_UNKNOWN",
                name="state_program_assignment_participation_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="The status of the person's participation in the program.",
        ),
        sa.Column(
            "participation_status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the participation status.",
        ),
        sa.Column(
            "discharge_reason",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "ABSCONDED",
                "ADVERSE_TERMINATION",
                "COMPLETED",
                "MOVED",
                "OPTED_OUT",
                "PROGRAM_TRANSFER",
                "REINCARCERATED",
                "INTERNAL_UNKNOWN",
                name="state_program_assignment_discharge_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "discharge_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value for the discharge reason.",
        ),
        sa.Column(
            "referral_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was referred to the program, if applicable.",
        ),
        sa.Column(
            "start_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person started the program, if applicable.",
        ),
        sa.Column(
            "discharge_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was discharged from the program, if applicable.",
        ),
        sa.Column(
            "referral_metadata",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular referral. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "program_assignment_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "program_assignment_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) program assignment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant program assignment information.",
        ),
        sa.Column(
            "referring_agent_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_program_assignment_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["program_assignment_id"],
            ["state_program_assignment.program_assignment_id"],
            name="state_program_assignment_history_program_assignment_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["referring_agent_id"],
            ["state_agent.agent_id"],
            name="state_program_assignment_history_referring_agent_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "program_assignment_history_id",
            name="state_program_assignment_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_program_assignment_history_state_code",
        "state_program_assignment_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_program_assignment_history_referring_agent_id",
        "state_program_assignment_history",
        ["referring_agent_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_program_assignment_history_program_assignment_id",
        "state_program_assignment_history",
        ["program_assignment_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_program_assignment_history_person_id",
        "state_program_assignment_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_program_assignment_history_external_id",
        "state_program_assignment_history",
        ["external_id"],
        unique=False,
    )
    op.create_table(
        "state_person_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "current_address",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="The current address of the person.",
        ),
        sa.Column(
            "full_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="A person’s name. Only use this when names are in a single field. Use surname and given_names when they are separate.",
        ),
        sa.Column(
            "birthdate",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="Date the person was born. Use this when it is known. When a person’s age but not birthdate is reported, use age instead.",
        ),
        sa.Column(
            "gender",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "FEMALE",
                "MALE",
                "OTHER",
                "TRANS",
                "TRANS_FEMALE",
                "TRANS_MALE",
                "INTERNAL_UNKNOWN",
                name="state_gender",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="A person’s gender, as reported by the state.",
        ),
        sa.Column(
            "gender_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the person's state-reported gender.",
        ),
        sa.Column(
            "residency_status",
            postgresql.ENUM(
                "HOMELESS",
                "PERMANENT",
                "TRANSIENT",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_residency_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="A person's reported residency status.",
        ),
        sa.Column(
            "residency_status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text used to derive a person's reported residency status.",
        ),
        sa.Column(
            "person_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state person information.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_person_history_person_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
            name="state_person_history_supervising_officer_id_fkey",
        ),
        sa.PrimaryKeyConstraint("person_history_id", name="state_person_history_pkey"),
    )
    op.create_index(
        "ix_state_person_history_supervising_officer_id",
        "state_person_history",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_history_state_code",
        "state_person_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_history_person_id",
        "state_person_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_history_full_name",
        "state_person_history",
        ["full_name"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_history_birthdate",
        "state_person_history",
        ["birthdate"],
        unique=False,
    )
    op.create_table(
        "state_supervision_sentence_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateSupervisionSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                "PENDING",
                "SANCTIONED",
                "INTERNAL_UNKNOWN",
                name="state_sentence_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="The current status of this sentence.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the current status of this sentence.",
        ),
        sa.Column(
            "supervision_type",
            postgresql.ENUM(
                "CIVIL_COMMITMENT",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "HALFWAY_HOUSE",
                "PAROLE",
                "POST_CONFINEMENT",
                "PRE_CONFINEMENT",
                "PROBATION",
                "COMMUNITY_CORRECTIONS",
                name="state_supervision_sentence_supervision_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the type of supervision the person is being sentenced to.",
        ),
        sa.Column(
            "date_imposed",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        ),
        sa.Column(
            "start_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person started serving the sentence.",
        ),
        sa.Column(
            "projected_completion_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The earliest projected date the person may have completed their supervision.",
        ),
        sa.Column(
            "completion_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person actually did complete their supervision.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Maximum duration of this sentence in days.",
        ),
        sa.Column(
            "supervision_sentence_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_sentence_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_metadata",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="Arbitrary JSON-formatted metadata relevant to a fine understanding of a particular sentence. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "conditions",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="The conditions of this supervision sentence which the person must follow to avoid a disciplinary response. If this field is empty, there may still be applicable conditions that apply to someone's current term of supervision/incarceration - either inherited from another ongoing sentence or the current supervision term. (See conditions on StateSupervisionPeriod).",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_sentence_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_sentence_id"],
            ["state_supervision_sentence.supervision_sentence_id"],
            name="state_supervision_sentence_history_supervision_sentence_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_sentence_history_id",
            name="state_supervision_sentence_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_sentence_history_supervision_sentence_id",
        "state_supervision_sentence_history",
        ["supervision_sentence_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_sentence_history_state_code",
        "state_supervision_sentence_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_sentence_history_person_id",
        "state_supervision_sentence_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_sentence_history_external_id",
        "state_supervision_sentence_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_sentence_history_county_code",
        "state_supervision_sentence_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_contact_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateSupervisionContact, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "contact_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date when this contact happened.",
        ),
        sa.Column(
            "contact_reason",
            postgresql.ENUM(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "EMERGENCY_CONTACT",
                "GENERAL_CONTACT",
                "INITIAL_CONTACT",
                name="state_supervision_contact_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason why this contact took place.",
        ),
        sa.Column(
            "contact_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the contact reason.",
        ),
        sa.Column(
            "contact_type",
            postgresql.ENUM(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COLLATERAL",
                "DIRECT",
                "BOTH_COLLATERAL_AND_DIRECT",
                name="state_supervision_contact_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of contact which took place.",
        ),
        sa.Column(
            "contact_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the contact type.",
        ),
        sa.Column(
            "contact_method",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "IN_PERSON",
                "TELEPHONE",
                "VIRTUAL",
                "WRITTEN_MESSAGE",
                name="state_supervision_contact_method",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The method used to perform the contact.",
        ),
        sa.Column(
            "contact_method_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the contact method.",
        ),
        sa.Column(
            "location",
            postgresql.ENUM(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "COURT",
                "FIELD",
                "JAIL",
                "PLACE_OF_EMPLOYMENT",
                "RESIDENCE",
                "SUPERVISION_OFFICE",
                "TREATMENT_PROVIDER",
                "LAW_ENFORCEMENT_AGENCY",
                "PAROLE_COMMISSION",
                "ALTERNATIVE_WORK_SITE",
                name="state_supervision_contact_location",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="Where this contact took place.",
        ),
        sa.Column(
            "location_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the contact location.",
        ),
        sa.Column(
            "resulted_in_arrest",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not this contact resulted in the person's arrest.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "ATTEMPTED",
                "COMPLETED",
                name="state_supervision_contact_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The current status of this contact.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the contact status.",
        ),
        sa.Column(
            "verified_employment",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not the person's current employment status was verified at this contact.",
        ),
        sa.Column(
            "supervision_contact_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_contact_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state supervision contact, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision contact information.",
        ),
        sa.Column(
            "contacted_agent_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["contacted_agent_id"],
            ["state_agent.agent_id"],
            name="state_supervision_contact_history_contacted_agent_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_contact_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_contact_id"],
            ["state_supervision_contact.supervision_contact_id"],
            name="state_supervision_contact_history_supervision_contact_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_contact_history_id",
            name="state_supervision_contact_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_contact_history_supervision_contact_id",
        "state_supervision_contact_history",
        ["supervision_contact_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_contact_history_state_code",
        "state_supervision_contact_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_contact_history_person_id",
        "state_supervision_contact_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_contact_history_external_id",
        "state_supervision_contact_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_contact_history_contacted_agent_id",
        "state_supervision_contact_history",
        ["contacted_agent_id"],
        unique=False,
    )
    op.create_table(
        "state_court_case_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "INTERNAL_UNKNOWN",
                name="state_court_case_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The current status of the case.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the current status of the case.",
        ),
        sa.Column(
            "court_type",
            postgresql.ENUM(
                "PRESENT_WITHOUT_INFO",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_court_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of court this charge will be/was heard in.",
        ),
        sa.Column(
            "court_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the court type.",
        ),
        sa.Column(
            "date_convicted",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was convicted, if applicable.",
        ),
        sa.Column(
            "next_court_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="Date of the next scheduled court appearance for this case, if applicable.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "judicial_district_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the judicial district under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "court_case_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "court_case_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
        sa.Column(
            "judge_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["court_case_id"],
            ["state_court_case.court_case_id"],
            name="state_court_case_history_court_case_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["judge_id"],
            ["state_agent.agent_id"],
            name="state_court_case_history_judge_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_court_case_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "court_case_history_id", name="state_court_case_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_court_case_history_state_code",
        "state_court_case_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_history_person_id",
        "state_court_case_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_history_judge_id",
        "state_court_case_history",
        ["judge_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_history_external_id",
        "state_court_case_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_history_court_case_id",
        "state_court_case_history",
        ["court_case_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_court_case_history_county_code",
        "state_court_case_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_sentence_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateIncarcerationSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "COMMUTED",
                "COMPLETED",
                "EXTERNAL_UNKNOWN",
                "PARDONED",
                "PRESENT_WITHOUT_INFO",
                "SERVING",
                "SUSPENDED",
                "REVOKED",
                "VACATED",
                "PENDING",
                "SANCTIONED",
                "INTERNAL_UNKNOWN",
                name="state_sentence_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the status of the sentence.",
        ),
        sa.Column(
            "incarceration_type",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                "INTERNAL_UNKNOWN",
                name="state_incarceration_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of incarceration the person is being sentenced to.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the type of incarceration of this sentence.",
        ),
        sa.Column(
            "date_imposed",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence",
        ),
        sa.Column(
            "start_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date this sentence started.",
        ),
        sa.Column(
            "projected_min_release_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The earliest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "projected_max_release_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The latest projected date the person may be released from incarceration due to this sentence.",
        ),
        sa.Column(
            "completion_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date this sentence has been completed.",
        ),
        sa.Column(
            "parole_eligibility_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The first date under which the person becomes eligible for parole under the terms of this sentence.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The code of the state under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed.",
        ),
        sa.Column(
            "min_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The minimum duration of this sentence in days.",
        ),
        sa.Column(
            "max_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The maximum duration of this sentence in days.",
        ),
        sa.Column(
            "is_life",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not this is a life sentence.",
        ),
        sa.Column(
            "is_capital_punishment",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not this is a sentence for the death penalty.",
        ),
        sa.Column(
            "parole_possible",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not the person may be released to parole under the terms of this sentence.",
        ),
        sa.Column(
            "initial_time_served_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The amount of any time already served (in days), to possible be credited against the overall sentence duration.",
        ),
        sa.Column(
            "good_time_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Any good time (in days) the person has credited against this sentence due to good conduct, a.k.a. time off for good behavior, if applicable.",
        ),
        sa.Column(
            "earned_time_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Any earned time (in days) the person has credited against this sentence due to participation in programming designed to reduce the likelihood of re-offense, if applicable.",
        ),
        sa.Column(
            "incarceration_sentence_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_sentence_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.Column(
            "sentence_metadata",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="Arbitrary JSON-formatted metadata relevant to a fine understanding of a particular sentence. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "conditions",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="The conditions of this incarceration sentence which the person must follow to avoid a disciplinary response. If this field is empty, there may still be applicable conditions that apply to someone's current term of supervision/incarceration - either inherited from another ongoing sentence or the current supervision term. (See conditions on StateSupervisionPeriod).",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_sentence_id"],
            ["state_incarceration_sentence.incarceration_sentence_id"],
            name="state_incarceration_sentence_his_incarceration_sentence_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_incarceration_sentence_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "incarceration_sentence_history_id",
            name="state_incarceration_sentence_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_incarceration_sentence_history_state_code",
        "state_incarceration_sentence_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_sentence_history_person_id",
        "state_incarceration_sentence_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_sentence_history_incarceration_s_d830",
        "state_incarceration_sentence_history",
        ["incarceration_sentence_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_sentence_history_external_id",
        "state_incarceration_sentence_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_sentence_history_county_code",
        "state_incarceration_sentence_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_person_external_id_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The unique identifier for the StatePersonExternalId, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "id_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The type of id provided by the system. For example, in a state with multiple data systems that we ingest, this may be the name of the system from the id emanates.",
        ),
        sa.Column(
            "person_external_id_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_external_id_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person external id, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person external id information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_external_id_id"],
            ["state_person_external_id.person_external_id_id"],
            name="state_person_external_id_history_person_external_id_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_person_external_id_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "person_external_id_history_id",
            name="state_person_external_id_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_person_external_id_history_state_code",
        "state_person_external_id_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_external_id_history_person_id",
        "state_person_external_id_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_external_id_history_person_external_id_id",
        "state_person_external_id_history",
        ["person_external_id_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_external_id_history_external_id",
        "state_person_external_id_history",
        ["external_id"],
        unique=False,
    )
    op.create_table(
        "state_person_alias_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "full_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="A person’s name.",
        ),
        sa.Column(
            "alias_type",
            postgresql.ENUM(
                "AFFILIATION_NAME",
                "ALIAS",
                "GIVEN_NAME",
                "MAIDEN_NAME",
                "NICKNAME",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_person_alias_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of the name alias.",
        ),
        sa.Column(
            "alias_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value for the alias type.",
        ),
        sa.Column(
            "person_alias_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "person_alias_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person alias, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person alias information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_alias_id"],
            ["state_person_alias.person_alias_id"],
            name="state_person_alias_history_person_alias_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_person_alias_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "person_alias_history_id", name="state_person_alias_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_person_alias_history_state_code",
        "state_person_alias_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_alias_history_person_id",
        "state_person_alias_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_person_alias_history_person_alias_id",
        "state_person_alias_history",
        ["person_alias_id"],
        unique=False,
    )
    op.create_table(
        "state_charge_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "ACQUITTED",
                "COMPLETED_SENTENCE",
                "CONVICTED",
                "DROPPED",
                "INFERRED_DROPPED",
                "EXTERNAL_UNKNOWN",
                "PENDING",
                "PRETRIAL",
                "SENTENCED",
                "PRESENT_WITHOUT_INFO",
                "ADJUDICATED",
                "TRANSFERRED_AWAY",
                "INTERNAL_UNKNOWN",
                name="state_charge_status",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
            comment="The status of the charge.",
        ),
        sa.Column(
            "status_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the status of the charge.",
        ),
        sa.Column(
            "offense_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date of the alleged offense that led to this charge.",
        ),
        sa.Column(
            "date_charged",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was charged with the alleged offense.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county under whose jurisdiction the charge was brought.",
        ),
        sa.Column(
            "ncic_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        ),
        sa.Column(
            "statute",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The identifier of the charge in the state or federal code.",
        ),
        sa.Column(
            "description",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="A text description of the charge.",
        ),
        sa.Column(
            "attempted",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        ),
        sa.Column(
            "classification_type",
            postgresql.ENUM(
                "CIVIL",
                "EXTERNAL_UNKNOWN",
                "FELONY",
                "INFRACTION",
                "MISDEMEANOR",
                "OTHER",
                "INTERNAL_UNKNOWN",
                name="state_charge_classification_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="Charge classification.",
        ),
        sa.Column(
            "classification_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the charge classification.",
        ),
        sa.Column(
            "classification_subtype",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        ),
        sa.Column(
            "offense_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The type of offense associated with the charge.",
        ),
        sa.Column(
            "is_violent",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether this charge was for a violent crime or not.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "counts",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The number of counts of this charge which are being brought against the person.",
        ),
        sa.Column(
            "charge_notes",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="Free text containing other information about a charge.",
        ),
        sa.Column(
            "charging_entity",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        ),
        sa.Column(
            "is_controlling",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        ),
        sa.Column(
            "charge_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "charge_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state charge information.",
        ),
        sa.Column(
            "court_case_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_id"],
            ["state_charge.charge_id"],
            name="state_charge_history_charge_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["court_case_id"],
            ["state_court_case.court_case_id"],
            name="state_charge_history_court_case_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_charge_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("charge_history_id", name="state_charge_history_pkey"),
    )
    op.create_index(
        "ix_state_charge_history_state_code",
        "state_charge_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_history_person_id",
        "state_charge_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_history_external_id",
        "state_charge_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_history_court_case_id",
        "state_charge_history",
        ["court_case_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_history_county_code",
        "state_charge_history",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_charge_history_charge_id",
        "state_charge_history",
        ["charge_id"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_incident_outcome_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        ),
        sa.Column(
            "outcome_type",
            postgresql.ENUM(
                "CELL_CONFINEMENT",
                "DISCIPLINARY_LABOR",
                "DISMISSED",
                "EXTERNAL_PROSECUTION",
                "FINANCIAL_PENALTY",
                "GOOD_TIME_LOSS",
                "MISCELLANEOUS",
                "NOT_GUILTY",
                "PRIVILEGE_LOSS",
                "RESTRICTED_CONFINEMENT",
                "SOLITARY",
                "TREATMENT",
                "WARNING",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_incarceration_incident_outcome_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of outcome.",
        ),
        sa.Column(
            "outcome_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the outcome type.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "date_effective",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the outcome takes effect.",
        ),
        sa.Column(
            "hearing_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the hearing for the incident is taking place.",
        ),
        sa.Column(
            "report_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the incident was reported.",
        ),
        sa.Column(
            "outcome_description",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Descriptive notes describing the outcome.",
        ),
        sa.Column(
            "punishment_length_days",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The length of any durational, punishment-focused outcome.",
        ),
        sa.Column(
            "incarceration_incident_outcome_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_incident_outcome_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident outcome information.",
        ),
        sa.Column(
            "incarceration_incident_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_id"],
            ["state_incarceration_incident.incarceration_incident_id"],
            name="state_incarceration_incident_ou_incarceration_incident_id_fkey1",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_incident_outcome_id"],
            ["state_incarceration_incident_outcome.incarceration_incident_outcome_id"],
            name="state_incarceration_incident__incarceration_incident_outco_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_incarceration_incident_outcome_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "incarceration_incident_outcome_history_id",
            name="state_incarceration_incident_outcome_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_incarceration_incident_outcome_history_state_code",
        "state_incarceration_incident_outcome_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_outcome_history_person_id",
        "state_incarceration_incident_outcome_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_outcome_history_incarce_bf65",
        "state_incarceration_incident_outcome_history",
        ["incarceration_incident_outcome_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_outcome_history_incarce_a75f",
        "state_incarceration_incident_outcome_history",
        ["incarceration_incident_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_incident_outcome_history_external_id",
        "state_incarceration_incident_outcome_history",
        ["external_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_decision_entry_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "decision",
            postgresql.ENUM(
                "COMMUNITY_SERVICE",
                "CONTINUANCE",
                "DELAYED_ACTION",
                "EXTENSION",
                "INTERNAL_UNKNOWN",
                "NEW_CONDITIONS",
                "OTHER",
                "REVOCATION",
                "PRIVILEGES_REVOKED",
                "SERVICE_TERMINATION",
                "SHOCK_INCARCERATION",
                "SPECIALIZED_COURT",
                "SUSPENSION",
                "TREATMENT_IN_PRISON",
                "TREATMENT_IN_FIELD",
                "WARNING",
                "WARRANT_ISSUED",
                "VIOLATION_UNFOUNDED",
                "EXTERNAL_UNKNOWN",
                name="state_supervision_violation_response_decision",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="A specific decision that was made in response, if applicable.",
        ),
        sa.Column(
            "decision_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision violation response decision.",
        ),
        sa.Column(
            "supervision_violation_response_decision_entry_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_response_decision_entry_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_violation_response_decision_e_person_id_fkey1",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_decision_entry_id"],
            [
                "state_supervision_violation_response_decision_entry.supervision_violation_response_decision_entry_id"
            ],
            name="state_supervision_violation__supervision_violation_respon_fkey3",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
            name="state_supervision_violation__supervision_violation_respon_fkey4",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violation_response_decision_entry_history_id",
            name="state_supervision_violation_response_decision_entry_histor_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_violation_response_decision_entry__df7c",
        "state_supervision_violation_response_decision_entry_history",
        ["supervision_violation_response_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_decision_entry__82c7",
        "state_supervision_violation_response_decision_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_decision_entry__7153",
        "state_supervision_violation_response_decision_entry_history",
        ["supervision_violation_response_decision_entry_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_decision_entry__288c",
        "state_supervision_violation_response_decision_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violated_condition_entry_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "condition",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The specific condition of supervision which was violated.",
        ),
        sa.Column(
            "supervision_violated_condition_entry_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violated_condition_entry_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response decision entry information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_violated_condition_entry_histo_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violated_condition_entry_id"],
            [
                "state_supervision_violated_condition_entry.supervision_violated_condition_entry_id"
            ],
            name="state_supervision_violated_co_supervision_violated_conditi_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
            name="state_supervision_violated_condi_supervision_violation_id_fkey1",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violated_condition_entry_history_id",
            name="state_supervision_violated_condition_entry_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_violated_condition_entry_history_s_f575",
        "state_supervision_violated_condition_entry_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violated_condition_entry_history_s_d225",
        "state_supervision_violated_condition_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violated_condition_entry_history_s_3f94",
        "state_supervision_violated_condition_entry_history",
        ["supervision_violated_condition_entry_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violated_condition_entry_history_person_id",
        "state_supervision_violated_condition_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_period_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateSupervisionPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "supervision_type",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "INFORMAL_PROBATION",
                "INVESTIGATION",
                "PAROLE",
                "PROBATION",
                "DUAL",
                "COMMUNITY_CONFINEMENT",
                "BENCH_WARRANT",
                "ABSCONSION",
                name="state_supervision_period_supervision_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of supervision the person is serving during this time period.",
        ),
        sa.Column(
            "supervision_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision period supervision type.",
        ),
        sa.Column(
            "start_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person began this period of supervision.",
        ),
        sa.Column(
            "termination_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the period of supervision was terminated, either positively or negatively.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The code of the county where the person is currently supervised.",
        ),
        sa.Column(
            "supervision_site",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="A single string encoding the location (i.e. office/region/district) this person is being supervised out of. This field may eventually be split into multiple to better encode supervision org structure. See #3829.",
        ),
        sa.Column(
            "admission_reason",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "CONDITIONAL_RELEASE",
                "COURT_SENTENCE",
                "INVESTIGATION",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_FROM_SUSPENSION",
                name="state_supervision_period_admission_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason the person was admitted to this particular period of supervision.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision period's admission reason.",
        ),
        sa.Column(
            "termination_reason",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "ABSCONSION",
                "COMMUTED",
                "DEATH",
                "DISCHARGE",
                "DISMISSED",
                "EXPIRATION",
                "INVESTIGATION",
                "PARDONED",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "TRANSFER_WITHIN_STATE",
                "RETURN_FROM_ABSCONSION",
                "RETURN_TO_INCARCERATION",
                "REVOCATION",
                "SUSPENSION",
                name="state_supervision_period_termination_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason the period of supervision was terminated.",
        ),
        sa.Column(
            "termination_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision period's termination reason.",
        ),
        sa.Column(
            "supervision_level",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                "MINIMUM",
                "MEDIUM",
                "HIGH",
                "MAXIMUM",
                "INCARCERATED",
                "IN_CUSTODY",
                "DIVERSION",
                "INTERSTATE_COMPACT",
                "LIMITED",
                "ELECTRONIC_MONITORING_ONLY",
                "UNSUPERVISED",
                "UNASSIGNED",
                name="state_supervision_level",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The level of supervision the person is receiving, i.e. an analog to the security level of incarceration, indicating frequency of contact, strictness of constraints, etc.",
        ),
        sa.Column(
            "supervision_level_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision period's supervision level.",
        ),
        sa.Column(
            "conditions",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="The conditions of this period of supervision which the person must followto avoid a disciplinary response. If this is empty, there may still be applicable conditions that apply to the whole term of the sentence. (See conditions on StateSupervisionSentence/StateIncarcerationSentence)",
        ),
        sa.Column(
            "custodial_authority",
            postgresql.ENUM(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision period's custodial authority.",
        ),
        sa.Column(
            "supervision_period_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision period information.",
        ),
        sa.Column(
            "supervising_officer_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_period_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervising_officer_id"],
            ["state_agent.agent_id"],
            name="state_supervision_period_history_supervising_officer_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_period_id"],
            ["state_supervision_period.supervision_period_id"],
            name="state_supervision_period_history_supervision_period_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_period_history_id",
            name="state_supervision_period_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_period_history_supervision_period_id",
        "state_supervision_period_history",
        ["supervision_period_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_period_history_supervising_officer_id",
        "state_supervision_period_history",
        ["supervising_officer_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_period_history_state_code",
        "state_supervision_period_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_period_history_person_id",
        "state_supervision_period_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_period_history_external_id",
        "state_supervision_period_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_period_history_county_code",
        "state_supervision_period_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_assessment_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateAssessment, unique within the scope of the source data system.",
        ),
        sa.Column(
            "assessment_class",
            postgresql.ENUM(
                "MENTAL_HEALTH",
                "RISK",
                "SECURITY_CLASSIFICATION",
                "SEX_OFFENSE",
                "SOCIAL",
                "SUBSTANCE_ABUSE",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_assessment_class",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The classification of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_class_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the classification of assessment.",
        ),
        sa.Column(
            "assessment_type",
            postgresql.ENUM(
                "ASI",
                "CSSM",
                "HIQ",
                "LSIR",
                "PA_RST",
                "PSA",
                "SORAC",
                "STATIC_99",
                "TCU_DRUG_SCREEN",
                "ORAS_COMMUNITY_SUPERVISION",
                "ORAS_COMMUNITY_SUPERVISION_SCREENING",
                "ORAS_MISDEMEANOR_ASSESSMENT",
                "ORAS_MISDEMEANOR_SCREENING",
                "ORAS_PRE_TRIAL",
                "ORAS_PRISON_SCREENING",
                "ORAS_PRISON_INTAKE",
                "ORAS_REENTRY",
                "ORAS_STATIC",
                "ORAS_SUPPLEMENTAL_REENTRY",
                "INTERNAL_UNKNOWN",
                "STRONG_R",
                "J_SOAP",
                "ODARA",
                "OYAS",
                "SOTIPS",
                "SPIN_W",
                "STABLE",
                "EXTERNAL_UNKNOWN",
                name="state_assessment_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The specific type of assessment that was conducted.",
        ),
        sa.Column(
            "assessment_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the assessment type.",
        ),
        sa.Column(
            "assessment_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the assessment was conducted.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "assessment_score",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The final score output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "LOW",
                "LOW_MEDIUM",
                "MEDIUM",
                "MEDIUM_HIGH",
                "MODERATE",
                "HIGH",
                "VERY_HIGH",
                "MINIMUM",
                "MAXIMUM",
                "INTERNAL_UNKNOWN",
                name="state_assessment_level",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The final level output by the assessment, if applicable.",
        ),
        sa.Column(
            "assessment_level_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the assessment level",
        ),
        sa.Column(
            "assessment_metadata",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="This includes whichever fields and values are relevant to a fine understanding of a particular assessment. It can be provided in any format, but will be transformed into JSON prior to persistence.",
        ),
        sa.Column(
            "assessment_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "assessment_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state assessment, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state assessment information.",
        ),
        sa.Column(
            "conducting_agent_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="The id of the agent conducting this assessment.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["assessment_id"],
            ["state_assessment.assessment_id"],
            name="state_assessment_history_assessment_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["conducting_agent_id"],
            ["state_agent.agent_id"],
            name="state_assessment_history_conducting_agent_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_assessment_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "assessment_history_id", name="state_assessment_history_pkey"
        ),
    )
    op.create_index(
        "ix_state_assessment_history_state_code",
        "state_assessment_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_assessment_history_person_id",
        "state_assessment_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_assessment_history_external_id",
        "state_assessment_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_assessment_history_conducting_agent_id",
        "state_assessment_history",
        ["conducting_agent_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_assessment_history_assessment_id",
        "state_assessment_history",
        ["assessment_id"],
        unique=False,
    )
    op.create_table(
        "state_supervision_case_type_entry_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "case_type",
            postgresql.ENUM(
                "ALCOHOL_DRUG",
                "DOMESTIC_VIOLENCE",
                "DRUG_COURT",
                "FAMILY_COURT",
                "GENERAL",
                "MENTAL_HEALTH_COURT",
                "SERIOUS_MENTAL_ILLNESS",
                "SEX_OFFENSE",
                "VETERANS_COURT",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_supervision_case_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of case that describes the associated period of supervision.",
        ),
        sa.Column(
            "case_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the case type.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "supervision_case_type_entry_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_case_type_entry_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) state case type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state case type entry information.",
        ),
        sa.Column(
            "supervision_period_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) state supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state supervision period information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_case_type_entry_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_case_type_entry_id"],
            ["state_supervision_case_type_entry.supervision_case_type_entry_id"],
            name="state_supervision_case_type_e_supervision_case_type_entry__fkey",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_period_id"],
            ["state_supervision_period.supervision_period_id"],
            name="state_supervision_case_type_entry_hi_supervision_period_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_case_type_entry_history_id",
            name="state_supervision_case_type_entry_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_case_type_entry_history_supervisio_ea65",
        "state_supervision_case_type_entry_history",
        ["supervision_period_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_case_type_entry_history_supervisio_9f75",
        "state_supervision_case_type_entry_history",
        ["supervision_case_type_entry_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_case_type_entry_history_state_code",
        "state_supervision_case_type_entry_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_case_type_entry_history_person_id",
        "state_supervision_case_type_entry_history",
        ["person_id"],
        unique=False,
    )
    op.create_table(
        "state_incarceration_period_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "incarceration_type",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "OUT_OF_STATE",
                "STATE_PRISON",
                "INTERNAL_UNKNOWN",
                name="state_incarceration_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of incarceration the person is serving.",
        ),
        sa.Column(
            "incarceration_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the incarceration period type.",
        ),
        sa.Column(
            "admission_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "release_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="he code of the county where the person is currently incarcerated.",
        ),
        sa.Column(
            "facility",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The facility in which the person is currently incarcerated.",
        ),
        sa.Column(
            "housing_unit",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The housing unit within the facility in which the person currently resides.",
        ),
        sa.Column(
            "admission_reason",
            postgresql.ENUM(
                "ADMITTED_IN_ERROR",
                "ADMITTED_FROM_SUPERVISION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "NEW_ADMISSION",
                "REVOCATION",
                "SANCTION_ADMISSION",
                "RETURN_FROM_ERRONEOUS_RELEASE",
                "RETURN_FROM_TEMPORARY_RELEASE",
                "RETURN_FROM_ESCAPE",
                "TEMPORARY_CUSTODY",
                "TRANSFER",
                "TRANSFER_FROM_OTHER_JURISDICTION",
                "STATUS_CHANGE",
                name="state_incarceration_period_admission_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason the person was admitted to this particular period of incarceration.",
        ),
        sa.Column(
            "admission_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the incarceration period admission reason.",
        ),
        sa.Column(
            "release_reason",
            postgresql.ENUM(
                "COMMUTED",
                "COMPASSIONATE",
                "CONDITIONAL_RELEASE",
                "COURT_ORDER",
                "DEATH",
                "ESCAPE",
                "EXECUTION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "PARDONED",
                "RELEASED_FROM_ERRONEOUS_ADMISSION",
                "RELEASED_FROM_TEMPORARY_CUSTODY",
                "RELEASED_IN_ERROR",
                "RELEASED_TO_SUPERVISION",
                "SENTENCE_SERVED",
                "TEMPORARY_RELEASE",
                "TRANSFER",
                "TRANSFER_TO_OTHER_JURISDICTION",
                "VACATED",
                "STATUS_CHANGE",
                name="state_incarceration_period_release_reason",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The reason the person was released from this particular period of incarceration.",
        ),
        sa.Column(
            "release_reason_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the incarceration period's release reason.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration",
            postgresql.ENUM(
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                "GENERAL",
                "PAROLE_BOARD_HOLD",
                "SHOCK_INCARCERATION",
                "TREATMENT_IN_PRISON",
                "TEMPORARY_CUSTODY",
                "WEEKEND_CONFINEMENT",
                name="state_specialized_purpose_for_incarceration",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The specialized purpose for incarceration for this particular incarceration period.",
        ),
        sa.Column(
            "specialized_purpose_for_incarceration_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the specialized purpose for incarceration.",
        ),
        sa.Column(
            "custodial_authority",
            postgresql.ENUM(
                "COURT",
                "EXTERNAL_UNKNOWN",
                "FEDERAL",
                "INTERNAL_UNKNOWN",
                "OTHER_COUNTRY",
                "OTHER_STATE",
                "SUPERVISION_AUTHORITY",
                "STATE_PRISON",
                name="state_custodial_authority",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        ),
        sa.Column(
            "custodial_authority_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the incarceration period's custodial authority.",
        ),
        sa.Column(
            "incarceration_period_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "incarceration_period_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["incarceration_period_id"],
            ["state_incarceration_period.incarceration_period_id"],
            name="state_incarceration_period_history_incarceration_period_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_incarceration_period_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "incarceration_period_history_id",
            name="state_incarceration_period_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_incarceration_period_history_state_code",
        "state_incarceration_period_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_period_history_person_id",
        "state_incarceration_period_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_period_history_incarceration_period_id",
        "state_incarceration_period_history",
        ["incarceration_period_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_period_history_external_id",
        "state_incarceration_period_history",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_incarceration_period_history_county_code",
        "state_incarceration_period_history",
        ["county_code"],
        unique=False,
    )
    op.create_table(
        "state_supervision_violation_response_history",
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
            comment="Timestamp on which the columns started having the associated values.",
        ),
        sa.Column(
            "valid_to",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
            comment="Timestamp on which the columns stopped having the associated values.",
        ),
        sa.Column(
            "external_id",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        ),
        sa.Column(
            "response_type",
            postgresql.ENUM(
                "CITATION",
                "VIOLATION_REPORT",
                "PERMANENT_DECISION",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_supervision_violation_response_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of response to the violation.",
        ),
        sa.Column(
            "response_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the response type.",
        ),
        sa.Column(
            "response_subtype",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The type of response subtype to the violation.",
        ),
        sa.Column(
            "response_date",
            sa.DATE(),
            autoincrement=False,
            nullable=True,
            comment="The date on which the response was made official.",
        ),
        sa.Column(
            "state_code",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "deciding_body_type",
            postgresql.ENUM(
                "COURT",
                "PAROLE_BOARD",
                "SUPERVISION_OFFICER",
                "EXTERNAL_UNKNOWN",
                "INTERNAL_UNKNOWN",
                name="state_supervision_violation_response_deciding_body_type",
                create_type=False,
            ),
            autoincrement=False,
            nullable=True,
            comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        ),
        sa.Column(
            "deciding_body_type_raw_text",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="The raw text value of the supervision violation deciding body type.",
        ),
        sa.Column(
            "is_draft",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=True,
            comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        ),
        sa.Column(
            "supervision_violation_response_history_id",
            sa.INTEGER(),
            autoincrement=True,
            nullable=False,
            comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        ),
        sa.Column(
            "supervision_violation_response_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        ),
        sa.Column(
            "supervision_violation_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        ),
        sa.Column(
            "person_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            name="state_supervision_violation_response_history_person_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_id"],
            ["state_supervision_violation.supervision_violation_id"],
            name="state_supervision_violation_resp_supervision_violation_id_fkey1",
        ),
        sa.ForeignKeyConstraint(
            ["supervision_violation_response_id"],
            ["state_supervision_violation_response.supervision_violation_response_id"],
            name="state_supervision_violation__supervision_violation_respon_fkey2",
        ),
        sa.PrimaryKeyConstraint(
            "supervision_violation_response_history_id",
            name="state_supervision_violation_response_history_pkey",
        ),
    )
    op.create_index(
        "ix_state_supervision_violation_response_history_supervi_ca01",
        "state_supervision_violation_response_history",
        ["supervision_violation_response_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_history_supervi_a3b2",
        "state_supervision_violation_response_history",
        ["supervision_violation_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_history_state_code",
        "state_supervision_violation_response_history",
        ["state_code"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_history_person_id",
        "state_supervision_violation_response_history",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        "ix_state_supervision_violation_response_history_external_id",
        "state_supervision_violation_response_history",
        ["external_id"],
        unique=False,
    )
    # ### end Alembic commands ###
