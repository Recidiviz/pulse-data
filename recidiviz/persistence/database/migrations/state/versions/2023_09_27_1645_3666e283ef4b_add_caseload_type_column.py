# pylint: skip-file
"""add_caseload_type_column

Revision ID: 3666e283ef4b
Revises: 604193f2096f
Create Date: 2023-09-27 16:45:19.225254

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3666e283ef4b"
down_revision = "604193f2096f"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    state_staff_caseload_type = postgresql.ENUM(
        "SEX_OFFENSE",
        "ADMINISTRATIVE_SUPERVISION",
        "ALCOHOL_AND_DRUG",
        "INTENSIVE",
        "MENTAL_HEALTH",
        "ELECTRONIC_MONITORING",
        "OTHER_COURT",
        "DRUG_COURT",
        "VETERANS_COURT",
        "COMMUNITY_FACILITY",
        "OTHER",
        "GENERAL",
        "INTERNAL_UNKNOWN",
        "EXTERNAL_UNKNOWN",
        name="state_staff_caseload_type",
    )
    state_staff_caseload_type.create(op.get_bind())

    op.add_column(
        "state_staff_caseload_type_period",
        sa.Column(
            "caseload_type",
            sa.Enum(
                "SEX_OFFENSE",
                "ADMINISTRATIVE_SUPERVISION",
                "ALCOHOL_AND_DRUG",
                "INTENSIVE",
                "MENTAL_HEALTH",
                "ELECTRONIC_MONITORING",
                "OTHER_COURT",
                "DRUG_COURT",
                "VETERANS_COURT",
                "COMMUNITY_FACILITY",
                "OTHER",
                "GENERAL",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_staff_caseload_type",
            ),
            nullable=True,
            comment="Indicates the type of the caseload an officer supervises",
        ),
    )
    op.add_column(
        "state_staff_caseload_type_period",
        sa.Column(
            "caseload_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="Raw text for the caseload type field.",
        ),
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateStaffCaseloadTypePeriod, unique within the scope of the source data system.",
        existing_comment="The unique identifier for the StateStaffLocationPeriod, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "start_date",
        existing_type=sa.DATE(),
        comment="The beginning of the period where this officer had this type of caseload.",
        existing_comment="The beginning of the period where this officer had this type of specialized caseload.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "end_date",
        existing_type=sa.DATE(),
        comment="The end of the period where this officer had this type of caseload.",
        existing_comment="The end of the period where this officer had this type of specialized caseload.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_staff_caseload_type_period",
        "This table will have one row for each period in which one officer had a particular type of caseload. If the nature of their caseload changes over time, they will have more than one period reflecting the dates of those changes and what specialization, if any, corresponded to each period of their employment. Eventually, correctional officers who work in facilities will also be included in this table.",
        existing_comment="This table will have one row for each period in which one officer had a particular type of specialized caseload. If the nature of their specialization changes over time, they will have more than one period reflecting the dates of those changes and what specialization corresponded to each period of their employment. Eventually, correctional officers who work in facilities and have specialized caseloads will also be included in this table.",
        schema=None,
    )

    # Copy existing enum field and raw text field values to new columns
    op.execute(
        """
        UPDATE state_staff_caseload_type_period 
        SET 
            -- We're not allowed to set the former type into the column with the new type directly, we must first convert.
            caseload_type = state_staff_specialized_caseload_type::text::state_staff_caseload_type, 
            caseload_type_raw_text = state_staff_specialized_caseload_type_raw_text
        """
    )

    # Now that we have hydrated `caseload_type`, we can set it to nullable=False
    op.alter_column(
        "state_staff_caseload_type_period",
        "caseload_type",
        existing_type=postgresql.ENUM(
            "SEX_OFFENSE",
            "ADMINISTRATIVE_SUPERVISION",
            "ALCOHOL_AND_DRUG",
            "INTENSIVE",
            "MENTAL_HEALTH",
            "ELECTRONIC_MONITORING",
            "OTHER_COURT",
            "DRUG_COURT",
            "VETERANS_COURT",
            "COMMUNITY_FACILITY",
            "OTHER",
            "GENERAL",
            "INTERNAL_UNKNOWN",
            "EXTERNAL_UNKNOWN",
            name="state_staff_caseload_type",
        ),
        nullable=False,
        existing_comment="Indicates the type of the caseload an officer supervises",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "state_staff_caseload_type_period",
        "This table will have one row for each period in which one officer had a particular type of specialized caseload. If the nature of their specialization changes over time, they will have more than one period reflecting the dates of those changes and what specialization corresponded to each period of their employment. Eventually, correctional officers who work in facilities and have specialized caseloads will also be included in this table.",
        existing_comment="This table will have one row for each period in which one officer had a particular type of caseload. If the nature of their caseload changes over time, they will have more than one period reflecting the dates of those changes and what specialization, if any, corresponded to each period of their employment. Eventually, correctional officers who work in facilities will also be included in this table.",
        schema=None,
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "end_date",
        existing_type=sa.DATE(),
        comment="The end of the period where this officer had this type of specialized caseload.",
        existing_comment="The end of the period where this officer had this type of caseload.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "start_date",
        existing_type=sa.DATE(),
        comment="The beginning of the period where this officer had this type of specialized caseload.",
        existing_comment="The beginning of the period where this officer had this type of caseload.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_staff_caseload_type_period",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateStaffLocationPeriod, unique within the scope of the source data system.",
        existing_comment="The unique identifier for the StateStaffCaseloadTypePeriod, unique within the scope of the source data system.",
        existing_nullable=False,
    )
    op.drop_column("state_staff_caseload_type_period", "caseload_type_raw_text")
    op.drop_column("state_staff_caseload_type_period", "caseload_type")

    op.execute("DROP TYPE state_staff_caseload_type;")
    # ### end Alembic commands ###
