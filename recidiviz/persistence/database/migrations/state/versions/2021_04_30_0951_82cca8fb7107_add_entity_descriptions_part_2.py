# pylint: skip-file
"""add_entity_descriptions_part_2

Revision ID: 82cca8fb7107
Revises: 7cb61207a27d
Create Date: 2021-04-30 09:51:34.175667

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "82cca8fb7107"
down_revision = "7cb61207a27d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "state_charge_supervision_sentence_association",
        "Association table that connects charges with supervision sentences by their ids.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_court_case",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_court_case_court_case_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_court_case",
        "court_fee_dollars",
        existing_type=sa.INTEGER(),
        comment="The amount of any court fees due for this case, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_type",
        existing_type=postgresql.ENUM("PRESENT_WITHOUT_INFO", name="state_court_type"),
        comment="The type of court this charge will be/was heard in.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the court type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "date_convicted",
        existing_type=sa.DATE(),
        comment="The date the person was convicted, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "judge_id",
        existing_type=sa.INTEGER(),
        comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "judicial_district_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the judicial district under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "next_court_date",
        existing_type=sa.DATE(),
        comment="Date of the next scheduled court appearance for this case, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "PRESENT_WITHOUT_INFO", name="state_court_case_status"
        ),
        comment="The current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the current status of the case.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_court_case",
        "The StateCourtCase object holds information on a single court case that a person stands trial at. This represents the case itself, not the charges brought in the case, or any sentences imposed as a result of the case.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_court_case_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_case_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "court_fee_dollars",
        existing_type=sa.INTEGER(),
        comment="The amount of any court fees due for this case, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_type",
        existing_type=postgresql.ENUM("PRESENT_WITHOUT_INFO", name="state_court_type"),
        comment="The type of court this charge will be/was heard in.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the court type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "date_convicted",
        existing_type=sa.DATE(),
        comment="The date the person was convicted, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "judge_id",
        existing_type=sa.INTEGER(),
        comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "judicial_district_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the judicial district under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "next_court_date",
        existing_type=sa.DATE(),
        comment="Date of the next scheduled court appearance for this case, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "PRESENT_WITHOUT_INFO", name="state_court_case_status"
        ),
        comment="The current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the current status of the case.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_court_case_history",
        "The history table for StateCourtCase. Represents the historical state of a StateCourtCase.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_early_discharge",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the early discharge took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment="The type of body that made or will make the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision",
        existing_type=postgresql.ENUM(
            "REQUEST_DENIED",
            "SENTENCE_TERMINATION_GRANTED",
            "UNSUPERVISED_PROBATION_GRANTED",
            name="state_early_discharge_decision",
        ),
        comment="The decided result of this early decision request.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_date",
        existing_type=sa.DATE(),
        comment="The date on which the result of this early decision request was decided.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "DECIDED",
            "INVALID",
            name="state_early_discharge_decision_status",
        ),
        comment="The current status of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the early discharge decision status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "early_discharge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_early_discharge_early_discharge_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_early_discharge",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "request_date",
        existing_type=sa.DATE(),
        comment="The date on which the early discharge request took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "requesting_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment="The type of body that requested the early discharge for this person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "requesting_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the requesting body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_early_discharge",
        "The StateEarlyDischarge object represents a request and its associated decision to discharge a sentence before its expected end date. This includes various metadata surrounding the actual event of the early discharge request as well as who requested and approved the decision for early discharge. It is possible for a sentence to be discharged early without ending someone's supervision / incarceration term if that person is serving multiple sentences.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_early_discharge_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the early discharge took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment="The type of body that made or will make the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision",
        existing_type=postgresql.ENUM(
            "REQUEST_DENIED",
            "SENTENCE_TERMINATION_GRANTED",
            "UNSUPERVISED_PROBATION_GRANTED",
            name="state_early_discharge_decision",
        ),
        comment="The decided result of this early decision request.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_date",
        existing_type=sa.DATE(),
        comment="The date on which the result of this early decision request was decided.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "DECIDED",
            "INVALID",
            name="state_early_discharge_decision_status",
        ),
        comment="The current status of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the early discharge decision status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "early_discharge_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "early_discharge_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant early discharge information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "request_date",
        existing_type=sa.DATE(),
        comment="The date on which the early discharge request took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "requesting_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment="The type of body that requested the early discharge for this person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "requesting_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the requesting body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_early_discharge_history",
        "Represents all updates that have made to a(n) StateEarlyDischarge object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_fine",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the fine was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "date_paid",
        existing_type=sa.DATE(),
        comment="The date on which the fine was paid.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "fine_dollars",
        existing_type=sa.INTEGER(),
        comment="The amount of the fine, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('state_fine_fine_id_seq'::regclass)"),
    )
    op.alter_column(
        "state_fine",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "PAID",
            "PRESENT_WITHOUT_INFO",
            "UNPAID",
            name="state_fine_status",
        ),
        comment="The current status of this fine.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the fine status.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_fine",
        "The StateFine object represents information about a single fine imposed as part of a group of related sentences. Multiple distinct fines should ideally be reported as separate fine records, but if they have been pre-aggregated then they will be recorded as a single StateFine object.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_fine_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the county under whose jurisdiction the fine was imposed.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "date_paid",
        existing_type=sa.DATE(),
        comment="The date on which the fine was paid.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "fine_dollars",
        existing_type=sa.INTEGER(),
        comment="The amount of the fine, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "fine_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_fine_history",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "PAID",
            "PRESENT_WITHOUT_INFO",
            "UNPAID",
            name="state_fine_status",
        ),
        comment="The current status of this fine.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the fine status.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_fine_history",
        "Represents all updates that have made to a(n) StateFine object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The facility in which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceartion incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_incarceration_incident_incarceration_incident_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_incarceration_incident",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_date",
        existing_type=sa.DATE(),
        comment="The date on which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_details",
        existing_type=sa.TEXT(),
        comment="Descriptive notes describing the incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_type",
        existing_type=postgresql.ENUM(
            "PRESENT_WITHOUT_INFO",
            "CONTRABAND",
            "DISORDERLY_CONDUCT",
            "ESCAPE",
            "MINOR_OFFENSE",
            "POSITIVE",
            "REPORT",
            "VIOLENCE",
            name="state_incarceration_incident_type",
        ),
        comment="The type of incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incident type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "location_within_facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The more specific location where the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "responding_officer_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_incarceration_incident",
        "The StateIncarcerationIncident object represents any behavioral incidents recorded against a person during a period of incarceration, such as a fight with another incarcerated individual or the possession of contraband. A StateIncarcerationIncident has zero to many StateIncarcerationIncidentOutcome children, indicating any official outcomes (e.g. disciplinary responses) due to the incident.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The facility in which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_date",
        existing_type=sa.DATE(),
        comment="The date on which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_details",
        existing_type=sa.TEXT(),
        comment="Descriptive notes describing the incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_type",
        existing_type=postgresql.ENUM(
            "PRESENT_WITHOUT_INFO",
            "CONTRABAND",
            "DISORDERLY_CONDUCT",
            "ESCAPE",
            "MINOR_OFFENSE",
            "POSITIVE",
            "REPORT",
            "VIOLENCE",
            name="state_incarceration_incident_type",
        ),
        comment="The type of incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incident type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "location_within_facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The more specific location where the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "responding_officer_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_incarceration_incident_history",
        "Represents all updates that have made to a(n) StateIncarcerationIncident object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "date_effective",
        existing_type=sa.DATE(),
        comment="The date on which the outcome takes effect.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "hearing_date",
        existing_type=sa.DATE(),
        comment="The date on which the hearing for the incident is taking place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "incarceration_incident_outcome_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_description",
        existing_type=sa.VARCHAR(length=255),
        comment="Descriptive notes describing the outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_type",
        existing_type=postgresql.ENUM(
            "CELL_CONFINEMENT",
            "DISCIPLINARY_LABOR",
            "DISMISSED",
            "EXTERNAL_PROSECUTION",
            "FINANCIAL_PENALTY",
            "GOOD_TIME_LOSS",
            "MISCELLANEOUS",
            "NOT_GUILTY",
            "PRIVILEGE_LOSS",
            "RESTRICTED_CONFINEMENT",
            "SOLITARY",
            "TREATMENT",
            "WARNING",
            name="state_incarceration_incident_outcome_type",
        ),
        comment="The type of outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the outcome type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "punishment_length_days",
        existing_type=sa.INTEGER(),
        comment="The length of any durational, punishment-focused outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "report_date",
        existing_type=sa.DATE(),
        comment="The date on which the incident was reported.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_incarceration_incident_outcome",
        "The StateIncarcerationIncidentOutcome object represents the outcomes in response to a particular StateIncarcerationIncident. These can be positive, neutral, or negative, but they should never be empty or null -- an incident that has no outcomes should simply have no StateIncarcerationIncidentOutcome children objects.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "date_effective",
        existing_type=sa.DATE(),
        comment="The date on which the outcome takes effect.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "hearing_date",
        existing_type=sa.DATE(),
        comment="The date on which the hearing for the incident is taking place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_outcome_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_outcome_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident outcome information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_description",
        existing_type=sa.VARCHAR(length=255),
        comment="Descriptive notes describing the outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_type",
        existing_type=postgresql.ENUM(
            "CELL_CONFINEMENT",
            "DISCIPLINARY_LABOR",
            "DISMISSED",
            "EXTERNAL_PROSECUTION",
            "FINANCIAL_PENALTY",
            "GOOD_TIME_LOSS",
            "MISCELLANEOUS",
            "NOT_GUILTY",
            "PRIVILEGE_LOSS",
            "RESTRICTED_CONFINEMENT",
            "SOLITARY",
            "TREATMENT",
            "WARNING",
            name="state_incarceration_incident_outcome_type",
        ),
        comment="The type of outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the outcome type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "punishment_length_days",
        existing_type=sa.INTEGER(),
        comment="The length of any durational, punishment-focused outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "report_date",
        existing_type=sa.DATE(),
        comment="The date on which the incident was reported.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_incarceration_incident_outcome_history",
        "Represents all updates that have made to a(n) StateIncarcerationIncidentOutcome object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_date",
        existing_type=sa.DATE(),
        comment="The date the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_reason",
        existing_type=postgresql.ENUM(
            "ADMITTED_IN_ERROR",
            "ADMITTED_FROM_SUPERVISION",
            "NEW_ADMISSION",
            "PAROLE_REVOCATION",
            "PROBATION_REVOCATION",
            "DUAL_REVOCATION",
            "RETURN_FROM_ERRONEOUS_RELEASE",
            "RETURN_FROM_ESCAPE",
            "SANCTION_ADMISSION",
            "STATUS_CHANGE",
            "TEMPORARY_CUSTODY",
            "TRANSFER",
            "TRANSFERRED_FROM_OUT_OF_STATE",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            name="state_incarceration_period_admission_reason",
        ),
        comment="The reason the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period admission reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="he code of the county where the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "custodial_authority",
        existing_type=postgresql.ENUM(
            "FEDERAL",
            "OTHER_COUNTRY",
            "OTHER_STATE",
            "SUPERVISION_AUTHORITY",
            "STATE_PRISON",
            name="state_custodial_authority",
        ),
        comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "custodial_authority_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's custodial authority.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The facility in which the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility_security_level",
        existing_type=postgresql.ENUM(
            "MAXIMUM",
            "MEDIUM",
            "MINIMUM",
            name="state_incarceration_facility_security_level",
        ),
        comment="The security level of the facility.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility_security_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the facility security level.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "housing_unit",
        existing_type=sa.VARCHAR(length=255),
        comment="The housing unit within the facility in which the person currently resides.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_incarceration_period_incarceration_period_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_type",
        existing_type=postgresql.ENUM(
            "COUNTY_JAIL",
            "EXTERNAL_UNKNOWN",
            "FEDERAL_PRISON",
            "OUT_OF_STATE",
            "STATE_PRISON",
            name="state_incarceration_type",
        ),
        comment="The type of incarceration the person is serving.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "projected_release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment="The reason the person would be released on the current projected date for their earliest possible release.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "projected_release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's project release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_date",
        existing_type=sa.DATE(),
        comment="The date the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment="The reason the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "source_supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) source supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant source supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "specialized_purpose_for_incarceration",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "GENERAL",
            "PAROLE_BOARD_HOLD",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            "TEMPORARY_CUSTODY",
            name="state_specialized_purpose_for_incarceration",
        ),
        comment="The specialized purpose for incarceration for this particular incarceration period.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "specialized_purpose_for_incarceration_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the specialized purpose for incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "IN_CUSTODY",
            "NOT_IN_CUSTODY",
            "PRESENT_WITHOUT_INFO",
            name="state_incarceration_period_status",
        ),
        comment="The current status of this incarceration period.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period status.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_incarceration_period",
        "The StateIncarcerationPeriod object represents information about a single period of incarceration, defined as a contiguous stay by a particular person in a particular facility. As a person transfers from facility to facility, these are modeled as multiple abutting incarceration periods. This also extends to temporary transfers to, say, hospitals or court appearances. The sequence of incarceration periods can be squashed into longer conceptual periods (e.g. from the first admission to the final release for a particular sentence) for analytical purposes, such as measuring recidivism and revocation -- this is done with a fine-grained examination of the admission dates, admission reasons, release dates, and release reasons of consecutive incarceration periods.<br /><br />Handling of incarceration periods is a crucial aspect of our platform and involves work in jurisdictional ingest mappings, entity matching, and calculation. Fortunately, this means that we have practice working with varied representations of this information.<br /><br />Incarceration Periods can be children of either Incarceration Sentences or Supervision Sentences, for reasons established in the descriptions of those objects. Incarceration periods have zero to many Incarceration Incidents as children, and zero to many Parole Decisions. They also may have Assessments or Program Assignments as children, if any of those objects are explicitly related to this particular period of incarceration. Incarceration periods also optionally have a child source_supervision_violation_response, which is a Supervision Violation Response of type REVOCATION that corresponds to the revocation that caused the re-incarceration leading back to this particular incarceration period. This connection is established during entity matching, unless that link can be explicitly provided in the source data.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_date",
        existing_type=sa.DATE(),
        comment="The date the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_reason",
        existing_type=postgresql.ENUM(
            "ADMITTED_IN_ERROR",
            "ADMITTED_FROM_SUPERVISION",
            "NEW_ADMISSION",
            "PAROLE_REVOCATION",
            "PROBATION_REVOCATION",
            "DUAL_REVOCATION",
            "RETURN_FROM_ERRONEOUS_RELEASE",
            "RETURN_FROM_ESCAPE",
            "SANCTION_ADMISSION",
            "STATUS_CHANGE",
            "TEMPORARY_CUSTODY",
            "TRANSFER",
            "TRANSFERRED_FROM_OUT_OF_STATE",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            name="state_incarceration_period_admission_reason",
        ),
        comment="The reason the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period admission reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment="he code of the county where the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "custodial_authority",
        existing_type=postgresql.ENUM(
            "FEDERAL",
            "OTHER_COUNTRY",
            "OTHER_STATE",
            "SUPERVISION_AUTHORITY",
            "STATE_PRISON",
            name="state_custodial_authority",
        ),
        comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "custodial_authority_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's custodial authority.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment="The facility in which the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility_security_level",
        existing_type=postgresql.ENUM(
            "MAXIMUM",
            "MEDIUM",
            "MINIMUM",
            name="state_incarceration_facility_security_level",
        ),
        comment="The security level of the facility.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility_security_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the facility security level.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "housing_unit",
        existing_type=sa.VARCHAR(length=255),
        comment="The housing unit within the facility in which the person currently resides.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_period_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_type",
        existing_type=postgresql.ENUM(
            "COUNTY_JAIL",
            "EXTERNAL_UNKNOWN",
            "FEDERAL_PRISON",
            "OUT_OF_STATE",
            "STATE_PRISON",
            name="state_incarceration_type",
        ),
        comment="The type of incarceration the person is serving.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "projected_release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment="The reason the person would be released on the current projected date for their earliest possible release.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "projected_release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's project release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_date",
        existing_type=sa.DATE(),
        comment="The date the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment="The reason the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period's release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "source_supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) source supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant source supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "specialized_purpose_for_incarceration",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "GENERAL",
            "PAROLE_BOARD_HOLD",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            "TEMPORARY_CUSTODY",
            name="state_specialized_purpose_for_incarceration",
        ),
        comment="The specialized purpose for incarceration for this particular incarceration period.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "specialized_purpose_for_incarceration_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the specialized purpose for incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "IN_CUSTODY",
            "NOT_IN_CUSTODY",
            "PRESENT_WITHOUT_INFO",
            name="state_incarceration_period_status",
        ),
        comment="The current status of this incarceration period.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the incarceration period status.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_incarceration_period_history",
        "Represents all updates that have made to a(n) StateIncarcerationPeriod object over time.",
        existing_comment=None,
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        "state_incarceration_period_history",
        existing_comment="Represents all updates that have made to a(n) StateIncarcerationPeriod object over time.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "IN_CUSTODY",
            "NOT_IN_CUSTODY",
            "PRESENT_WITHOUT_INFO",
            name="state_incarceration_period_status",
        ),
        comment=None,
        existing_comment="The current status of this incarceration period.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "specialized_purpose_for_incarceration_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the specialized purpose for incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "specialized_purpose_for_incarceration",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "GENERAL",
            "PAROLE_BOARD_HOLD",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            "TEMPORARY_CUSTODY",
            name="state_specialized_purpose_for_incarceration",
        ),
        comment=None,
        existing_comment="The specialized purpose for incarceration for this particular incarceration period.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "source_supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) source supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant source supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment=None,
        existing_comment="The reason the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "release_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "projected_release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's project release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "projected_release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment=None,
        existing_comment="The reason the person would be released on the current projected date for their earliest possible release.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_type",
        existing_type=postgresql.ENUM(
            "COUNTY_JAIL",
            "EXTERNAL_UNKNOWN",
            "FEDERAL_PRISON",
            "OUT_OF_STATE",
            "STATE_PRISON",
            name="state_incarceration_type",
        ),
        comment=None,
        existing_comment="The type of incarceration the person is serving.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "incarceration_period_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "housing_unit",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The housing unit within the facility in which the person currently resides.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility_security_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the facility security level.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility_security_level",
        existing_type=postgresql.ENUM(
            "MAXIMUM",
            "MEDIUM",
            "MINIMUM",
            name="state_incarceration_facility_security_level",
        ),
        comment=None,
        existing_comment="The security level of the facility.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The facility in which the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "custodial_authority_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's custodial authority.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "custodial_authority",
        existing_type=postgresql.ENUM(
            "FEDERAL",
            "OTHER_COUNTRY",
            "OTHER_STATE",
            "SUPERVISION_AUTHORITY",
            "STATE_PRISON",
            name="state_custodial_authority",
        ),
        comment=None,
        existing_comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="he code of the county where the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period admission reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_reason",
        existing_type=postgresql.ENUM(
            "ADMITTED_IN_ERROR",
            "ADMITTED_FROM_SUPERVISION",
            "NEW_ADMISSION",
            "PAROLE_REVOCATION",
            "PROBATION_REVOCATION",
            "DUAL_REVOCATION",
            "RETURN_FROM_ERRONEOUS_RELEASE",
            "RETURN_FROM_ESCAPE",
            "SANCTION_ADMISSION",
            "STATUS_CHANGE",
            "TEMPORARY_CUSTODY",
            "TRANSFER",
            "TRANSFERRED_FROM_OUT_OF_STATE",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            name="state_incarceration_period_admission_reason",
        ),
        comment=None,
        existing_comment="The reason the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period_history",
        "admission_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_incarceration_period",
        existing_comment="The StateIncarcerationPeriod object represents information about a single period of incarceration, defined as a contiguous stay by a particular person in a particular facility. As a person transfers from facility to facility, these are modeled as multiple abutting incarceration periods. This also extends to temporary transfers to, say, hospitals or court appearances. The sequence of incarceration periods can be squashed into longer conceptual periods (e.g. from the first admission to the final release for a particular sentence) for analytical purposes, such as measuring recidivism and revocation -- this is done with a fine-grained examination of the admission dates, admission reasons, release dates, and release reasons of consecutive incarceration periods.<br /><br />Handling of incarceration periods is a crucial aspect of our platform and involves work in jurisdictional ingest mappings, entity matching, and calculation. Fortunately, this means that we have practice working with varied representations of this information.<br /><br />Incarceration Periods can be children of either Incarceration Sentences or Supervision Sentences, for reasons established in the descriptions of those objects. Incarceration periods have zero to many Incarceration Incidents as children, and zero to many Parole Decisions. They also may have Assessments or Program Assignments as children, if any of those objects are explicitly related to this particular period of incarceration. Incarceration periods also optionally have a child source_supervision_violation_response, which is a Supervision Violation Response of type REVOCATION that corresponds to the revocation that caused the re-incarceration leading back to this particular incarceration period. This connection is established during entity matching, unless that link can be explicitly provided in the source data.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_period",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "IN_CUSTODY",
            "NOT_IN_CUSTODY",
            "PRESENT_WITHOUT_INFO",
            name="state_incarceration_period_status",
        ),
        comment=None,
        existing_comment="The current status of this incarceration period.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state where the person is currently incarcerated.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_period",
        "specialized_purpose_for_incarceration_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the specialized purpose for incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "specialized_purpose_for_incarceration",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "GENERAL",
            "PAROLE_BOARD_HOLD",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            "TEMPORARY_CUSTODY",
            name="state_specialized_purpose_for_incarceration",
        ),
        comment=None,
        existing_comment="The specialized purpose for incarceration for this particular incarceration period.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "source_supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) source supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant source supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment=None,
        existing_comment="The reason the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "release_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was released from this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "projected_release_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's project release reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "projected_release_reason",
        existing_type=postgresql.ENUM(
            "COMMUTED",
            "COMPASSIONATE",
            "CONDITIONAL_RELEASE",
            "COURT_ORDER",
            "DEATH",
            "ESCAPE",
            "EXECUTION",
            "PARDONED",
            "RELEASED_FROM_ERRONEOUS_ADMISSION",
            "RELEASED_FROM_TEMPORARY_CUSTODY",
            "RELEASED_IN_ERROR",
            "RELEASED_TO_SUPERVISION",
            "SENTENCE_SERVED",
            "STATUS_CHANGE",
            "TRANSFER",
            "VACATED",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            "TRANSFER_OUT_OF_STATE",
            name="state_incarceration_period_release_reason",
        ),
        comment=None,
        existing_comment="The reason the person would be released on the current projected date for their earliest possible release.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_type",
        existing_type=postgresql.ENUM(
            "COUNTY_JAIL",
            "EXTERNAL_UNKNOWN",
            "FEDERAL_PRISON",
            "OUT_OF_STATE",
            "STATE_PRISON",
            name="state_incarceration_type",
        ),
        comment=None,
        existing_comment="The type of incarceration the person is serving.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_incarceration_period_incarceration_period_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_incarceration_period",
        "housing_unit",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The housing unit within the facility in which the person currently resides.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility_security_level_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the facility security level.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility_security_level",
        existing_type=postgresql.ENUM(
            "MAXIMUM",
            "MEDIUM",
            "MINIMUM",
            name="state_incarceration_facility_security_level",
        ),
        comment=None,
        existing_comment="The security level of the facility.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The facility in which the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationPeriod, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "custodial_authority_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period's custodial authority.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "custodial_authority",
        existing_type=postgresql.ENUM(
            "FEDERAL",
            "OTHER_COUNTRY",
            "OTHER_STATE",
            "SUPERVISION_AUTHORITY",
            "STATE_PRISON",
            name="state_custodial_authority",
        ),
        comment=None,
        existing_comment="The type of government entity directly responsible for the person in this period of incarceration. Not necessarily the decision making authority. For example, the supervision authority in a state might be the custodial authority for someone on probation, even though the courts are the body with the power to make decisions about that person's path through the system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="he code of the county where the person is currently incarcerated.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_reason_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incarceration period admission reason.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_reason",
        existing_type=postgresql.ENUM(
            "ADMITTED_IN_ERROR",
            "ADMITTED_FROM_SUPERVISION",
            "NEW_ADMISSION",
            "PAROLE_REVOCATION",
            "PROBATION_REVOCATION",
            "DUAL_REVOCATION",
            "RETURN_FROM_ERRONEOUS_RELEASE",
            "RETURN_FROM_ESCAPE",
            "SANCTION_ADMISSION",
            "STATUS_CHANGE",
            "TEMPORARY_CUSTODY",
            "TRANSFER",
            "TRANSFERRED_FROM_OUT_OF_STATE",
            "EXTERNAL_UNKNOWN",
            "INTERNAL_UNKNOWN",
            name="state_incarceration_period_admission_reason",
        ),
        comment=None,
        existing_comment="The reason the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_period",
        "admission_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was admitted to this particular period of incarceration.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_incarceration_incident_outcome_history",
        existing_comment="Represents all updates that have made to a(n) StateIncarcerationIncidentOutcome object over time.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "report_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the incident was reported.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "punishment_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The length of any durational, punishment-focused outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the outcome type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_type",
        existing_type=postgresql.ENUM(
            "CELL_CONFINEMENT",
            "DISCIPLINARY_LABOR",
            "DISMISSED",
            "EXTERNAL_PROSECUTION",
            "FINANCIAL_PENALTY",
            "GOOD_TIME_LOSS",
            "MISCELLANEOUS",
            "NOT_GUILTY",
            "PRIVILEGE_LOSS",
            "RESTRICTED_CONFINEMENT",
            "SOLITARY",
            "TREATMENT",
            "WARNING",
            name="state_incarceration_incident_outcome_type",
        ),
        comment=None,
        existing_comment="The type of outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "outcome_description",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Descriptive notes describing the outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_outcome_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident outcome information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_outcome_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "hearing_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the hearing for the incident is taking place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome_history",
        "date_effective",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the outcome takes effect.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_incarceration_incident_outcome",
        existing_comment="The StateIncarcerationIncidentOutcome object represents the outcomes in response to a particular StateIncarcerationIncident. These can be positive, neutral, or negative, but they should never be empty or null -- an incident that has no outcomes should simply have no StateIncarcerationIncidentOutcome children objects.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the outcome is enforced.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "report_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the incident was reported.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "punishment_length_days",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The length of any durational, punishment-focused outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the outcome type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_type",
        existing_type=postgresql.ENUM(
            "CELL_CONFINEMENT",
            "DISCIPLINARY_LABOR",
            "DISMISSED",
            "EXTERNAL_PROSECUTION",
            "FINANCIAL_PENALTY",
            "GOOD_TIME_LOSS",
            "MISCELLANEOUS",
            "NOT_GUILTY",
            "PRIVILEGE_LOSS",
            "RESTRICTED_CONFINEMENT",
            "SOLITARY",
            "TREATMENT",
            "WARNING",
            name="state_incarceration_incident_outcome_type",
        ),
        comment=None,
        existing_comment="The type of outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "outcome_description",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="Descriptive notes describing the outcome.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "incarceration_incident_outcome_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration incident outcome, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "hearing_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the hearing for the incident is taking place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationIncidentOutcome, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_outcome",
        "date_effective",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the outcome takes effect.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_incarceration_incident_history",
        existing_comment="Represents all updates that have made to a(n) StateIncarcerationIncident object over time.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "responding_officer_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "location_within_facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The more specific location where the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incident type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_type",
        existing_type=postgresql.ENUM(
            "PRESENT_WITHOUT_INFO",
            "CONTRABAND",
            "DISORDERLY_CONDUCT",
            "ESCAPE",
            "MINOR_OFFENSE",
            "POSITIVE",
            "REPORT",
            "VIOLENCE",
            name="state_incarceration_incident_type",
        ),
        comment=None,
        existing_comment="The type of incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_details",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Descriptive notes describing the incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incident_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration incident information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The facility in which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_incarceration_incident",
        existing_comment="The StateIncarcerationIncident object represents any behavioral incidents recorded against a person during a period of incarceration, such as a fight with another incarcerated individual or the possession of contraband. A StateIncarcerationIncident has zero to many StateIncarcerationIncidentOutcome children, indicating any official outcomes (e.g. disciplinary responses) due to the incident.",
        schema=None,
    )
    op.alter_column(
        "state_incarceration_incident",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state where the incident took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_incarceration_incident",
        "responding_officer_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "location_within_facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The more specific location where the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the incident type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_type",
        existing_type=postgresql.ENUM(
            "PRESENT_WITHOUT_INFO",
            "CONTRABAND",
            "DISORDERLY_CONDUCT",
            "ESCAPE",
            "MINOR_OFFENSE",
            "POSITIVE",
            "REPORT",
            "VIOLENCE",
            name="state_incarceration_incident_type",
        ),
        comment=None,
        existing_comment="The type of incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_details",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Descriptive notes describing the incident.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incident_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incarceration_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "incarceration_incident_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceartion incident, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_incarceration_incident_incarceration_incident_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_incarceration_incident",
        "facility",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The facility in which the incident took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_incarceration_incident",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateIncarcerationIncident, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_fine_history",
        existing_comment="Represents all updates that have made to a(n) StateFine object over time.",
        schema=None,
    )
    op.alter_column(
        "state_fine_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the fine status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "PAID",
            "PRESENT_WITHOUT_INFO",
            "UNPAID",
            name="state_fine_status",
        ),
        comment=None,
        existing_comment="The current status of this fine.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant fine information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine_history",
        "fine_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_fine_history",
        "fine_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The amount of the fine, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "date_paid",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the fine was paid.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the fine was imposed.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_fine",
        existing_comment="The StateFine object represents information about a single fine imposed as part of a group of related sentences. Multiple distinct fines should ideally be reported as separate fine records, but if they have been pre-aggregated then they will be recorded as a single StateFine object.",
        schema=None,
    )
    op.alter_column(
        "state_fine",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the fine status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN",
            "PAID",
            "PRESENT_WITHOUT_INFO",
            "UNPAID",
            name="state_fine_status",
        ),
        comment=None,
        existing_comment="The current status of this fine.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the fine was imposed.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_fine",
        "fine_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) fine, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text("nextval('state_fine_fine_id_seq'::regclass)"),
    )
    op.alter_column(
        "state_fine",
        "fine_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The amount of the fine, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateFine, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "date_paid",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the fine was paid.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_fine",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the fine was imposed.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_early_discharge_history",
        existing_comment="Represents all updates that have made to a(n) StateEarlyDischarge object over time.",
        schema=None,
    )
    op.alter_column(
        "state_early_discharge_history",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "requesting_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the requesting body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "requesting_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment=None,
        existing_comment="The type of body that requested the early discharge for this person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "request_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the early discharge request took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "early_discharge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant early discharge information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge_history",
        "early_discharge_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the early discharge decision status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "DECIDED",
            "INVALID",
            name="state_early_discharge_decision_status",
        ),
        comment=None,
        existing_comment="The current status of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the result of this early decision request was decided.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "decision",
        existing_type=postgresql.ENUM(
            "REQUEST_DENIED",
            "SENTENCE_TERMINATION_GRANTED",
            "UNSUPERVISED_PROBATION_GRANTED",
            name="state_early_discharge_decision",
        ),
        comment=None,
        existing_comment="The decided result of this early decision request.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment=None,
        existing_comment="The type of body that made or will make the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the early discharge took place.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_early_discharge",
        existing_comment="The StateEarlyDischarge object represents a request and its associated decision to discharge a sentence before its expected end date. This includes various metadata surrounding the actual event of the early discharge request as well as who requested and approved the decision for early discharge. It is possible for a sentence to be discharged early without ending someone's supervision / incarceration term if that person is serving multiple sentences.",
        schema=None,
    )
    op.alter_column(
        "state_early_discharge",
        "supervision_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the early discharge took place.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_early_discharge",
        "requesting_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the requesting body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "requesting_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment=None,
        existing_comment="The type of body that requested the early discharge for this person.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "request_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the early discharge request took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "incarceration_sentence_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) incarceration sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant incarceration sentence information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateEarlyDischarge, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "early_discharge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) early discharge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_early_discharge_early_discharge_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_early_discharge",
        "decision_status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the early discharge decision status.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_status",
        existing_type=postgresql.ENUM(
            "PENDING",
            "DECIDED",
            "INVALID",
            name="state_early_discharge_decision_status",
        ),
        comment=None,
        existing_comment="The current status of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the result of this early decision request was decided.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "decision",
        existing_type=postgresql.ENUM(
            "REQUEST_DENIED",
            "SENTENCE_TERMINATION_GRANTED",
            "UNSUPERVISED_PROBATION_GRANTED",
            name="state_early_discharge_decision",
        ),
        comment=None,
        existing_comment="The decided result of this early decision request.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SENTENCED_PERSON",
            "SUPERVISION_OFFICER",
            name="state_acting_body_type",
        ),
        comment=None,
        existing_comment="The type of body that made or will make the early discharge decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_early_discharge",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the early discharge took place.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_court_case_history",
        existing_comment="The history table for StateCourtCase. Represents the historical state of a StateCourtCase.",
        schema=None,
    )
    op.alter_column(
        "state_court_case_history",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "PRESENT_WITHOUT_INFO", name="state_court_case_status"
        ),
        comment=None,
        existing_comment="The current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "next_court_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date of the next scheduled court appearance for this case, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "judicial_district_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the judicial district under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "judge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "date_convicted",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was convicted, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the court type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_type",
        existing_type=postgresql.ENUM("PRESENT_WITHOUT_INFO", name="state_court_type"),
        comment=None,
        existing_comment="The type of court this charge will be/was heard in.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_fee_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The amount of any court fees due for this case, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case_history",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant court case information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case_history",
        "court_case_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_court_case_history",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_court_case",
        existing_comment="The StateCourtCase object holds information on a single court case that a person stands trial at. This represents the case itself, not the charges brought in the case, or any sentences imposed as a result of the case.",
        schema=None,
    )
    op.alter_column(
        "state_court_case",
        "status_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "status",
        existing_type=postgresql.ENUM(
            "EXTERNAL_UNKNOWN", "PRESENT_WITHOUT_INFO", name="state_court_case_status"
        ),
        comment=None,
        existing_comment="The current status of the case.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the state under whose jurisdiction the case was tried.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_court_case",
        "next_court_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="Date of the next scheduled court appearance for this case, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "judicial_district_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the judicial district under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "judge_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The id of the judge who tried the case.<br />Unique identifier for a(n) state agent, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state agent information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateCourtCase, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "date_convicted",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date the person was convicted, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the court type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_type",
        existing_type=postgresql.ENUM("PRESENT_WITHOUT_INFO", name="state_court_type"),
        comment=None,
        existing_comment="The type of court this charge will be/was heard in.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_fee_dollars",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="The amount of any court fees due for this case, in U.S. Dollars.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_court_case",
        "court_case_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) court case, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_court_case_court_case_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_court_case",
        "county_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The code of the county under whose jurisdiction the case was tried.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_charge_supervision_sentence_association",
        existing_comment="Association table that connects charges with supervision sentences by their ids.",
        schema=None,
    )
    # ### end Alembic commands ###
