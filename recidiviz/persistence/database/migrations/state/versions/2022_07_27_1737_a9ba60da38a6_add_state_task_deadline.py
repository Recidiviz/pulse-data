# pylint: skip-file
"""add_state_task_deadline

Revision ID: a9ba60da38a6
Revises: 0f0b0d5fd663
Create Date: 2022-07-27 17:37:04.747544

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "a9ba60da38a6"
down_revision = "0f0b0d5fd663"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_task_deadline",
        sa.Column(
            "task_deadline_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) task deadline, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "task_type",
            sa.Enum(
                "APPEAL_FOR_TRANSFER_TO_SUPERVISION_FROM_INCARCERATION",
                "ARREST_CHECK",
                "SUPERVISION_CASE_PLAN_UPDATE",
                "DISCHARGE_EARLY_FROM_SUPERVISION",
                "DISCHARGE_FROM_INCARCERATION",
                "DISCHARGE_FROM_SUPERVISION",
                "DRUG_SCREEN",
                "EMPLOYMENT_VERIFICATION",
                "FACE_TO_FACE_CONTACT",
                "HOME_VISIT",
                "NEW_ASSESSMENT",
                "PAYMENT_VERIFICATION",
                "SPECIAL_CONDITION_VERIFICATION",
                "TRANSFER_TO_ADMINISTRATIVE_SUPERVISION",
                "TRANSFER_TO_SUPERVISION_FROM_INCARCERATION",
                "TREATMENT_REFERRAL",
                "TREATMENT_VERIFICATION",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_task_type",
            ),
            nullable=False,
            comment="The type of task that should be performed.",
        ),
        sa.Column(
            "task_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="Raw text for the task_type field.",
        ),
        sa.Column(
            "task_subtype",
            sa.String(length=255),
            nullable=True,
            comment="A string that gives further information about the task type. For example, for a face-to-face contact deadline, might indicate whether the deadline is for a virtual contact or for an in-office visit.",
        ),
        sa.Column(
            "eligible_date",
            sa.Date(),
            nullable=True,
            comment="The date on or after which someone could complete this task. This should be set for tasks that can only be completed once some date date has passed,whether or not there is a strict deadline by which it must be completed.For example, a `APPEAL_FOR_TRANSFER_TO_SUPERVISION_FROM_INCARCERATION` taskmay fill this field with someone's parole eligibility date. A null value inthis field along with a null value in the due_date field could be used toindicate that this person used to be eligible but is no longer eligible, or to explicitly track that they are not yet eligible.",
        ),
        sa.Column(
            "due_date",
            sa.Date(),
            nullable=True,
            comment="The date the task must be completed by. This should be set if there is an upper bound date by which this task must be completed in order to be incompliance with some law or policy.",
        ),
        sa.Column(
            "update_datetime",
            sa.DateTime(),
            nullable=False,
            comment="The the time at which this deadline was updated for this person. Will generally correspond to the time we received the raw data file with this deadline from the state.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.CheckConstraint(
            "eligible_date IS NULL OR due_date IS NULL OR eligible_date <= due_date",
            name="eligible_date_before_due_date",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("task_deadline_id"),
        sa.UniqueConstraint(
            "state_code",
            "person_id",
            "task_type",
            "task_subtype",
            "update_datetime",
            deferrable="True",
            initially="DEFERRED",
            name="state_task_deadline_unique_per_person_update_date_type",
        ),
        comment="The StateTaskDeadline object represents a single task that should be performed as part of someoneâ€™s supervision or incarceration term, along with an associated date that task can be started and/or adeadline when that task must be completed.",
    )
    op.create_index(
        op.f("ix_state_task_deadline_person_id"),
        "state_task_deadline",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_task_deadline_state_code"),
        "state_task_deadline",
        ["state_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_state_task_deadline_state_code"), table_name="state_task_deadline"
    )
    op.drop_index(
        op.f("ix_state_task_deadline_person_id"), table_name="state_task_deadline"
    )
    op.drop_table("state_task_deadline")
    # ### end Alembic commands ###
    op.execute("DROP TYPE state_task_type;")
