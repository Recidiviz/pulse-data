# pylint: skip-file
"""entity_documentation_part_7

Revision ID: b5103b6e2307
Revises: bea81e3e03ef
Create Date: 2021-05-03 15:09:46.235550

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "b5103b6e2307"
down_revision = "bea81e3e03ef"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violated_condition_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response decision entry information.",
        existing_nullable=False,
    )
    op.create_table_comment(
        "state_supervision_violated_condition_entry_history",
        "Represents all updates that have made to a(n) StateSupervisionViolatedConditionEntry object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "is_sex_offense",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the violation involved a sex offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the violation was violent in nature.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_violation_supervision_violation_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_supervision_violation",
        "violated_conditions",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_date",
        existing_type=sa.DATE(),
        comment="The date on which the violation took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation",
        "The StateSupervisionViolation object represents any violations recorded against a person during a period of supervision, such as technical violation or a new offense. A StateSupervisionViolation has zero to many StateSupervisionViolationResponse children, indicating any official response to the violation, e.g. a disciplinary response such as a revocation back to prison or extension of supervision.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "is_sex_offense",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the violation involved a sex offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not the violation was violent in nature.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_violation_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violated_conditions",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_date",
        existing_type=sa.DATE(),
        comment="The date on which the violation took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_history",
        "Represents all updates that have made to a(n) StateSupervisionViolation object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SUPERVISION_OFFICER",
            name="state_supervision_violation_response_deciding_body_type",
        ),
        comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the supervision violation deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_date",
        existing_type=sa.DATE(),
        comment="The date on which the response was made official.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of response subtype to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_type",
        existing_type=postgresql.ENUM(
            "CITATION",
            "VIOLATION_REPORT",
            "PERMANENT_DECISION",
            name="state_supervision_violation_response_type",
        ),
        comment="The type of response to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the response type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment="If the violation resulted in a return to incarceration, this (poorly-named) field describes further what type of return, e.g. whether it's a legal revocation, return for treatment, or something else.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_violation_r_supervision_violation_respons_seq'::regclass)"
        ),
    )
    op.create_table_comment(
        "state_supervision_violation_response",
        "The StateSupervisionViolationResponse object represents the official responses to a particular StateSupervisionViolation. These can be positive, neutral, or negative, but they should never be empty or null -- a violation that has no responses should simply have no StateSupervisionViolationResponse children objects.<br /><br />As described under StateIncarcerationPeriod, any StateSupervisionViolationResponse which leads to a revocation back to prison should be linked to the subsequent period of incarceration. This can be done implicitly in entity matching, or can be marked explicitly in incoming data, either here or on the incarceration period as the case may be.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment="A specific decision that was made in response, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the supervision violation response decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment="The specific type of revocation that the person will be subject to, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "supervision_violation_response_decision_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_response_decision_entry",
        "The StateSupervisionViolationResponseDecisionEntry object represents each specific decision made in response to a particular supervision violation. Each supervision violation response has zero to many such decisions. Decisions are essentially the final consequences of a violation, actions such as continuance, privileges revoked, or revocation.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment="A specific decision that was made in response, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the supervision violation response decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment="The specific type of revocation that the person will be subject to, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_decision_entry_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_decision_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_response_decision_entry_history",
        "Represents all updates that have made to a(n) StateSupervisionViolationResponseDecisionEntry object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SUPERVISION_OFFICER",
            name="state_supervision_violation_response_deciding_body_type",
        ),
        comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the supervision violation deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_date",
        existing_type=sa.DATE(),
        comment="The date on which the response was made official.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment="The type of response subtype to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_type",
        existing_type=postgresql.ENUM(
            "CITATION",
            "VIOLATION_REPORT",
            "PERMANENT_DECISION",
            name="state_supervision_violation_response_type",
        ),
        comment="The type of response to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the response type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment="If the violation resulted in a return to incarceration, this (poorly-named) field describes further what type of return, e.g. whether it's a legal revocation, return for treatment, or something else.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_response_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.create_table_comment(
        "state_supervision_violation_response_history",
        "Represents all updates that have made to a(n) StateSupervisionViolationResponse object over time.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "supervision_violation_type_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment="The type of violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the violation type.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_type_entry",
        "The StateSupervisionViolationTypeEntry object represents each specific violation type that was composed within a single violation. Each supervision violation has zero to many such violation types. For example, a single violation may have been reported for both absconsion and a technical violation. However, it may also be the case that separate violations were recorded for both an absconsion and a technical violation which were related in the real world. The drawing line is how the violation is itself reported in the source data: if a single violation report filed by an agency staff member includes multiple types of violations, then it will be ingested into our schema as a single supervision violation with multiple supervision violation type entries.",
        existing_comment=None,
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_type_entry_id",
        existing_type=sa.INTEGER(),
        comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation type entry information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_type_history_id",
        existing_type=sa.INTEGER(),
        comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment="The type of violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment="The raw text value of the violation type.",
        existing_nullable=True,
    )
    op.create_table_comment(
        "state_supervision_violation_type_entry_history",
        "Represents all updates that have made to a(n) StateSupervisionViolationTypeEntry object over time.",
        existing_comment=None,
        schema=None,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        "state_supervision_violation_type_entry_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionViolationTypeEntry object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the violation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment=None,
        existing_comment="The type of violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_type_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_type_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation type entry information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_supervision_violation_type_entry",
        existing_comment="The StateSupervisionViolationTypeEntry object represents each specific violation type that was composed within a single violation. Each supervision violation has zero to many such violation types. For example, a single violation may have been reported for both absconsion and a technical violation. However, it may also be the case that separate violations were recorded for both an absconsion and a technical violation which were related in the real world. The drawing line is how the violation is itself reported in the source data: if a single violation report filed by an agency staff member includes multiple types of violations, then it will be ingested into our schema as a single supervision violation with multiple supervision violation type entries.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the violation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment=None,
        existing_comment="The type of violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "supervision_violation_type_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation type entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_type_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.drop_table_comment(
        "state_supervision_violation_response_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionViolationResponse object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_response_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment=None,
        existing_comment="If the violation resulted in a return to incarceration, this (poorly-named) field describes further what type of return, e.g. whether it's a legal revocation, return for treatment, or something else.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the response type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_type",
        existing_type=postgresql.ENUM(
            "CITATION",
            "VIOLATION_REPORT",
            "PERMANENT_DECISION",
            name="state_supervision_violation_response_type",
        ),
        comment=None,
        existing_comment="The type of response to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of response subtype to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "response_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the response was made official.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the supervision violation deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_history",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SUPERVISION_OFFICER",
            name="state_supervision_violation_response_deciding_body_type",
        ),
        comment=None,
        existing_comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violation_response_decision_entry_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionViolationResponseDecisionEntry object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_decision_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "supervision_violation_response_decision_entry_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment=None,
        existing_comment="The specific type of revocation that the person will be subject to, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the supervision violation response decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry_history",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment=None,
        existing_comment="A specific decision that was made in response, if applicable.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violation_response_decision_entry",
        existing_comment="The StateSupervisionViolationResponseDecisionEntry object represents each specific decision made in response to a particular supervision violation. Each supervision violation response has zero to many such decisions. Decisions are essentially the final consequences of a violation, actions such as continuance, privileges revoked, or revocation.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "supervision_violation_response_decision_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment=None,
        existing_comment="The specific type of revocation that the person will be subject to, if applicable.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the supervision violation response decision.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response_decision_entry",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment=None,
        existing_comment="A specific decision that was made in response, if applicable.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violation_response",
        existing_comment="The StateSupervisionViolationResponse object represents the official responses to a particular StateSupervisionViolation. These can be positive, neutral, or negative, but they should never be empty or null -- a violation that has no responses should simply have no StateSupervisionViolationResponse children objects.<br /><br />As described under StateIncarcerationPeriod, any StateSupervisionViolationResponse which leads to a revocation back to prison should be linked to the subsequent period of incarceration. This can be done implicitly in entity matching, or can be marked explicitly in incoming data, either here or on the incarceration period as the case may be.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "supervision_violation_response_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_violation_r_supervision_violation_respons_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_supervision_violation_response",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "revocation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the revocation type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "revocation_type",
        existing_type=postgresql.ENUM(
            "REINCARCERATION",
            "RETURN_TO_SUPERVISION",
            "SHOCK_INCARCERATION",
            "TREATMENT_IN_PRISON",
            name="state_supervision_violation_response_revocation_type",
        ),
        comment=None,
        existing_comment="If the violation resulted in a return to incarceration, this (poorly-named) field describes further what type of return, e.g. whether it's a legal revocation, return for treatment, or something else.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the response type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_type",
        existing_type=postgresql.ENUM(
            "CITATION",
            "VIOLATION_REPORT",
            "PERMANENT_DECISION",
            name="state_supervision_violation_response_type",
        ),
        comment=None,
        existing_comment="The type of response to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_subtype",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The type of response subtype to the violation.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "response_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the response was made official.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "is_draft",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not this is response is still a draft, i.e. is not yet finalized by the deciding body.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionViolationResponse, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "decision_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "decision",
        existing_type=postgresql.ENUM(
            "COMMUNITY_SERVICE",
            "CONTINUANCE",
            "DELAYED_ACTION",
            "EXTENSION",
            "INTERNAL_UNKNOWN",
            "NEW_CONDITIONS",
            "OTHER",
            "REVOCATION",
            "PRIVILEGES_REVOKED",
            "SERVICE_TERMINATION",
            "SPECIALIZED_COURT",
            "SHOCK_INCARCERATION",
            "SUSPENSION",
            "TREATMENT_IN_PRISON",
            "TREATMENT_IN_FIELD",
            "WARNING",
            "WARRANT_ISSUED",
            name="state_supervision_violation_response_decision",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "deciding_body_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The raw text value of the supervision violation deciding body type.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_response",
        "deciding_body_type",
        existing_type=postgresql.ENUM(
            "COURT",
            "PAROLE_BOARD",
            "SUPERVISION_OFFICER",
            name="state_supervision_violation_response_deciding_body_type",
        ),
        comment=None,
        existing_comment="The type of decision-making body who made the decision, such as a supervising officer or a parole board or a judge.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violation_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionViolation object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violation_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the violation took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "violated_conditions",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation information.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_violation_history_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="This primary key should not be used. It only exists because SQLAlchemy requires every table to have a unique primary key.",
        existing_nullable=False,
        autoincrement=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the violation was violent in nature.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "is_sex_offense",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the violation involved a sex offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation_history",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violation",
        existing_comment="The StateSupervisionViolation object represents any violations recorded against a person during a period of supervision, such as technical violation or a new offense. A StateSupervisionViolation has zero to many StateSupervisionViolationResponse children, indicating any official response to the violation, e.g. a disciplinary response such as a revocation back to prison or extension of supervision.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_type_raw_text",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_type",
        existing_type=postgresql.ENUM(
            "ABSCONDED",
            "ESCAPED",
            "FELONY",
            "LAW",
            "MISDEMEANOR",
            "MUNICIPAL",
            "TECHNICAL",
            name="state_supervision_violation_type",
        ),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violation_date",
        existing_type=sa.DATE(),
        comment=None,
        existing_comment="The date on which the violation took place.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "violated_conditions",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="DEPRECATED. See #2668.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "supervision_violation_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        existing_nullable=False,
        autoincrement=True,
        existing_server_default=sa.text(
            "nextval('state_supervision_violation_supervision_violation_id_seq'::regclass)"
        ),
    )
    op.alter_column(
        "state_supervision_violation",
        "supervision_period_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision period, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision period information.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "state_code",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The U.S. state or region that provided the source data.",
        existing_nullable=False,
    )
    op.alter_column(
        "state_supervision_violation",
        "is_violent",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the violation was violent in nature.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "is_sex_offense",
        existing_type=sa.BOOLEAN(),
        comment=None,
        existing_comment="Whether or not the violation involved a sex offense.",
        existing_nullable=True,
    )
    op.alter_column(
        "state_supervision_violation",
        "external_id",
        existing_type=sa.VARCHAR(length=255),
        comment=None,
        existing_comment="The unique identifier for the StateSupervisionViolation, unique within the scope of the source data system.",
        existing_nullable=True,
    )
    op.drop_table_comment(
        "state_supervision_violated_condition_entry_history",
        existing_comment="Represents all updates that have made to a(n) StateSupervisionViolatedConditionEntry object over time.",
        schema=None,
    )
    op.alter_column(
        "state_supervision_violated_condition_entry_history",
        "supervision_violated_condition_entry_id",
        existing_type=sa.INTEGER(),
        comment=None,
        existing_comment="Unique identifier for a(n) supervision violation response decision entry, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant supervision violation response decision entry information.",
        existing_nullable=False,
    )
    # ### end Alembic commands ###
