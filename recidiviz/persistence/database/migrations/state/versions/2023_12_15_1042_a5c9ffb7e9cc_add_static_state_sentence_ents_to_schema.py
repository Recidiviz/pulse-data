# pylint: skip-file
"""add_static_state_sentence_ents_to_schema

Revision ID: a5c9ffb7e9cc
Revises: a0fd7f2facdc
Create Date: 2023-12-15 10:42:34.444160

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "a5c9ffb7e9cc"
down_revision = "a0fd7f2facdc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "state_charge_v2",
        sa.Column(
            "charge_v2_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) charge, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to others.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StateCharge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACQUITTED",
                "ADJUDICATED",
                "CONVICTED",
                "DROPPED",
                "PENDING",
                "TRANSFERRED_AWAY",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                "PRESENT_WITHOUT_INFO",
                name="state_charge_v2_status",
            ),
            nullable=False,
            comment="The status of the charge.",
        ),
        sa.Column(
            "status_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the status of the charge.",
        ),
        sa.Column(
            "offense_date",
            sa.Date(),
            nullable=True,
            comment="The date of the alleged offense that led to this charge.",
        ),
        sa.Column(
            "date_charged",
            sa.Date(),
            nullable=True,
            comment="The date the person was charged with the alleged offense.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "county_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the county under whose jurisdiction the charge was brought.",
        ),
        sa.Column(
            "ncic_code",
            sa.String(length=255),
            nullable=True,
            comment="The standardized NCIC (National Crime Information Center) code for the charged offense. NCIC codes are a set of nationally recognized codes for certain types of crimes.",
        ),
        sa.Column(
            "statute",
            sa.String(length=255),
            nullable=True,
            comment="The identifier of the charge in the state or federal code.",
        ),
        sa.Column(
            "description",
            sa.Text(),
            nullable=True,
            comment="A text description of the charge.",
        ),
        sa.Column(
            "attempted",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was an attempt or not (e.g. attempted murder).",
        ),
        sa.Column(
            "classification_type",
            sa.Enum(
                "CIVIL",
                "FELONY",
                "MISDEMEANOR",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_charge_v2_classification_type",
            ),
            nullable=True,
            comment="Charge classification.",
        ),
        sa.Column(
            "classification_type_raw_text",
            sa.String(length=255),
            nullable=True,
            comment="The raw text value of the charge classification.",
        ),
        sa.Column(
            "classification_subtype",
            sa.String(length=255),
            nullable=True,
            comment="The sub-classification of the charge, such as a degree (e.g. 1st Degree, 2nd Degree, etc.) or a class (e.g. Class A, Class B, etc.).",
        ),
        sa.Column(
            "offense_type",
            sa.String(length=255),
            nullable=True,
            comment="The type of offense associated with the charge.",
        ),
        sa.Column(
            "is_violent",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was for a violent crime or not.",
        ),
        sa.Column(
            "is_sex_offense",
            sa.Boolean(),
            nullable=True,
            comment="Whether or not the violation involved a sex offense.",
        ),
        sa.Column(
            "is_drug",
            sa.Boolean(),
            nullable=True,
            comment="Whether this charge was for a drug-related crime or not.",
        ),
        sa.Column(
            "counts",
            sa.Integer(),
            nullable=True,
            comment="The number of counts of this charge which are being brought against the person.",
        ),
        sa.Column(
            "charge_notes",
            sa.Text(),
            nullable=True,
            comment="Free text containing other information about a charge.",
        ),
        sa.Column(
            "charging_entity",
            sa.String(length=255),
            nullable=True,
            comment="The entity that brought this charge (e.g., Boston Police Department, Southern District of New York).",
        ),
        sa.Column(
            "is_controlling",
            sa.Boolean(),
            nullable=True,
            comment='Whether or not this is the "controlling" charge in a set of related charges. A controlling charge is the one which is responsible for the longest possible sentence duration in the set.',
        ),
        sa.Column(
            "judge_full_name",
            sa.String(length=255),
            nullable=True,
            comment="The full name of the judge presiding over the court case associated with this charge.",
        ),
        sa.Column(
            "judge_external_id",
            sa.String(length=255),
            nullable=True,
            comment="The unique identifier for the presiding judge, unique within the scope of the source data system.",
        ),
        sa.Column(
            "judicial_district_code",
            sa.String(length=255),
            nullable=True,
            comment="The code of the judicial district under whose jurisdiction the case was tried.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("charge_v2_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="charge_v2_external_ids_unique_within_state",
        ),
        comment="A formal allegation of an offense with information about the context for how that allegation was brought forth.A single StateChargeV2 can reference multiple StateSentences (e.g. multiple concurrent sentences served due to an overlapping set of charges) and a multiple charges can reference a single StateSentence (e.g. one sentence resulting from multiple charges). Thus, the relationship between StateCharge and each distinct Sentence is many:many.",
    )
    op.create_index(
        op.f("ix_state_charge_v2_county_code"),
        "state_charge_v2",
        ["county_code"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_v2_external_id"),
        "state_charge_v2",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_v2_person_id"),
        "state_charge_v2",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_v2_state_code"),
        "state_charge_v2",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_sentence",
        sa.Column(
            "sentence_id",
            sa.Integer(),
            nullable=False,
            comment="Unique internal ID for a state sentence.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StateSentence, unique within the scope of the source data system.",
        ),
        sa.Column(
            "sentence_group_external_id",
            sa.String(),
            nullable=True,
            comment="An ID for the sentence group given to us by the state for this sentence.",
        ),
        sa.Column(
            "imposed_date",
            sa.Date(),
            nullable=False,
            comment="The date this sentence was imposed, e.g. the date of actual sentencing, but not necessarily the date the person started serving the sentence.",
        ),
        sa.Column(
            "initial_time_served_days",
            sa.Integer(),
            nullable=True,
            comment="The amount of any time already served (in days) at time of sentence imposition to possibly be credited against the overall sentence duration.",
        ),
        sa.Column(
            "sentence_type",
            sa.Enum(
                "COUNTY_JAIL",
                "FEDERAL_PRISON",
                "STATE_PRISON",
                "PAROLE",
                "PROBATION",
                "COMMUNITY_CORRECTIONS",
                "COMMUNITY_SERVICE",
                "FINES_RESTITUTION",
                "SPLIT",
                "TREATMENT",
                "INTERNAL_UNKNOWN",
                "EXTERNAL_UNKNOWN",
                name="state_sentence_type",
            ),
            nullable=False,
            comment="The type of sentence (INCARCERATION, PROBATION, etc.)",
        ),
        sa.Column(
            "sentence_type_raw_text",
            sa.String(),
            nullable=True,
            comment="Raw text indicating whether a sentence is supervision/incarceration/etc",
        ),
        sa.Column(
            "is_life",
            sa.String(),
            nullable=True,
            comment="True if this is sentence is a life sentence.",
        ),
        sa.Column(
            "is_capital_punishment",
            sa.String(),
            nullable=True,
            comment="True if this is sentence is for the death penalty",
        ),
        sa.Column(
            "parole_possible",
            sa.Boolean(),
            nullable=True,
            comment="True if the person may be released to parole under the terms of this sentence (only relevant to INCARCERATION sentence type)",
        ),
        sa.Column(
            "county_code",
            sa.String(),
            nullable=True,
            comment="The code of the county under whose jurisdiction the sentence was imposed",
        ),
        sa.Column(
            "parent_sentence_external_id_array",
            sa.String(),
            nullable=True,
            comment="Identifier of the sentences to which this sentence is consecutive (external_id), formatted as a string of comma-separated id’s. For instance, if sentence C has a consecutive_sentence_id_array of [A, B], then both A and B must be completed before C can be served. String must be parseable as a comma-separated list.",
        ),
        sa.Column(
            "conditions",
            sa.String(),
            nullable=True,
            comment="A comma-separated list of conditions of this sentence which the person must follow to avoid a disciplinary response. If this field is empty, there may still be applicable conditions that apply to someone's current term of supervision/incarceration - either inherited from another ongoing sentence or the current supervision term. (See conditions on StateSupervisionPeriod).",
        ),
        sa.Column(
            "sentence_metadata",
            sa.String(),
            nullable=True,
            comment="Additional metadata field with additional sentence attributes",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("sentence_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="sentence_external_ids_unique_within_state",
        ),
        comment="A sentence represents a formal judgement imposed by the court that details the punishment(in the form of time served) in response to a set of charges for which someone was convicted.This table will have one row for each sentence, and will contain all attributes we can observe about that sentence at the time of sentence imposition.The attributes in this table will remain static over the course of the sentence being served.",
    )
    op.create_index(
        op.f("ix_state_sentence_external_id"),
        "state_sentence",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_person_id"),
        "state_sentence",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_state_code"),
        "state_sentence",
        ["state_code"],
        unique=False,
    )
    op.create_table(
        "state_charge_v2_state_sentence_association",
        sa.Column(
            "charge_v2_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state_charge_v2, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state_charge_v2 information.",
        ),
        sa.Column(
            "sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state_sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state_sentence information.",
        ),
        sa.ForeignKeyConstraint(
            ["charge_v2_id"],
            ["state_charge_v2.charge_v2_id"],
        ),
        sa.ForeignKeyConstraint(
            ["sentence_id"],
            ["state_sentence.sentence_id"],
        ),
        comment="Association table that connects charges with sentences by their ids.",
    )
    op.create_index(
        op.f("ix_state_charge_v2_state_sentence_association_charge_v2_id"),
        "state_charge_v2_state_sentence_association",
        ["charge_v2_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_charge_v2_state_sentence_association_sentence_id"),
        "state_charge_v2_state_sentence_association",
        ["sentence_id"],
        unique=False,
    )
    op.create_table(
        "state_sentence_serving_period",
        sa.Column(
            "sentence_serving_period_id",
            sa.Integer(),
            nullable=False,
            comment="Unique ID for a sentence serving period.",
        ),
        sa.Column(
            "sentence_id",
            sa.Integer(),
            nullable=True,
            comment="Unique identifier for a(n) state_sentence, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant state_sentence information.",
        ),
        sa.Column(
            "serving_start_date",
            sa.Date(),
            nullable=True,
            comment="The date on which a person effectively begins serving a sentence, including any pre-trial jail detention time if applicable.",
        ),
        sa.Column(
            "external_id",
            sa.String(length=255),
            nullable=False,
            comment="The unique identifier for the StateSentenceServingPeriod, unique within the scope of the source data system.",
        ),
        sa.Column(
            "state_code",
            sa.String(length=255),
            nullable=False,
            comment="The U.S. state or region that provided the source data.",
        ),
        sa.Column(
            "serving_end_date",
            sa.Date(),
            nullable=True,
            comment="The date on which a person finishes serving a given sentence. This field can be null if the date has not been observed yet. This should only be hydrated once we have actually observed the completion date of the sentence. E.g., if a sentence record has a completion date on 2024-01-01, this sentence would have a NULL completion_date until 2024-01-01, after which the completion date would reflect that date. We expect that this date will not change after it has been hydrated, except in cases where the data override is fixing an error.",
        ),
        sa.Column(
            "person_id",
            sa.Integer(),
            nullable=False,
            comment="Unique identifier for a(n) person, generated automatically by the Recidiviz system. This identifier is not stable over time (it may change if historical data is re-ingested), but should be used within the context of a given dataset to connect this object to relevant person information.",
        ),
        sa.ForeignKeyConstraint(
            ["person_id"],
            ["state_person.person_id"],
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["sentence_id"],
            ["state_sentence.sentence_id"],
        ),
        sa.PrimaryKeyConstraint("sentence_serving_period_id"),
        sa.UniqueConstraint(
            "state_code",
            "external_id",
            deferrable="True",
            initially="DEFERRED",
            name="state_sentence_serving_period_external_id_unique_within_state",
        ),
        comment="Represents the periods of time over which someone was actively serving a given sentence.",
    )
    op.create_index(
        op.f("ix_state_sentence_serving_period_external_id"),
        "state_sentence_serving_period",
        ["external_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_serving_period_person_id"),
        "state_sentence_serving_period",
        ["person_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_state_sentence_serving_period_state_code"),
        "state_sentence_serving_period",
        ["state_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_state_sentence_serving_period_state_code"),
        table_name="state_sentence_serving_period",
    )
    op.drop_index(
        op.f("ix_state_sentence_serving_period_person_id"),
        table_name="state_sentence_serving_period",
    )
    op.drop_index(
        op.f("ix_state_sentence_serving_period_external_id"),
        table_name="state_sentence_serving_period",
    )
    op.drop_table("state_sentence_serving_period")
    op.drop_index(
        op.f("ix_state_charge_v2_state_sentence_association_sentence_id"),
        table_name="state_charge_v2_state_sentence_association",
    )
    op.drop_index(
        op.f("ix_state_charge_v2_state_sentence_association_charge_v2_id"),
        table_name="state_charge_v2_state_sentence_association",
    )
    op.drop_table("state_charge_v2_state_sentence_association")
    op.drop_index(op.f("ix_state_sentence_state_code"), table_name="state_sentence")
    op.drop_index(op.f("ix_state_sentence_person_id"), table_name="state_sentence")
    op.drop_index(op.f("ix_state_sentence_external_id"), table_name="state_sentence")
    op.drop_table("state_sentence")
    sst_enum = sa.dialects.postgresql.ENUM(
        "COUNTY_JAIL",
        "FEDERAL_PRISON",
        "STATE_PRISON",
        "PAROLE",
        "PROBATION",
        "COMMUNITY_CORRECTIONS",
        "COMMUNITY_SERVICE",
        "FINES_RESTITUTION",
        "SPLIT",
        "TREATMENT",
        "INTERNAL_UNKNOWN",
        "EXTERNAL_UNKNOWN",
        name="state_sentence_type",
    )
    sst_enum.drop(op.get_bind())
    op.drop_index(op.f("ix_state_charge_v2_state_code"), table_name="state_charge_v2")
    op.drop_index(op.f("ix_state_charge_v2_person_id"), table_name="state_charge_v2")
    op.drop_index(op.f("ix_state_charge_v2_external_id"), table_name="state_charge_v2")
    op.drop_index(op.f("ix_state_charge_v2_county_code"), table_name="state_charge_v2")
    op.drop_table("state_charge_v2")
    scs_enum = sa.dialects.postgresql.ENUM(
        "ACQUITTED",
        "ADJUDICATED",
        "CONVICTED",
        "DROPPED",
        "PENDING",
        "TRANSFERRED_AWAY",
        "INTERNAL_UNKNOWN",
        "EXTERNAL_UNKNOWN",
        "PRESENT_WITHOUT_INFO",
        name="state_charge_v2_status",
    )
    scs_enum.drop(op.get_bind())
    scct_enum = sa.dialects.postgresql.ENUM(
        "CIVIL",
        "FELONY",
        "MISDEMEANOR",
        "INTERNAL_UNKNOWN",
        "EXTERNAL_UNKNOWN",
        name="state_charge_v2_classification_type",
    )
    scct_enum.drop(op.get_bind())


# ### end Alembic commands ###
