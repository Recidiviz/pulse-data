# pylint: skip-file
"""add_direct_ingest_import_sessions

Revision ID: dc46a194788e
Revises: 1e39422d6310
Create Date: 2024-05-01 16:03:38.992209

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "dc46a194788e"
down_revision = "1e39422d6310"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "direct_ingest_raw_data_import_session",
        sa.Column("import_session_id", sa.Integer(), nullable=False),
        sa.Column("file_id", sa.Integer(), nullable=False),
        sa.Column(
            "import_status",
            postgresql.ENUM(
                "STARTED",
                "SUCCEEDED",
                "FAILED_UNKNOWN",
                "FAILED_LOAD_STEP",
                "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
                name="direct_ingest_import_session_status",
            ),
            nullable=False,
        ),
        sa.Column("import_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("import_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column("region_code", sa.String(length=255), nullable=False),
        sa.Column(
            "raw_data_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("historical_diffs_active", sa.Boolean(), nullable=False),
        sa.Column("raw_rows", sa.Integer(), nullable=True),
        sa.Column("net_new_or_updated_rows", sa.Integer(), nullable=True),
        sa.Column("deleted_rows", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "(historical_diffs_active IS FALSE OR import_status != 'SUCCEEDED')OR (historical_diffs_active IS TRUE AND import_status = 'SUCCEEDED' AND net_new_or_updated_rows IS NOT NULL AND deleted_rows IS NOT NULL)",
            name="historical_diffs_must_have_non_null_updated_and_deleted",
        ),
        sa.CheckConstraint(
            "import_status != 'SUCCEEDED' OR (import_status = 'SUCCEEDED' AND raw_rows IS NOT NULL)",
            name="all_succeeded_import_sessions_must_have_non_null_rows",
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["direct_ingest_raw_big_query_file_metadata.file_id"],
            name="direct_ingest_raw_big_query_file_metadata_file_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("import_session_id"),
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_data_import_session_file_id"),
        "direct_ingest_raw_data_import_session",
        ["file_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_data_import_session_raw_data_instance"),
        "direct_ingest_raw_data_import_session",
        ["raw_data_instance"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_data_import_session_region_code"),
        "direct_ingest_raw_data_import_session",
        ["region_code"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_direct_ingest_raw_data_import_session_region_code"),
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_data_import_session_raw_data_instance"),
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_data_import_session_file_id"),
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_table("direct_ingest_raw_data_import_session")
    postgresql.ENUM(
        "STARTED",
        "SUCCEEDED",
        "FAILED_UNKNOWN",
        "FAILED_LOAD_STEP",
        "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
        name="direct_ingest_import_session_status",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
