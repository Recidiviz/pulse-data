# pylint: skip-file
"""drop-file-metadata-and-ingest-instance-status

Revision ID: 3fb951a6ae34
Revises: def570138afc
Create Date: 2025-03-27 12:39:29.656325

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "3fb951a6ae34"
down_revision = "def570138afc"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_direct_ingest_raw_file_metadata_file_tag",
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_index(
        "ix_direct_ingest_raw_file_metadata_normalized_file_name",
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_index(
        "ix_direct_ingest_raw_file_metadata_raw_data_instance",
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_index(
        "ix_direct_ingest_raw_file_metadata_region_code",
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_index(
        "one_non_invalidated_normalized_name_per_region_and_instance",
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_table("direct_ingest_raw_file_metadata")
    op.drop_index(
        "ix_direct_ingest_instance_status_instance",
        table_name="direct_ingest_instance_status",
    )
    op.drop_index(
        "ix_direct_ingest_instance_status_region_code",
        table_name="direct_ingest_instance_status",
    )
    op.drop_table("direct_ingest_instance_status")
    op.execute("DROP TYPE direct_ingest_status;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "direct_ingest_instance_status",
        sa.Column(
            "region_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "RAW_DATA_IMPORT_IN_PROGRESS",
                "READY_TO_FLASH",
                "FLASH_IN_PROGRESS",
                "FLASH_COMPLETED",
                "STALE_RAW_DATA",
                "RAW_DATA_REIMPORT_STARTED",
                "INITIAL_STATE",
                "RAW_DATA_REIMPORT_CANCELED",
                "RAW_DATA_REIMPORT_CANCELLATION_IN_PROGRESS",
                "RAW_DATA_UP_TO_DATE",
                "NO_RAW_DATA_REIMPORT_IN_PROGRESS",
                name="direct_ingest_status",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "status_timestamp",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "region_code",
            "status_timestamp",
            "instance",
            name="direct_ingest_instance_status_pkey",
        ),
    )
    op.create_index(
        "ix_direct_ingest_instance_status_region_code",
        "direct_ingest_instance_status",
        ["region_code"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_instance_status_instance",
        "direct_ingest_instance_status",
        ["instance"],
        unique=False,
    )
    op.create_table(
        "direct_ingest_raw_file_metadata",
        sa.Column("file_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "region_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "file_tag", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "normalized_file_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "raw_data_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_invalidated", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "file_discovery_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "file_processed_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "update_datetime",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.CheckConstraint(
            "file_discovery_time IS NOT NULL", name="nonnull_raw_file_discovery_time"
        ),
        sa.CheckConstraint(
            "normalized_file_name IS NOT NULL", name="nonnull_raw_normalized_file_name"
        ),
        sa.PrimaryKeyConstraint("file_id", name="direct_ingest_raw_file_metadata_pkey"),
    )
    op.create_index(
        "one_non_invalidated_normalized_name_per_region_and_instance",
        "direct_ingest_raw_file_metadata",
        ["region_code", "raw_data_instance", "normalized_file_name"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_file_metadata_region_code",
        "direct_ingest_raw_file_metadata",
        ["region_code"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_file_metadata_raw_data_instance",
        "direct_ingest_raw_file_metadata",
        ["raw_data_instance"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_file_metadata_normalized_file_name",
        "direct_ingest_raw_file_metadata",
        ["normalized_file_name"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_file_metadata_file_tag",
        "direct_ingest_raw_file_metadata",
        ["file_tag"],
        unique=False,
    )
    # ### end Alembic commands ###
