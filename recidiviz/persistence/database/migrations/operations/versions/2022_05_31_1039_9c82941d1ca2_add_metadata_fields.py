# pylint: skip-file
"""add_metadata_fields

Revision ID: 9c82941d1ca2
Revises: 5be65f5d5573
Create Date: 2022-05-31 10:39:00.157301

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "9c82941d1ca2"
down_revision = "5be65f5d5573"
branch_labels = None
depends_on = None

INSTANCE_UPGRADE_QUERY = """
UPDATE direct_ingest_raw_file_metadata
SET raw_data_instance = 'PRIMARY' 
"""

INVALIDATED_UPGRADE_QUERY = """
UPDATE direct_ingest_raw_file_metadata
SET is_invalidated = False
"""


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # If adding a non-nullable column and adding a value to it in to existing rows, then you have to do it in one
    # transaction. Our migrations are already set up to run in a single transaction, as dictated by the
    # `transaction_per_migration=True` in `recidiviz/persistence/database/migrations/base_env.py`.
    op.add_column(
        "direct_ingest_raw_file_metadata",
        sa.Column(
            "raw_data_instance",
            sa.Enum("PRIMARY", "SECONDARY", name="direct_ingest_instance"),
            nullable=False,
        ),
    )
    op.add_column(
        "direct_ingest_raw_file_metadata",
        sa.Column("is_invalidated", sa.Boolean(), nullable=False),
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_metadata_raw_data_instance"),
        "direct_ingest_raw_file_metadata",
        ["raw_data_instance"],
        unique=False,
    )
    op.execute(INSTANCE_UPGRADE_QUERY)
    op.execute(INVALIDATED_UPGRADE_QUERY)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_metadata_raw_data_instance"),
        table_name="direct_ingest_raw_file_metadata",
    )
    op.drop_column("direct_ingest_raw_file_metadata", "is_invalidated")
    op.drop_column("direct_ingest_raw_file_metadata", "raw_data_instance")
    # ### end Alembic commands ###
