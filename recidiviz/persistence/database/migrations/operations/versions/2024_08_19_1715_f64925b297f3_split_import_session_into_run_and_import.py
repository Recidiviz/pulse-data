# pylint: skip-file
"""split_import_session_into_run_and_import

Revision ID: f64925b297f3
Revises: 88009a47391e
Create Date: 2024-08-19 17:15:05.986985

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f64925b297f3"
down_revision = "88009a47391e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "direct_ingest_raw_file_import_run",
        sa.Column("import_run_id", sa.Integer(), nullable=False),
        sa.Column("dag_run_id", sa.String(length=255), nullable=True),
        sa.Column("import_run_start", sa.DateTime(timezone=True), nullable=False),
        sa.Column("import_run_end", sa.DateTime(timezone=True), nullable=True),
        sa.Column("region_code", sa.String(length=255), nullable=False),
        sa.Column(
            "raw_data_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("import_run_id"),
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_run_dag_run_id"),
        "direct_ingest_raw_file_import_run",
        ["dag_run_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_run_raw_data_instance"),
        "direct_ingest_raw_file_import_run",
        ["raw_data_instance"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_run_region_code"),
        "direct_ingest_raw_file_import_run",
        ["region_code"],
        unique=False,
    )
    op.create_table(
        "direct_ingest_raw_file_import",
        sa.Column("file_import_id", sa.Integer(), nullable=False),
        sa.Column("file_id", sa.Integer(), nullable=False),
        sa.Column("import_run_id", sa.Integer(), nullable=False),
        sa.Column(
            "import_status",
            postgresql.ENUM(
                "STARTED",
                "SUCCEEDED",
                "FAILED_UNKNOWN",
                "FAILED_LOAD_STEP",
                "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
                name="direct_ingest_file_import_status",
            ),
            nullable=False,
        ),
        sa.Column("region_code", sa.String(length=255), nullable=False),
        sa.Column(
            "raw_data_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("historical_diffs_active", sa.Boolean(), nullable=True),
        sa.Column("raw_rows", sa.Integer(), nullable=True),
        sa.Column("net_new_or_updated_rows", sa.Integer(), nullable=True),
        sa.Column("deleted_rows", sa.Integer(), nullable=True),
        sa.CheckConstraint(
            "(historical_diffs_active IS FALSE OR import_status != 'SUCCEEDED')OR (historical_diffs_active IS TRUE AND import_status = 'SUCCEEDED' AND net_new_or_updated_rows IS NOT NULL AND deleted_rows IS NOT NULL)",
            name="historical_diffs_must_have_non_null_updated_and_deleted",
        ),
        sa.CheckConstraint(
            "import_status != 'SUCCEEDED' OR (import_status = 'SUCCEEDED' AND raw_rows IS NOT NULL)",
            name="all_succeeded_imports_must_have_non_null_rows",
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["direct_ingest_raw_big_query_file_metadata.file_id"],
            name="direct_ingest_raw_big_query_file_metadata_file_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.ForeignKeyConstraint(
            ["import_run_id"],
            ["direct_ingest_raw_file_import_run.import_run_id"],
            name="direct_ingest_raw_file_import_run_import_run_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint("file_import_id"),
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_file_id"),
        "direct_ingest_raw_file_import",
        ["file_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_import_run_id"),
        "direct_ingest_raw_file_import",
        ["import_run_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_raw_data_instance"),
        "direct_ingest_raw_file_import",
        ["raw_data_instance"],
        unique=False,
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_file_import_region_code"),
        "direct_ingest_raw_file_import",
        ["region_code"],
        unique=False,
    )
    op.drop_index(
        "ix_direct_ingest_raw_data_import_session_file_id",
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_index(
        "ix_direct_ingest_raw_data_import_session_raw_data_instance",
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_index(
        "ix_direct_ingest_raw_data_import_session_region_code",
        table_name="direct_ingest_raw_data_import_session",
    )
    op.drop_table("direct_ingest_raw_data_import_session")
    postgresql.ENUM(
        "STARTED",
        "SUCCEEDED",
        "FAILED_UNKNOWN",
        "FAILED_LOAD_STEP",
        "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
        name="direct_ingest_import_session_status",
    ).drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "direct_ingest_raw_data_import_session",
        sa.Column(
            "import_session_id", sa.INTEGER(), autoincrement=True, nullable=False
        ),
        sa.Column("file_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "import_status",
            postgresql.ENUM(
                "STARTED",
                "SUCCEEDED",
                "FAILED_UNKNOWN",
                "FAILED_LOAD_STEP",
                "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
                name="direct_ingest_import_session_status",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "import_start",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "import_end",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "region_code", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "raw_data_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "historical_diffs_active", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column("raw_rows", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "net_new_or_updated_rows", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column("deleted_rows", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.CheckConstraint(
            "(historical_diffs_active IS FALSE) OR (import_status <> 'SUCCEEDED'::direct_ingest_import_session_status) OR ((historical_diffs_active IS TRUE) AND (import_status = 'SUCCEEDED'::direct_ingest_import_session_status) AND (net_new_or_updated_rows IS NOT NULL) AND (deleted_rows IS NOT NULL))",
            name="historical_diffs_must_have_non_null_updated_and_deleted",
        ),
        sa.CheckConstraint(
            "(import_status <> 'SUCCEEDED'::direct_ingest_import_session_status) OR ((import_status = 'SUCCEEDED'::direct_ingest_import_session_status) AND (raw_rows IS NOT NULL))",
            name="all_succeeded_import_sessions_must_have_non_null_rows",
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["direct_ingest_raw_big_query_file_metadata.file_id"],
            name="direct_ingest_raw_big_query_file_metadata_file_id_fkey",
            initially="DEFERRED",
            deferrable=True,
        ),
        sa.PrimaryKeyConstraint(
            "import_session_id", name="direct_ingest_raw_data_import_session_pkey"
        ),
    )
    op.create_index(
        "ix_direct_ingest_raw_data_import_session_region_code",
        "direct_ingest_raw_data_import_session",
        ["region_code"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_data_import_session_raw_data_instance",
        "direct_ingest_raw_data_import_session",
        ["raw_data_instance"],
        unique=False,
    )
    op.create_index(
        "ix_direct_ingest_raw_data_import_session_file_id",
        "direct_ingest_raw_data_import_session",
        ["file_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_region_code"),
        table_name="direct_ingest_raw_file_import",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_raw_data_instance"),
        table_name="direct_ingest_raw_file_import",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_import_run_id"),
        table_name="direct_ingest_raw_file_import",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_file_id"),
        table_name="direct_ingest_raw_file_import",
    )
    op.drop_table("direct_ingest_raw_file_import")
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_run_region_code"),
        table_name="direct_ingest_raw_file_import_run",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_run_raw_data_instance"),
        table_name="direct_ingest_raw_file_import_run",
    )
    op.drop_index(
        op.f("ix_direct_ingest_raw_file_import_run_dag_run_id"),
        table_name="direct_ingest_raw_file_import_run",
    )
    op.drop_table("direct_ingest_raw_file_import_run")
    postgresql.ENUM(
        "STARTED",
        "SUCCEEDED",
        "FAILED_UNKNOWN",
        "FAILED_LOAD_STEP",
        "FAILED_PRE_IMPORT_NORMALIZATION_STEP",
        name="direct_ingest_file_import_status",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
