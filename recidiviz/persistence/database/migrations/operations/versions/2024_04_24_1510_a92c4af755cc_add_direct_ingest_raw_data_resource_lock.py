# pylint: skip-file
"""add_direct_ingest_raw_data_resource_lock

Revision ID: a92c4af755cc
Revises: 54384bcdcbb0
Create Date: 2024-04-24 15:10:36.981306

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "a92c4af755cc"
down_revision = "54384bcdcbb0"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "direct_ingest_raw_data_resource_lock",
        sa.Column("lock_id", sa.Integer(), nullable=False),
        sa.Column(
            "lock_actor",
            postgresql.ENUM("ADHOC", "PROCESS", name="direct_ingest_lock_actor"),
            nullable=False,
        ),
        sa.Column(
            "lock_resource",
            postgresql.ENUM(
                "BUCKET",
                "OPERATIONS_DATABASE",
                "BIG_QUERY_RAW_DATA_DATASET",
                name="direct_ingest_lock_resource",
            ),
            nullable=False,
        ),
        sa.Column("region_code", sa.String(length=255), nullable=False),
        sa.Column(
            "raw_data_source_instance",
            postgresql.ENUM(
                "PRIMARY", "SECONDARY", name="direct_ingest_instance", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("released", sa.Boolean(), nullable=False),
        sa.Column("lock_acquisition_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("lock_ttl", sa.Interval(), nullable=True),
        sa.Column("lock_description", sa.String(length=255), nullable=False),
        sa.CheckConstraint(
            "lock_actor = 'ADHOC' OR (lock_actor = 'PROCESS' and lock_ttl IS NOT NULL)",
            name="all_process_actors_must_specify_ttl",
        ),
        sa.PrimaryKeyConstraint("lock_id"),
    )
    op.create_index(
        "at_most_one_active_lock_per_resource_region_and_instance",
        "direct_ingest_raw_data_resource_lock",
        ["lock_resource", "region_code", "raw_data_source_instance"],
        unique=True,
        postgresql_where=sa.text("NOT released"),
    )
    op.create_index(
        op.f("ix_direct_ingest_raw_data_resource_lock_lock_resource"),
        "direct_ingest_raw_data_resource_lock",
        ["lock_resource"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_direct_ingest_raw_data_resource_lock_lock_resource"),
        table_name="direct_ingest_raw_data_resource_lock",
    )
    op.drop_index(
        "at_most_one_active_lock_per_resource_region_and_instance",
        table_name="direct_ingest_raw_data_resource_lock",
        postgresql_where=sa.text("NOT released"),
    )
    op.drop_table("direct_ingest_raw_data_resource_lock")
    postgresql.ENUM(
        "BUCKET",
        "OPERATIONS_DATABASE",
        "BIG_QUERY_RAW_DATA_DATASET",
        name="direct_ingest_lock_resource",
    ).drop(op.get_bind())
    postgresql.ENUM(
        "ADHOC",
        "PROCESS",
        name="direct_ingest_lock_actor",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
