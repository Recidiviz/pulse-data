# Without new value
old_values = # list of all values excluding new value

# With new value
new_values = # list of all values including new value

def upgrade():
    op.execute('ALTER TYPE {type} RENAME TO {type}_old;')
    sa.Enum(*new_values, name='{type}').create(bind=op.get_bind())
    op.alter_column('{master_table}', column_name='{column}',
                    type_=sa.Enum(*new_values, name='{type}'),
                    postgresql_using='{column}::text::{type}')
    op.alter_column('{historical_table}', column_name='{column}',
                    type_=sa.Enum(*new_values, name='{type}'),
                    postgresql_using='{column}::text::{type}')
    op.execute('DROP TYPE {type}_old;')


def downgrade():
    op.execute('ALTER TYPE {type} RENAME TO {type}_old;')
    sa.Enum(*old_values, name='{type}').create(bind=op.get_bind())
    op.alter_column('{master_table}', column_name='{column}',
                    type_=sa.Enum(*old_values, name='{type}'),
                    postgresql_using='{column}::text::{type}')
    op.alter_column('{historical_table}', column_name='{column}',
                    type_=sa.Enum(*old_values, name='{type}'),
                    postgresql_using='{column}::text::{type}')
    op.execute('DROP TYPE {type}_old;')
