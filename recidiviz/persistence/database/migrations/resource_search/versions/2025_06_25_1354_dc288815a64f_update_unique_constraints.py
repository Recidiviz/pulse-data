# pylint: skip-file
"""update_unique_constraints

Revision ID: dc288815a64f
Revises: f29f006fc963
Create Date: 2025-06-25 13:54:58.066240

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "dc288815a64f"
down_revision = "f29f006fc963"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("resource_category_uri_key"), "resource", type_="unique")
    op.drop_index(
        op.f("unique_name_address"),
        table_name="resource",
        postgresql_where="((normalized_name IS NOT NULL) AND (street IS NOT NULL) AND (city IS NOT NULL) AND (state IS NOT NULL) AND (zip IS NOT NULL))",
    )
    op.drop_index(
        op.f("unique_website"),
        table_name="resource",
        postgresql_where="(website IS NOT NULL)",
    )
    op.drop_index(
        op.f("unique_phone"),
        table_name="resource",
        postgresql_where="(phone IS NOT NULL)",
    )
    op.create_unique_constraint("unique_phone", "resource", ["phone"])
    op.create_unique_constraint(
        "unique_address_and_name",
        "resource",
        ["normalized_name", "street", "city", "state", "zip"],
    )
    op.create_unique_constraint("unique_category_uri", "resource", ["category", "uri"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("unique_category_uri", "resource", type_="unique")
    op.drop_constraint("unique_address_and_name", "resource", type_="unique")
    op.drop_constraint("unique_phone", "resource", type_="unique")
    op.create_index(
        op.f("unique_phone"),
        "resource",
        ["phone"],
        unique=True,
        postgresql_where="(phone IS NOT NULL)",
    )
    op.create_index(
        op.f("unique_website"),
        "resource",
        ["website"],
        unique=True,
        postgresql_where="(website IS NOT NULL)",
    )
    op.create_index(
        op.f("unique_name_address"),
        "resource",
        ["normalized_name", "street", "city", "state", "zip"],
        unique=True,
        postgresql_where="((normalized_name IS NOT NULL) AND (street IS NOT NULL) AND (city IS NOT NULL) AND (state IS NOT NULL) AND (zip IS NOT NULL))",
    )
    op.create_unique_constraint(
        op.f("resource_category_uri_key"), "resource", ["category", "uri"]
    )
