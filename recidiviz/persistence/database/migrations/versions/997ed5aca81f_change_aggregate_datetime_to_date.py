"""change_aggregate_datetime_to_date

Revision ID: 997ed5aca81f
Revises: 13c8052e2cf8
Create Date: 2019-01-29 16:59:08.066919

"""
from alembic import op
from datetime import date
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from recidiviz.persistence.database.schema import Base

# revision identifiers, used by Alembic.
revision = '997ed5aca81f'
down_revision = '13c8052e2cf8'
branch_labels = None
depends_on = None


def upgrade():
    # Postgres can automatically cast from timestamp to date. The manual casting
    # on dc_facility_aggregate below is included only to document the process
    # of migrating a column

    connection = op.get_bind()
    # 1. Rename existing column to dummy name
    op.alter_column(
        'dc_facility_aggregate',
        'report_date',
        new_column_name='report_date_old')
    # 2. Create new column with desired name and type
    op.add_column(
        'dc_facility_aggregate',
        sa.Column('report_date', sa.Date(), nullable=True))
    # 3. Create a temporary view of the table containing both columns (These
    # columns must be explicitly declared, because the version of the table
    # defined in Base.metadata will not reflect the new column naming. The table
    # view must also include record_id to allow its use in a WHERE clause)
    dc_facility_table_view = sa.Table(
        'dc_facility_aggregate',
        Base.metadata,
        sa.Column('record_id', sa.Integer(), primary_key=True),
        sa.Column('report_date_old', postgresql.TIMESTAMP()),
        sa.Column('report_date', sa.Date()),
        extend_existing=True)
    # 4. Update for each row
    for record in connection.execute(dc_facility_table_view.select()):
        timestamp = record.report_date_old
        report_date = date(timestamp.year, timestamp.month, timestamp.day)
        connection.execute(
            dc_facility_table_view.update().where(
                dc_facility_table_view.c.record_id == record.record_id).values(
                    report_date=report_date))
    # 5. Drop dummy column
    op.drop_column('dc_facility_aggregate', 'report_date_old')
    # In this specific case, dropping report_date will break the existing unique
    # constraint. This constraint will be re-created in a separate followup
    # migration, to ensure consistency with alembic's autogenerated constraint
    # naming scheme

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('fl_county_aggregate', 'date_reported',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('fl_county_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('fl_facility_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('ga_county_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('hi_facility_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('ky_county_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('ny_facility_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('tx_county_aggregate', 'report_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('tx_county_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('ny_facility_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('ky_county_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('hi_facility_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('ga_county_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('fl_facility_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('fl_county_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('fl_county_aggregate', 'date_reported',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('dc_facility_aggregate', 'report_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    # ### end Alembic commands ###
