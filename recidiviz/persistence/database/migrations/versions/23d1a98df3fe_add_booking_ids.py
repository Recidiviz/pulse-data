"""add_booking_ids

Revision ID: 23d1a98df3fe
Revises: 6a9d5e7a978a
Create Date: 2019-02-15 14:48:03.654923

"""

# Hackity hack to get around the fact that alembic runs this file as a
# top-level module rather than a child of the recidiviz module
import sys
import os
module_path = os.path.abspath(__file__)
# Walk up directories to reach main package
while not module_path.split('/')[-1] == 'recidiviz':
    if module_path == '/':
        raise RuntimeError('Top-level recidiviz package not found')
    module_path = os.path.dirname(module_path)
# Must insert parent directory of main package
sys.path.insert(0, os.path.dirname(module_path))

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from recidiviz.persistence.database.schema import Base

# revision identifiers, used by Alembic.
revision = '23d1a98df3fe'
down_revision = '6a9d5e7a978a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()

    # Populate with dummy default value to avoid integrity error around
    # non-null constraint (will be overwritten after)
    op.add_column(
        'bond',
        sa.Column(
            'booking_id', sa.Integer(), nullable=False, server_default='0'))
    bond_table_view = sa.Table(
        'bond',
        Base.metadata,
        sa.Column('bond_id', sa.Integer(), primary_key=True),
        sa.Column('booking_id', sa.Integer()),
        extend_existing=True)
    for bond in connection.execute(bond_table_view.select()):
        # Get any charge that links to this bond, since all charges will have
        # the same booking ID
        booking_id = connection.execute(
            'SELECT charge.booking_id FROM charge WHERE charge.bond_id = {} '
            'LIMIT 1'.format(bond.bond_id)).first()[0]
        connection.execute(
            'UPDATE bond SET booking_id = {} WHERE bond_id = {}'.format(
                booking_id, bond.bond_id))
    # Remove dummy default value, which should no longer be used
    op.alter_column('bond', 'booking_id', server_default=None)

    op.create_foreign_key(None, 'bond', 'booking', ['booking_id'], ['booking_id'])

    # Populate with dummy default value to avoid integrity error around
    # non-null constraint (will be overwritten after)
    op.add_column(
        'bond_history',
        sa.Column(
            'booking_id', sa.Integer(), nullable=False, server_default='0'))
    bond_history_table_view = sa.Table(
        'bond_history',
        Base.metadata,
        sa.Column('bond_history_id', sa.Integer(), primary_key=True),
        sa.Column('bond_id', sa.Integer()),
        sa.Column('booking_id', sa.Integer()),
        extend_existing=True)
    for bond_history in connection.execute(bond_history_table_view.select()):
        # Get any charge that links to the master bond, since all charges will
        # have the same booking ID
        booking_id = connection.execute(
            'SELECT charge.booking_id FROM charge WHERE charge.bond_id = {} '
            'LIMIT 1'.format(bond_history.bond_id)).first()[0]
        connection.execute(
            'UPDATE bond_history SET booking_id = {} '
            'WHERE bond_history_id = {}'.format(
                booking_id, bond_history.bond_history_id))
    # Remove dummy default value, which should no longer be used
    op.alter_column('bond_history', 'booking_id', server_default=None)
    # ### end Alembic commands ###


def downgrade():
    raise NotImplementedError()
