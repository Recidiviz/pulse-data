# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2023 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ============================================================================
"""Define the ORM schema objects that map directly to the database, for Outliers related entities."""
from sqlalchemy import Column, Date, Float, ForeignKeyConstraint, Integer, String
from sqlalchemy.orm import DeclarativeMeta, declarative_base

from recidiviz.persistence.database.database_entity import DatabaseEntity

# Defines the base class for all table classes in the Outliers schema.
OutliersBase: DeclarativeMeta = declarative_base(
    cls=DatabaseEntity, name="OutliersBase"
)


class SupervisionDistrict(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_districts`"""

    __tablename__ = "supervision_districts"

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    name = Column(String, nullable=True)


class SupervisionUnit(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_units`"""

    __tablename__ = "supervision_units"

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    name = Column(String, nullable=True)
    # Id of the supervision district the unit is a child of
    supervision_district_id = Column(
        String,
        primary_key=True,
        nullable=False,
    )

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "supervision_district_id"],
            [
                "supervision_districts.state_code",
                "supervision_districts.external_id",
            ],
        ),
    )


class PersonBase:
    """Base class that includes attributes that all person entities must define"""

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    # Unique identifier generated by the Recidiviz system
    staff_id = Column(Integer, nullable=False)
    full_name = Column(String, nullable=True)
    email = Column(String, nullable=True)


class SupervisionOfficer(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officers`"""

    __tablename__ = "supervision_officers"

    # Id of the supervision unit the officer is assigned to
    location_external_id = Column(String, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "location_external_id"],
            [
                "supervision_units.state_code",
                "supervision_units.external_id",
            ],
        ),
    )


class SupervisionOfficerSupervisor(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_supervisors`"""

    __tablename__ = "supervision_officer_supervisors"

    # Id of the supervision unit the supervisor manages or has officers for
    location_external_id = Column(String, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "location_external_id"],
            [
                "supervision_units.state_code",
                "supervision_units.external_id",
            ],
        ),
    )


class SupervisionDistrictManager(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_district_managers`"""

    __tablename__ = "supervision_district_managers"

    # Id of the supervision district the manager is assigned to
    location_external_id = Column(String, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "location_external_id"],
            [
                "supervision_districts.state_code",
                "supervision_districts.external_id",
            ],
        ),
    )


class MetricBase:
    """Base class that includes attributes that all metrics must define"""

    state_code = Column(String, primary_key=True, nullable=False)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True, nullable=False)
    # The value of the given metric
    metric_value = Column(Float, nullable=False)
    # The end date for the period
    end_date = Column(Date, primary_key=True, nullable=False)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )


class SupervisionOfficerMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_metrics`"""

    __tablename__ = "supervision_officer_metrics"

    # The id of the officer the metric is measured for
    officer_id = Column(String, primary_key=True, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "officer_id"],
            [
                "supervision_officers.state_code",
                "supervision_officers.external_id",
            ],
        ),
    )


class SupervisionUnitMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_unit_metrics`"""

    __tablename__ = "supervision_unit_metrics"
    # The id of the unit's district the metric is measured for
    district = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The id of the unit the metric is measured for
    unit = Column(String, primary_key=True, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "district", "unit"],
            [
                "supervision_units.state_code",
                "supervision_units.supervision_district_id",
                "supervision_units.external_id",
            ],
        ),
    )


class SupervisionDistrictMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_district_metrics`"""

    __tablename__ = "supervision_district_metrics"
    # The id of the district the metric is measured for
    district = Column(
        String,
        primary_key=True,
        nullable=False,
    )

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "district"],
            [
                "supervision_districts.state_code",
                "supervision_districts.external_id",
            ],
        ),
    )


class SupervisionStateMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_state_metrics`"""

    __tablename__ = "supervision_state_metrics"
