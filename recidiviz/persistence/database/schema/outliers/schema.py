# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2023 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ============================================================================
"""Define the ORM schema objects that map directly to the database, for Outliers related entities."""

from typing import Any, Dict

from sqlalchemy import (
    JSON,
    BigInteger,
    Boolean,
    Column,
    Date,
    DateTime,
    Float,
    ForeignKeyConstraint,
    Identity,
    Integer,
    String,
)
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy.orm import DeclarativeMeta, declarative_base

from recidiviz.persistence.database.database_entity import DatabaseEntity

# Key to pass to __table_args__["info"] to keep the table up-to-date with alembic migrations.
RUN_MIGRATIONS = "run_migrations"

# Defines the base class for all table classes in the Outliers schema.
OutliersBase: DeclarativeMeta = declarative_base(
    cls=DatabaseEntity, name="OutliersBase"
)


class PersonBase:
    """Base class that includes attributes that all person entities must define"""

    state_code = Column(String, primary_key=True)
    external_id = Column(String, primary_key=True)
    # Unique identifier generated by the Recidiviz system
    staff_id = Column(BigInteger, nullable=False)
    # Should follow the Recidiviz-standard JSON struct string representation
    full_name = Column(JSONB, nullable=False)
    pseudonymized_id = Column(String, nullable=False)


class SupervisionOfficer(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officers`"""

    __tablename__ = "supervision_officers"

    supervisor_external_id = Column(String, nullable=True)
    # Id of the supervision district the officer is assigned to
    supervision_district = Column(String, nullable=True)
    # specialized caseload type, if applicable
    specialized_caseload_type = Column(String, nullable=True)


class SupervisionOfficerSupervisor(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_supervisors`"""

    __tablename__ = "supervision_officer_supervisors"

    # Id of the supervision district the supervisor manages or has officers for
    supervision_district = Column(String, nullable=True)
    email = Column(String, nullable=True)


class SupervisionDistrictManager(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_district_managers`"""

    __tablename__ = "supervision_district_managers"

    state_code = Column(String, primary_key=True)
    external_id = Column(String, primary_key=True)
    full_name = Column(JSON, nullable=True)
    email = Column(String, nullable=True)
    # Id of the supervision district the manager is assigned to
    supervision_district = Column(String, nullable=False)


class MetricBase:
    """Base class that includes attributes that all metrics must define"""

    state_code = Column(String, primary_key=True)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True)
    # The value of the given metric
    metric_value = Column(Float, nullable=False)
    # The end date for the period
    end_date = Column(Date, primary_key=True)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The type of the value, e.g. "RATE" or "COUNT". (see recidiviz.outliers.types.OutliersMetricValueType)
    value_type = Column(String, primary_key=True)


class SupervisionOfficerMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_metrics`"""

    __tablename__ = "supervision_officer_metrics"

    # The id of the officer the metric is measured for
    officer_id = Column(String, primary_key=True)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "officer_id"],
            [
                "supervision_officers.state_code",
                "supervision_officers.external_id",
            ],
        ),
    )


class SupervisionStateMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_state_metrics`"""

    __tablename__ = "supervision_state_metrics"


class MetricBenchmark(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.metric_benchmarks`"""

    __tablename__ = "metric_benchmarks"

    state_code = Column(String, primary_key=True)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The end date for the period
    end_date = Column(Date, primary_key=True)
    # The target rate for the given metric
    target = Column(Float, nullable=False)
    # The threshold for the given metric, specifically the IQR
    threshold = Column(Float, nullable=False)
    # Caseload type, if applicable. 'ALL' indicates the metric benchmark is statewide.
    caseload_type = Column(String, primary_key=True)
    # If it exists, the top x% of officers to highlight for this metric
    top_x_pct = Column(Integer)
    # The percentile value to compare an individual rate to and determine if they are in the top_x_pct
    top_x_pct_percentile_value = Column(Float)


class SupervisionOfficerOutlierStatus(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_outlier_status`"""

    __tablename__ = "supervision_officer_outlier_status"

    state_code = Column(String, primary_key=True)
    # The id of the officer the metric is measured for
    officer_id = Column(String, primary_key=True)
    # Caseload type, if applicable. 'ALL' value indicates the status is compared to a statewide metric.
    caseload_type = Column(String, primary_key=True)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The end date for the period
    end_date = Column(Date, primary_key=True)
    # The rate of the given metric
    metric_rate = Column(Float, nullable=False)
    # The target rate for the given metric
    target = Column(Float, nullable=False)
    # The threshold for the given metric, specifically the IQR
    threshold = Column(Float, nullable=False)
    # Whether the officer is either FAR, MET or NEAR the metric's target
    status = Column(String, nullable=False)
    # If it exists, highlight the top x% of officers for this metric
    top_x_pct = Column(Integer)
    # The percentile value to compare an individual rate to and determine if they are in the top_x_pct
    top_x_pct_percentile_value = Column(Float)
    # Whether the officer's metric rate is in the top x% of individuals for this metric
    is_top_x_pct = Column(Boolean)


class SupervisionClientEvent(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_client_events`"""

    __tablename__ = "supervision_client_events"

    # An autoincrementing primary key to allow duplicate rows.
    _id = Column(Integer, Identity(), primary_key=True)
    state_code = Column(String)
    # The metric id that this event applies to
    metric_id = Column(String)
    # The date the event occurred
    event_date = Column(Date)
    # The id of the JII the event applies to
    client_id = Column(String)
    # Should follow the Recidiviz-standard JSON struct string representation
    client_name = Column(JSON, nullable=True)
    # The external id of the officer assigned to this person at the time the event occurred
    officer_id = Column(String)
    # The start date of the officer assignment period that this event occurred in
    officer_assignment_date = Column(Date, nullable=True)
    # The end date of the officer assignment that this event occurred in
    officer_assignment_end_date = Column(Date, nullable=True)
    # The start date of the supervision period that this event occurred in
    supervision_start_date = Column(Date, nullable=True)
    # The end date of the supervision period that this event occurred in
    supervision_end_date = Column(Date, nullable=True)
    # The supervision type at the time of the event
    supervision_type = Column(String, nullable=True)
    # JSON object of information related to this event
    attributes = Column(JSON, nullable=True)
    pseudonymized_client_id = Column(String, nullable=False)
    pseudonymized_officer_id = Column(String, nullable=False)


class SupervisionClients(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_clients`"""

    __tablename__ = "supervision_clients"

    state_code = Column(String, primary_key=True)
    client_id = Column(String, primary_key=True)
    pseudonymized_client_id = Column(String, nullable=False)
    client_name = Column(JSON, nullable=True)
    birthdate = Column(Date, nullable=True)
    gender = Column(String, nullable=True)
    race_or_ethnicity = Column(String, nullable=True)


class Configuration(OutliersBase):
    """Table containing Outliers information that is configured by Recidiviz users via the admin panel"""

    __tablename__ = "configurations"
    # Other tables are deleted/recreated at import time, but this table needs to be kept up to date
    # via alembic migrations.
    __table_args__ = {"info": {RUN_MIGRATIONS: True}}

    id = Column(Integer, primary_key=True, autoincrement=True)
    updated_by = Column(String, nullable=False)
    updated_at = Column(DateTime, nullable=False)
    status = Column(String, nullable=False)
    feature_variant = Column(String)
    supervision_officer_label = Column(String, nullable=False)
    supervision_district_label = Column(String, nullable=False)
    supervision_unit_label = Column(String, nullable=False)
    supervision_supervisor_label = Column(String, nullable=False)
    supervision_district_manager_label = Column(String, nullable=False)
    supervision_jii_label = Column(String, nullable=False)
    learn_more_url = Column(String, nullable=False)
    none_are_outliers_label = Column(String, nullable=False)
    worse_than_rate_label = Column(String, nullable=False)
    exclusion_reason_description = Column(String, nullable=False)
    slightly_worse_than_rate_label = Column(String, nullable=False)
    at_or_below_rate_label = Column(String, nullable=False)
    absconders_label = Column(String, nullable=False, server_default="absconders")
    at_or_above_rate_label = Column(
        String, nullable=False, server_default="At or above statewide rate"
    )
    outliers_hover = Column(
        String,
        nullable=False,
        server_default="Has a rate on any metric significantly higher than peers - over 1 Interquartile Range above the statewide rate.",
    )
    doc_label = Column(String, nullable=False, server_default="DOC")
    # When adding new columns below, be sure to set a default value with the
    # server_default parameter and autogenerate a migration so that existing values
    # in the database have this column hydrated.
    # Be sure to add this column to the below:
    #     - recidiviz/admin_panel/line_staff_tools/outliers_api_schemas.py::ConfigurationSchema
    #     - recidiviz/outliers/types.py::OutliersProductConfiguration
    #     - frontends/admin-panel/src/InsightsStore/models/InsightsConfiguration.ts
    #     - frontends/admin-panel/src/components/Insights/AddConfigForm.tsx

    def to_dict(self) -> Dict[str, Any]:
        return {
            field.name: getattr(self, field.name, None) for field in self.__table__.c
        }


class UserMetadata(OutliersBase):
    """Insights-specific iformation about a user. Updated via the app itself, not ETL."""

    __tablename__ = "user_metadata"
    # Other tables are deleted/recreated at import time, but this table needs to be kept up to date
    # via alembic migrations.
    __table_args__ = {"info": {RUN_MIGRATIONS: True}}

    pseudonymized_id = Column(String, primary_key=True)
    has_seen_onboarding = Column(Boolean, default=False)
