# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2023 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# ============================================================================
"""Define the ORM schema objects that map directly to the database, for Outliers related entities."""
from sqlalchemy import (
    JSON,
    BigInteger,
    Column,
    Date,
    Float,
    ForeignKeyConstraint,
    String,
)
from sqlalchemy.orm import DeclarativeMeta, declarative_base

from recidiviz.persistence.database.database_entity import DatabaseEntity

# Defines the base class for all table classes in the Outliers schema.
OutliersBase: DeclarativeMeta = declarative_base(
    cls=DatabaseEntity, name="OutliersBase"
)


class SupervisionDistrict(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_districts`"""

    __tablename__ = "supervision_districts"

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    name = Column(String, nullable=True)


class PersonBase:
    """Base class that includes attributes that all person entities must define"""

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    # Unique identifier generated by the Recidiviz system
    staff_id = Column(BigInteger, nullable=False)
    # Should follow the Recidiviz-standard JSON struct string representation
    full_name = Column(JSON, nullable=False)


class SupervisionOfficer(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officers`"""

    __tablename__ = "supervision_officers"

    supervisor_external_id = Column(String, nullable=True)
    # Id of the supervision district the officer is assigned to
    supervision_district = Column(String, nullable=True)
    # specialized caseload type, if applicable
    specialized_caseload_type = Column(String, nullable=True)


class SupervisionOfficerSupervisor(PersonBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_supervisors`"""

    __tablename__ = "supervision_officer_supervisors"

    # Id of the supervision district the supervisor manages or has officers for
    supervision_district = Column(String, nullable=True)
    email = Column(String, nullable=True)


class SupervisionDistrictManager(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_district_managers`"""

    __tablename__ = "supervision_district_managers"

    state_code = Column(String, primary_key=True, nullable=False)
    external_id = Column(String, primary_key=True, nullable=False)
    full_name = Column(JSON, nullable=True)
    email = Column(String, nullable=True)
    # Id of the supervision district the manager is assigned to
    supervision_district = Column(String, nullable=False)


class SupervisionDirector(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_directors`"""

    __tablename__ = "supervision_directors"

    state_code = Column(String, primary_key=True, nullable=False)
    # Should follow the Recidiviz-standard JSON struct string representation
    full_name = Column(JSON, nullable=False)
    email = Column(String, primary_key=True, nullable=False)


class MetricBase:
    """Base class that includes attributes that all metrics must define"""

    state_code = Column(String, primary_key=True, nullable=False)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True, nullable=False)
    # The value of the given metric
    metric_value = Column(Float, nullable=False)
    # The end date for the period
    end_date = Column(Date, primary_key=True, nullable=False)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The type of the value, e.g. "RATE" or "COUNT". (see recidiviz.outliers.types.OutliersMetricValueType)
    value_type = Column(String, primary_key=True, nullable=False)


class SupervisionOfficerMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_metrics`"""

    __tablename__ = "supervision_officer_metrics"

    # The id of the officer the metric is measured for
    officer_id = Column(String, primary_key=True, nullable=False)

    __tableargs__ = (
        ForeignKeyConstraint(
            ["state_code", "officer_id"],
            [
                "supervision_officers.state_code",
                "supervision_officers.external_id",
            ],
        ),
    )


class SupervisionStateMetric(MetricBase, OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_state_metrics`"""

    __tablename__ = "supervision_state_metrics"


class MetricBenchmark(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.metric_benchmarks`"""

    __tablename__ = "metric_benchmarks"

    state_code = Column(String, primary_key=True, nullable=False)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True, nullable=False)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The end date for the period
    end_date = Column(Date, primary_key=True, nullable=False)
    # The target rate for the given metric
    target = Column(Float, nullable=False)
    # The threshold for the given metric, specifically the IQR
    threshold = Column(Float, nullable=False)
    # Caseload type, if applicable. NULL value indicates the metric benchmark is statewide.
    caseload_type = Column(String, primary_key=True, nullable=True)


class SupervisionOfficerOutlierStatus(OutliersBase):
    """ETL data imported from `recidiviz.calculator.query.state.views.outliers.supervision_officer_outlier_status`"""

    __tablename__ = "supervision_officer_outlier_status"

    state_code = Column(String, primary_key=True, nullable=False)
    # The id of the officer the metric is measured for
    officer_id = Column(String, primary_key=True, nullable=False)
    # Caseload type, if applicable. NULL value indicates the status is compared to a statewide metric.
    caseload_type = Column(String, primary_key=True, nullable=True)
    # The name of the metric, which corresponds to a column in the supervision_x_aggregated_metrics_materialized table
    metric_id = Column(String, primary_key=True, nullable=False)
    # The period that this metric applies to (see recidiviz.aggregated_metrics.metric_time_periods.py)
    period = Column(
        String,
        primary_key=True,
        nullable=False,
    )
    # The end date for the period
    end_date = Column(Date, primary_key=True, nullable=False)
    # The rate of the given metric
    metric_rate = Column(Float, nullable=False)
    # The target rate for the given metric
    target = Column(Float, nullable=False)
    # The threshold for the given metric, specifically the IQR
    threshold = Column(Float, nullable=False)
    # Whether the officer is either FAR, MET or NEAR the metric's target
    status = Column(String, nullable=False)
