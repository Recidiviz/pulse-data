"""
Unit tests for the pii_check module, which analyzes code changes for potential PII.
"""
import unittest

from recidiviz.tools.pii_detection.pii_check import (
    FIND_PII_GEMINI_PROMPT,
    build_markdown_comment,
    extract_json_from_markdown,
    generate_found_pii_table,
)


class TestPIICheck(unittest.TestCase):
    """
    Unit tests for functions in the pii_check module. Specifically it looks
     at JSON extraction of the Gemini feedback, table generation, and markdown comment creation.
    """

    # Allow full diff visibility for debugging test failures
    maxDiff = None

    def test_extract_json_from_markdown(self) -> None:
        markdown_text = """
        Some text before generated by Gemini response
        ```json
        [{"content": "fake@fake.com", "type": "email"}]
        ```
        Some text after generated by Gemini response
        """
        extracted_json = extract_json_from_markdown(markdown_text)
        expected_json = '[{"content": "fake@fake.com", "type": "email"}]'
        self.assertEqual(extracted_json, expected_json)

    def test_generate_found_pii_table(self) -> None:
        findings = [
            {
                "content": "fake@fake.com",
                "type": "email",
                "risk": "LOW",
                "rationale": "This is an email address.",
                "context": "in a string literal",
                "file": "example.py",
                "line": 10,
            },
            {
                "content": "555-555-5555",
                "type": "phone number",
                "risk": "MEDIUM",
                "rationale": "This is a phone number.",
                "context": "in a comment",
                "file": "example.py",
                "line": 20,
            },
        ]
        table = generate_found_pii_table(findings)
        expected_table = (
            "| Content         | Type         | Risk   | Rationale                 | Context             | File          |\n"
            "|-----------------|--------------|--------|---------------------------|---------------------|---------------|\n"
            "| `fake@fake.com` | email        | LOW    | This is an email address. | in a string literal | example.py:10 |\n"
            "| `555-555-5555`  | phone number | MEDIUM | This is a phone number.   | in a comment        | example.py:20 |"
        )
        self.assertMultiLineEqual(table.strip(), expected_table.strip())

    def test_build_markdown_comment(self) -> None:
        findings = [
            {
                "content": "fake@fake.com",
                "type": "email",
                "risk": "LOW",
                "rationale": "This is an email address.",
                "context": "in a string literal",
                "file": "example.py",
                "line": 10,
            },
            {
                "content": "555-555-5555",
                "type": "phone number",
                "risk": "MEDIUM",
                "rationale": "This is a phone number.",
                "context": "in a comment",
                "file": "example.py",
                "line": 20,
            },
        ]
        repo = "recidiviz/test-repo"
        head_sha = "abc123"
        markdown_comment = build_markdown_comment(findings, repo, head_sha)

        expected_table = (
            "| Content         | Type         | Risk   | Rationale                 | Context             | File                                                                               |\n"
            "|-----------------|--------------|--------|---------------------------|---------------------|------------------------------------------------------------------------------------|\n"
            "| `fake@fake.com` | email        | LOW    | This is an email address. | in a string literal | [example.py:10](https://github.com/recidiviz/test-repo/blob/abc123/example.py#L10) |\n"
            "| `555-555-5555`  | phone number | MEDIUM | This is a phone number.   | in a comment        | [example.py:20](https://github.com/recidiviz/test-repo/blob/abc123/example.py#L20) |"
        )
        self.assertIn(expected_table, markdown_comment)
        self.assertIn("### ⚠️ Potential PII detected", markdown_comment)
        self.assertIn(
            "_This comment is automatically updated on new commits to this PR._",
            markdown_comment,
        )

    def test_prompt_contains_false_positive_guidance(self) -> None:
        """Test that the prompt contains guidance to avoid false positives."""

        # Check that the prompt contains guidance about print statements
        self.assertIn("print statement", FIND_PII_GEMINI_PROMPT)

        # Check that the prompt contains guidance about common column names
        self.assertIn("person_id", FIND_PII_GEMINI_PROMPT)
        self.assertIn("officer_id", FIND_PII_GEMINI_PROMPT)
        self.assertIn("race", FIND_PII_GEMINI_PROMPT)

        # Check that the prompt mentions not flagging column name references
        self.assertIn("column name", FIND_PII_GEMINI_PROMPT.lower())

        # Check that the prompt mentions variable names and code identifiers
        self.assertIn("Variable names", FIND_PII_GEMINI_PROMPT)


if __name__ == "__main__":
    unittest.main()
