# Recidiviz - a data platform for criminal justice reform
# Copyright (C) 2020 Recidiviz, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# =============================================================================
"""Class that manages logic related to materializing ingest views for a region so
the results can be processed and merged into our Postgres database.
"""
import datetime
import uuid
from typing import Dict, Optional

from recidiviz.big_query.big_query_utils import datetime_clause
from recidiviz.ingest.direct import direct_ingest_regions
from recidiviz.ingest.direct.ingest_view_materialization.instance_ingest_view_contents import (
    MATERIALIZATION_TIME_COL_NAME,
    UPPER_BOUND_DATETIME_COL_NAME,
)
from recidiviz.ingest.direct.types.cloud_task_args import IngestViewMaterializationArgs
from recidiviz.ingest.direct.types.direct_ingest_instance import DirectIngestInstance
from recidiviz.ingest.direct.views.direct_ingest_view_query_builder import (
    DestinationTableType,
    DirectIngestViewQueryBuilder,
)
from recidiviz.ingest.direct.views.direct_ingest_view_query_builder_collector import (
    DirectIngestViewQueryBuilderCollector,
)
from recidiviz.utils.environment import GCP_PROJECT_STAGING
from recidiviz.utils.metadata import local_project_id_override
from recidiviz.utils.string import StrictStringFormatter

SELECT_SUBQUERY = "SELECT * FROM `{project_id}.{dataset_id}.{table_name}`;"
TABLE_NAME_DATE_FORMAT = "%Y_%m_%d_%H_%M_%S"

_DATAFLOW_INGEST_VIEW_OUTPUT_QUERY_TEMPLATE = f"""
WITH view_results AS (
    {{view_query}}
)
SELECT *,
    CURRENT_DATETIME('UTC') AS {MATERIALIZATION_TIME_COL_NAME},
    {{upper_bound_datetime_inclusive}} AS {UPPER_BOUND_DATETIME_COL_NAME}
FROM view_results;
"""


# TODO(#20930): We should be able to delete this entire class with the exception of the
#  functionality in dataflow_query_for_args(). This will require transitioning other
#  remaining usages in ingest_stability_check.py and ingest view tests to use that
#  function.
class IngestViewMaterializerImpl:
    """Class that manages logic related to materializing ingest views for a region so
    the results can be processed and merged into our Postgres database.
    """

    @classmethod
    def _generate_request_id(cls) -> str:
        """Generates a short, random alphanumeric string that can be appended to the
        names of temp tables generated by this class to prevent collisions with other
        tables created in parallel."""
        return str(uuid.uuid4())[:8]

    @staticmethod
    def _create_date_diff_query(
        upper_bound_query: str, upper_bound_prev_query: str
    ) -> str:
        """Provided the given |upper_bound_query| and |upper_bound_prev_query| returns a query which will return the
        delta between those two queries.
        """
        main_query, filter_query = (upper_bound_query, upper_bound_prev_query)
        filter_query = filter_query.rstrip().rstrip(";")
        main_query = main_query.rstrip().rstrip(";")
        query = f"(\n{main_query}\n) EXCEPT DISTINCT (\n{filter_query}\n);"
        return query

    @staticmethod
    def _get_upper_bound_intermediate_table_name(
        ingest_view_materialization_args: IngestViewMaterializationArgs, request_id: str
    ) -> str:
        """Returns name of the intermediate table that will store data for the view query with a date bound equal to the
        upper_bound_datetime_inclusive in the args.
        """
        return (
            f"{ingest_view_materialization_args.ingest_view_name}_"
            f"{ingest_view_materialization_args.upper_bound_datetime_inclusive.strftime(TABLE_NAME_DATE_FORMAT)}_"
            f"upper_bound_{request_id}"
        )

    @classmethod
    def debug_query_for_args(
        cls,
        ingest_views_by_name: Dict[str, DirectIngestViewQueryBuilder],
        raw_data_source_instance: DirectIngestInstance,
        ingest_view_materialization_args: IngestViewMaterializationArgs,
    ) -> str:
        """Returns a version of the materialization query for the provided args that can
        be run in the BigQuery UI.

        Generates a single query that is date bounded such that it represents the data
        that has changed for this view between the specified date bounds in the provided
         materialization args.

        If there is no lower bound, this produces a query for a historical query up to
        the upper bound date. Otherwise, it diffs two historical queries to produce a
        delta query, using the SQL 'EXCEPT DISTINCT' function.

        Important Note: This query is meant for debug/test use only. In the production
        ingest flow, query results for individual dates are persisted into temporary
        tables, and those temporary tables are then diff'd using SQL's `EXCEPT DISTINCT`
        function.
        """
        ingest_view = ingest_views_by_name[
            ingest_view_materialization_args.ingest_view_name
        ]

        request_id = cls._generate_request_id()
        upper_bound_table_id = cls._get_upper_bound_intermediate_table_name(
            ingest_view_materialization_args, request_id=request_id
        )
        query = cls._generate_ingest_view_query_for_date(
            ingest_view=ingest_view,
            raw_data_source_instance=raw_data_source_instance,
            destination_table_type=DestinationTableType.TEMPORARY,
            destination_dataset_id=None,
            destination_table_id=upper_bound_table_id,
            update_timestamp=ingest_view_materialization_args.upper_bound_datetime_inclusive,
            raw_table_subquery_name_prefix="upper_"
            if ingest_view.materialize_raw_data_table_views
            else "",
        )

        upper_bound_select = f"SELECT * FROM {upper_bound_table_id}"
        query = f"{query}\n{upper_bound_select}"

        query = DirectIngestViewQueryBuilder.add_order_by_suffix(
            query=query, order_by_cols=ingest_view.order_by_cols
        )

        return query

    @classmethod
    def dataflow_query_for_args(
        cls,
        view_builder: DirectIngestViewQueryBuilder,
        raw_data_source_instance: DirectIngestInstance,
        ingest_view_materialization_args: IngestViewMaterializationArgs,
    ) -> str:
        """Returns a version of the ingest view query for the provided args that can
        be run in Dataflow. Augments the ingest view query with metadata columns that
        will be output to materialized ingest view results tables.

        A note that this query for Dataflow cannot use materialized tables or temporary
        tables."""
        upper_bound_datetime_inclusive = (
            ingest_view_materialization_args.upper_bound_datetime_inclusive
        )
        view_query = cls._generate_ingest_view_query_for_date(
            ingest_view=view_builder,
            raw_data_source_instance=raw_data_source_instance,
            destination_table_type=DestinationTableType.NONE,
            destination_dataset_id=None,
            destination_table_id=None,
            raw_table_subquery_name_prefix=None,
            update_timestamp=upper_bound_datetime_inclusive,
            use_order_by=False,
            using_dataflow=True,
        ).rstrip(";")
        upper_bound_datetime_inclusive_clause = datetime_clause(
            upper_bound_datetime_inclusive, include_milliseconds=True
        )

        return StrictStringFormatter().format(
            _DATAFLOW_INGEST_VIEW_OUTPUT_QUERY_TEMPLATE,
            view_query=view_query,
            upper_bound_datetime_inclusive=upper_bound_datetime_inclusive_clause,
        )

    @staticmethod
    def _generate_ingest_view_query_for_date(
        *,
        ingest_view: DirectIngestViewQueryBuilder,
        raw_data_source_instance: DirectIngestInstance,
        update_timestamp: datetime.datetime,
        destination_table_type: DestinationTableType,
        destination_dataset_id: Optional[str],
        destination_table_id: Optional[str],
        raw_table_subquery_name_prefix: Optional[str] = None,
        use_order_by: bool = True,
        using_dataflow: bool = False,
    ) -> str:
        """Generates a single query for the provided |ingest view| that is date bounded by |update_timestamp|."""
        query = ingest_view.build_query(
            config=DirectIngestViewQueryBuilder.QueryStructureConfig(
                raw_data_source_instance=raw_data_source_instance,
                destination_table_type=destination_table_type,
                destination_dataset_id=destination_dataset_id,
                destination_table_id=destination_table_id,
                raw_table_subquery_name_prefix=raw_table_subquery_name_prefix,
                raw_data_datetime_upper_bound=update_timestamp,
                use_order_by=use_order_by,
            ),
            using_dataflow=using_dataflow,
        )
        return query


if __name__ == "__main__":
    # Update these variables and run to print a materialization query you can run in the BigQuery UI
    region_code_: str = "us_tn"
    ingest_view_name_: str = "DisciplinaryIncarcerationIncident"
    upper_bound_datetime_inclusive_: datetime.datetime = datetime.datetime(
        2023, 5, 2, 8, 3, 43, 383642
    )
    raw_data_instance: DirectIngestInstance = DirectIngestInstance.PRIMARY

    with local_project_id_override(GCP_PROJECT_STAGING):
        region_ = direct_ingest_regions.get_direct_ingest_region(region_code_)
        view_collector_ = DirectIngestViewQueryBuilderCollector(region_, [])
        views_by_name_ = {
            view.ingest_view_name: view
            for view in view_collector_.collect_query_builders()
        }

        debug_query = IngestViewMaterializerImpl.debug_query_for_args(
            ingest_views_by_name=views_by_name_,
            raw_data_source_instance=raw_data_instance,
            ingest_view_materialization_args=IngestViewMaterializationArgs(
                ingest_view_name=ingest_view_name_,
                ingest_instance=DirectIngestInstance.PRIMARY,
                upper_bound_datetime_inclusive=upper_bound_datetime_inclusive_,
            ),
        )
        print(debug_query)
